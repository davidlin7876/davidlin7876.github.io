<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Flutter技术开发入门和一些心得]]></title>
      <url>/2020/5/1/Flutter%E6%8A%80%E6%9C%AF%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E5%92%8C%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="Flutter是什么？"><a href="#Flutter是什么？" class="headerlink" title="Flutter是什么？"></a>Flutter是什么？</h1><p>Flutter 是 Google推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。</p>
<ul>
<li>它开辟了全新的思路，提供了一整套从底层渲染逻辑到上层开发语言的完整解决方案：视图渲染完全闭环在其框架内部，不依赖于底层操作系统提供的任何组件，从根本上保证了视图渲染在 Android 和 iOS 上的高度一致性。</li>
<li>Flutter 的开发语言 Dart，是 Google 专门为（大）前端开发量身打造的专属语言，借助于先进的工具链和编译器，成为了少数同时支持 JIT 和 AOT 的语言之一，开发期调试效率高，发布期运行速度快、执行性能好，在代码执行效率上可以媲美原生 App。</li>
<li>Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展。</li>
</ul>
<h1 id="Flutter的特性"><a href="#Flutter的特性" class="headerlink" title="Flutter的特性"></a>Flutter的特性</h1><h2 id="跨平台自绘引擎"><a href="#跨平台自绘引擎" class="headerlink" title="跨平台自绘引擎"></a>跨平台自绘引擎</h2><p>Flutter与用于构建移动应用程序的其它大多数框架不同，因为Flutter既不使用WebView，也不使用操作系统的原生控件。 相反，Flutter使用自己的高性能渲染引擎来绘制widget。这样不仅可以保证在Android和iOS上UI的一致性，而且也可以避免对原生控件依赖而带来的限制及高昂的维护成本。</p>
<p>Flutter使用Skia作为其2D渲染引擎，Skia是Google的一个2D图形处理函数库，包含字型、坐标转换，以及点阵图都有高效能且简洁的表现，Skia是跨平台的，并提供了非常友好的API，目前Google Chrome浏览器和Android均采用Skia作为其绘图引擎。</p>
<p>目前Flutter默认支持iOS、Android、Fuchsia（Google新的自研操作系统）三个移动平台。但Flutter亦可支持Web开发（Flutter for web）和PC开发。</p>
<h2 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h2><p>Flutter高性能主要靠两点来保证，首先，Flutter APP采用Dart语言开发。Dart在 JIT（即时编译）模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT(提前编译)，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。其次，Flutter使用自己的渲染引擎来绘制UI，布局数据等由Dart语言直接控制，所以在布局过程中不需要像RN那样要在JavaScript和Native之间通信，这在一些滑动和拖动的场景下具有明显优势，因为在滑动和拖动过程往往都会引起布局发生变化，所以JavaScript需要和Native之间不停的同步布局信息，这和在浏览器中要JavaScript频繁操作DOM所带来的问题是相同的，都会带来比较可观的性能开销。</p>
<h2 id="开发效率高"><a href="#开发效率高" class="headerlink" title="开发效率高"></a>开发效率高</h2><p>Dart运行时和编译器支持Flutter的两个关键特性的组合：</p>
<p>基于JIT的快速开发周期：Flutter在开发阶段采用，采用JIT模式，这样就避免了每次改动都要进行编译，极大的节省了开发时间；</p>
<p>基于AOT的发布包: Flutter在发布时可以通过AOT生成高效的ARM代码以保证应用性能。而JavaScript则不具有这个能力。</p>
<h2 id="高性能-1"><a href="#高性能-1" class="headerlink" title="高性能"></a>高性能</h2><p>Flutter旨在提供流畅、高保真的的UI体验。为了实现这一点，Flutter中需要能够在每个动画帧中运行大量的代码。这意味着需要一种既能提供高性能的语言，而不会出现会丢帧的周期性暂停，而Dart支持AOT，在这一点上可以做的比JavaScript更好。<br>Google作为一个轮子大厂，直接在两个平台上重写了各自的UIKit，对接到平台底层，减少UI层的多层转换，UI性能可以比肩原生，这个优势在滑动和播放动画时尤为明显。</p>
<h2 id="高度一致性"><a href="#高度一致性" class="headerlink" title="高度一致性"></a>高度一致性</h2><p>这里的高度一致性不仅仅指各平台 UI 一致，更重要的是各个平台运行的是同一份代码。以前一份需求在 iOS 与 Android 上需要各实现一份，在迭代的时候就会带来额外的协商成本，对于迭代速度很快的我们来说，Flutter可以很好地抹平这个成本。<br>但是并不是说用了Flutter就不需要原生开发了，原来做业务实现的原生开发者可以更关注与本身系统相关的底层和性能实现。</p>
<h2 id="高可控制性"><a href="#高可控制性" class="headerlink" title="高可控制性"></a>高可控制性</h2><p>什么是高可控制性？Flutter 对宿主的依赖很低，宿主提供一个画布就可以自己运行起来，还有渲染流程和时间派发都是自行运作的。换句话说，无论是修改内部实现还是优化内部逻辑，我们都可以很轻松地做到，这点和过去的 Native 应用开发有很大区别，使用 Native 开发需要各种 Hook，API 还有较高的风险。</p>
<h2 id="快速内存分配"><a href="#快速内存分配" class="headerlink" title="快速内存分配"></a>快速内存分配</h2><p>Flutter框架使用函数式流，这使得它在很大程度上依赖于底层的内存分配器。因此，拥有一个能够有效地处理琐碎任务的内存分配器将显得十分重要，在缺乏此功能的语言中，Flutter将无法有效地工作。当然Chrome V8的JavaScript引擎在内存分配上也已经做的很好，事实上Dart开发团队的很多成员都是来自Chrome团队的，所以在内存分配上Dart并不能作为超越JavaScript的优势，而对于Flutter来说，它需要这样的特性，而Dart也正好满足而已。</p>
<h2 id="类型安全"><a href="#类型安全" class="headerlink" title="类型安全"></a>类型安全</h2><p>由于Dart是类型安全的语言，支持静态类型检测，所以可以在编译前发现一些类型的错误，并排除潜在问题，这一点对于前端开发者来说可能会更具有吸引力。与之不同的，JavaScript是一个弱类型语言，也因此前端社区出现了很多给JavaScript代码添加静态类型检测的扩展语言和工具，如：微软的TypeScript以及Facebook的Flow。相比之下，Dart本身就支持静态类型，这是它的一个重要优势。</p>
<a id="more"></a>
<h1 id="Flutter与RN的优势"><a href="#Flutter与RN的优势" class="headerlink" title="Flutter与RN的优势"></a>Flutter与RN的优势</h1><p>RN是通过JavaScript通过 bridge 传递到native完成原生绘制， bridge 的成本高，因为需要频繁的跨桥调用，导致卡顿等性能问题。</p>
<p><img src="http://static.flin.catxn.cn/3637091-784fcf2f330b2654-2.png" alt=""></p>
<p>Flutter利用DVM(dart虚拟机) 减少了桥的交互，在运行时期直接执行这些编译后的原生代码，就和我们进行原生开发一样，不再需要Bridge来担任中介的角色</p>
<p><img src="http://static.flin.catxn.cn/3637091-656facaec9cb5335-2.png" alt=""></p>
<h1 id="用chflutter工具包安装和更新Flutter环境"><a href="#用chflutter工具包安装和更新Flutter环境" class="headerlink" title="用chflutter工具包安装和更新Flutter环境"></a>用chflutter工具包安装和更新Flutter环境</h1><p>因为实现版本的统一等功能，我们开发了chflutter工具包，按下面步骤可以直接安装和配置好Flutter的SDK环境。</p>
<h2 id="chflutter工具安装："><a href="#chflutter工具安装：" class="headerlink" title="chflutter工具安装："></a>chflutter工具安装：</h2><p><img src="http://static.flin.catxn.cn/2020-05-07%20%E4%B8%8B%E5%8D%8810.55.14.png" alt="chflutter工具"></p>
<p>1、打开终端下载<code>flutter_tool_kit</code>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜ cd /Code-Flutter/Codes</div><div class="line">➜ git clone http://gitlab.108sq.org/flutter_app/flutter_tool_kit.git</div></pre></td></tr></table></figure></p>
<p>2、切换到目录，然后根据终端提示初始化步骤输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜ cd framework_config.config</div><div class="line">➜ python3 framework.py install</div><div class="line">请输入flutter项目根目录:/Code-Flutter/Codes/ChangShuo/</div><div class="line">请输入gitlab用户token:LNHmxYB1PCuuwJb-bRf5</div></pre></td></tr></table></figure></p>
<p>3、其中用到的access token需要在Gitlab上面设置获取<br><img src="http://static.flin.catxn.cn/5e9546493cea5.png" alt=""></p>
<p>4、 配置本地环境变量，在终端输入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜ vim ~/.bash_profile</div><div class="line"></div><div class="line">.bash_profile文件中添加保存：</div><div class="line">alias chflutter=&quot;python3 /Code-Flutter/Codes/flutter_tool_kit/framework_config.config/framework.py&quot;</div><div class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</div><div class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</div><div class="line">export FLUTTER_ROOT=/flutter</div><div class="line">export PATH=/flutter/bin:$PATH</div><div class="line"></div><div class="line">➜ source ~/.bash_profile</div><div class="line">➜ chflutter -h</div></pre></td></tr></table></figure></p>
<h2 id="安装flutterSDK环境"><a href="#安装flutterSDK环境" class="headerlink" title="安装flutterSDK环境"></a>安装flutterSDK环境</h2><p>设置flutter路径，安装SDK。这边定的地址是：/flutter<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜ chflutter -eh</div><div class="line">➜ chflutter -ufd /flutter</div><div class="line">flutter安装目录已更新</div><div class="line">➜ chflutter -i</div></pre></td></tr></table></figure></p>
<h1 id="Dart语言简介"><a href="#Dart语言简介" class="headerlink" title="Dart语言简介"></a>Dart语言简介</h1><h2 id="Dart-的特性"><a href="#Dart-的特性" class="headerlink" title="Dart 的特性"></a>Dart 的特性</h2><h3 id="JIT-与-AOT"><a href="#JIT-与-AOT" class="headerlink" title="JIT 与 AOT"></a>JIT 与 AOT</h3><p>JIT 在运行时即时编译，在开发周期中使用，可以动态下发和执行代码，开发测试效率高，但运行速度和执行性能则会因为运行时即时编译受到影响。<br>AOT 即提前编译，可以生成被直接执行的二进制代码，运行速度快、执行性能表现好，但每次执行前都需要提前编译，开发测试效率低。</p>
<h3 id="内存分配与垃圾回收"><a href="#内存分配与垃圾回收" class="headerlink" title="内存分配与垃圾回收"></a>内存分配与垃圾回收</h3><p>Dart VM 的内存分配策略比较简单，创建对象时只需要在堆上移动指针，内存增长始终是线性的，省去了查找可用内存的过程。<br>在 Dart 中，并发是通过 Isolate 实现的。Isolate 是类似于线程但不共享内存，独立运行的 worker。这样的机制，就可以让 Dart 实现无锁的快速分配。<br>Dart 的垃圾回收，则是采用了多生代算法。新生代在回收内存时采用“半空间”机制，触发垃圾回收时，Dart 会将当前半空间中的“活跃”对象拷贝到备用空间，然后整体释放当前空间的所有内存。回收过程中，Dart 只需要操作少量的“活跃”对象，没有引用的大量“死亡”对象则被忽略，这样的回收机制很适合 Flutter 框架中大量 Widget 销毁重建的场景。</p>
<h3 id="单线程模型"><a href="#单线程模型" class="headerlink" title="单线程模型"></a>单线程模型</h3><p>Dart 是单线程的。那单线程意味着什么呢？这意味着 Dart 代码是有序的，按照在 main 函数出现的次序一个接一个地执行，不会被其他代码中断。<br>另外，Dart 当然也支持异步。需要注意的是，单线程和异步并不冲突。<br>单线程模型可以在等待的过程中做别的事情，等真正需要响应结果了，再去做对应的处理。因为等待过程并不是阻塞的，所以给我们的感觉就像是同时在做多件事情一样。但其实始终只有一个线程在处理你的事情。等待这个行为是通过 Event Loop 驱动的。<br><img src="https://static001.geekbang.org/resource/image/0c/ec/0cb6e6d34295cef460e48d139bc944ec.png" alt=""><br>在 Dart 中，实际上有两个队列，一个事件队列（Event Queue），另一个则是微任务队列（Microtask Queue）。在每一次事件循环中，Dart 总是先去第一个微任务队列中查询是否有可执行的任务，如果没有，才会处理后续的事件队列的流程。<br>异步任务我们用的最多的还是优先级更低的 Event Queue。比如，I/O、绘制、定时器这些异步事件，都是通过事件队列驱动主线程执行的。<br>Dart 为 Event Queue 的任务建立提供了一层封装，叫作 Future。<br><img src="https://static001.geekbang.org/resource/image/70/bc/70dc4e1c222ddfaee8aa06df85c22bbc.png" alt=""></p>
<h2 id="差异性"><a href="#差异性" class="headerlink" title="差异性"></a>差异性</h2><h3 id="1-变量声明"><a href="#1-变量声明" class="headerlink" title="1. 变量声明"></a>1. 变量声明</h3><h4 id="1-1-var"><a href="#1-1-var" class="headerlink" title="1.1 var"></a>1.1 var</h4><p>类似于JavaScript中的var，它可以接收任何类型的变量，但最大的不同是Dart中var变量一旦赋值，类型便会确定，则不能再改变其类型，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var t;</div><div class="line">t = &quot;hi world&quot;;</div><div class="line">// 下面代码在dart中会报错，因为变量t的类型已经确定为String，</div><div class="line">// 类型一旦确定后则不能再更改其类型。</div><div class="line">t = 1000;</div></pre></td></tr></table></figure></p>
<p>上面的代码在JavaScript是没有问题的，前端开发者需要注意一下，之所以有此差异是因为Dart本身是一个强类型语言，任何变量都是有确定类型的，在Dart中，当用var声明一个变量后，Dart在编译时会根据第一次赋值数据的类型来推断其类型，编译结束后其类型就已经被确定，而JavaScript是纯粹的弱类型脚本语言，var只是变量的声明方式而已。</p>
<h4 id="1-2-dynamic和Object"><a href="#1-2-dynamic和Object" class="headerlink" title="1.2 dynamic和Object"></a>1.2 dynamic和Object</h4><p>Object 是Dart所有对象的根基类，也就是说所有类型都是Object的子类(包括Function和Null)，所以任何类型的数据都可以赋值给Object声明的对象.<br>dynamic与var一样都是关键词,声明的变量可以赋值任意对象。<br>dynamic与Object相同之处在于,他们声明的变量可以在后期改变赋值类型。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dynamic t;</div><div class="line">Object x;</div><div class="line">t = &quot;hi world&quot;;</div><div class="line">x = &apos;Hello Object&apos;;</div><div class="line">//下面代码没有问题</div><div class="line">t = 1000;</div><div class="line">x = 1000;</div></pre></td></tr></table></figure></p>
<p>dynamic与Object不同的是,dynamic声明的对象编译器会提供所有可能的组合, 而Object声明的对象只能使用Object的属性与方法, 否则编译器会报错。如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">dynamic a;</div><div class="line">Object b;</div><div class="line">main() &#123;</div><div class="line">    a = &quot;&quot;;</div><div class="line">    b = &quot;&quot;;</div><div class="line">    printLengths();</div><div class="line">&#125;</div><div class="line"></div><div class="line">printLengths() &#123;</div><div class="line">    // no warning</div><div class="line">    print(a.length);</div><div class="line">    // warning:</div><div class="line">    // The getter &apos;length&apos; is not defined for the class &apos;Object&apos;</div><div class="line">    print(b.length);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>变量a不会报错, 变量b编译器会报错<br>dynamic的这个特性与Objective-C中的id作用很像. dynamic的这个特点使得我们在使用它时需要格外注意,这很容易引入一个运行时错误.</p>
<h4 id="1-3-final和const"><a href="#1-3-final和const" class="headerlink" title="1.3 final和const"></a>1.3 final和const</h4><p>如果您从未打算更改一个变量，那么使用 final 或 const，不是var，也不是一个类型。 一个 final 变量只能被设置一次，两者区别在于：const 变量是一个编译时常量，final变量在第一次使用时被初始化。被final或者const修饰的变量，变量类型可以省略，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">//可以省略String这个类型声明</div><div class="line">final str = &quot;hi world&quot;;</div><div class="line">//final String str = &quot;hi world&quot;; </div><div class="line">const str1 = &quot;hi world&quot;;</div><div class="line">//const String str1 = &quot;hi world&quot;;</div></pre></td></tr></table></figure></p>
<h3 id="2-函数"><a href="#2-函数" class="headerlink" title="2. 函数"></a>2. 函数</h3><h4 id="2-1-对于只包含一个表达式的函数，可以使用简写语法"><a href="#2-1-对于只包含一个表达式的函数，可以使用简写语法" class="headerlink" title="2.1 对于只包含一个表达式的函数，可以使用简写语法"></a>2.1 对于只包含一个表达式的函数，可以使用简写语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bool isNoble (int atomicNumber)=&gt; _nobleGases [ atomicNumber ] ！= null ;</div><div class="line">等价于</div><div class="line">bool isNoble (int atomicNumber) &#123;</div><div class="line">	return _nobleGases [ atomicNumber ] ！= null ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-可选的位置参数"><a href="#2-2-可选的位置参数" class="headerlink" title="2.2 可选的位置参数"></a>2.2 可选的位置参数</h4><p>包装一组函数参数，用[]标记为可选的位置参数，并放在参数列表的最后面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String say(String from, String msg, [String device]) &#123;</div><div class="line">  var result = &apos;$from says $msg&apos;;</div><div class="line">  if (device != null) &#123;</div><div class="line">    result = &apos;$result with a $device&apos;;</div><div class="line">  &#125;</div><div class="line">  return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面是一个不带可选参数调用这个函数的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">say(&apos;Bob&apos;, &apos;Howdy&apos;); //结果是： Bob says Howdy</div></pre></td></tr></table></figure></p>
<p>下面是用第三个参数调用这个函数的例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">say(&apos;Bob&apos;, &apos;Howdy&apos;, &apos;smoke signal&apos;); //结果是：Bob says Howdy with a smoke signal</div></pre></td></tr></table></figure></p>
<h4 id="2-3-可选的命名参数"><a href="#2-3-可选的命名参数" class="headerlink" title="2.3 可选的命名参数"></a>2.3 可选的命名参数</h4><p>定义函数时，使用{param1, param2, …}，放在参数列表的最后面，用于指定命名参数。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//设置[bold]和[hidden]标志</div><div class="line">void enableFlags(&#123;bool bold, bool hidden&#125;) &#123;</div><div class="line">    // ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>调用函数时，可以使用指定命名参数。例如：paramName: value<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">enableFlags(bold: true, hidden: false);</div></pre></td></tr></table></figure></p>
<p>可选命名参数在Flutter中使用非常多。</p>
<p>注意，不能同时使用可选的位置参数和可选的命名参数</p>
<h3 id="3-异步支持"><a href="#3-异步支持" class="headerlink" title="3. 异步支持"></a>3. 异步支持</h3><h4 id="3-1-Async-await"><a href="#3-1-Async-await" class="headerlink" title="3.1 Async/await"></a>3.1 Async/await</h4><p>async和await关键词支持了异步编程，允许您写出和同步代码很像的异步代码。</p>
<h4 id="3-2-Future"><a href="#3-2-Future" class="headerlink" title="3.2 Future"></a>3.2 Future</h4><p>Future与JavaScript中的Promise非常相似，表示一个异步操作的最终完成（或失败）及其结果值的表示。简单来说，它就是用于处理异步操作的，异步处理成功了就执行成功的操作，异步处理失败了就捕获错误或者停止后续操作。一个Future只会对应一个结果，要么成功，要么失败。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Future.delayed(new Duration(seconds: 2),()&#123;</div><div class="line">   //return &quot;hi world!&quot;;</div><div class="line">   throw AssertionError(&quot;Error&quot;);</div><div class="line">&#125;).then((data)&#123;</div><div class="line">   //执行成功会走到这里</div><div class="line">   print(data);</div><div class="line">&#125;).catchError((e)&#123;</div><div class="line">   //执行失败会走到这里</div><div class="line">   print(e);</div><div class="line">&#125;).whenComplete(()&#123;</div><div class="line">   //无论成功或失败都会走到这里</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<h4 id="3-3-回调地狱-Callback-Hell"><a href="#3-3-回调地狱-Callback-Hell" class="headerlink" title="3.3 回调地狱(Callback Hell)"></a>3.3 回调地狱(Callback Hell)</h4><p>如果代码中有大量异步逻辑，并且出现大量异步任务依赖其它异步任务的结果时，必然会出现Future.then回调中套回调情况。<br>举个例子，比如现在有个需求场景是用户先登录，登录成功后会获得用户ID，然后通过用户ID，再去请求用户个人信息，获取到用户个人信息后，为了使用方便，我们需要将其缓存在本地文件系统，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//用户登录</div><div class="line">Future&lt;String&gt; login(String userName, String pwd)&#123;</div><div class="line">    ...</div><div class="line">	//返回用户ID</div><div class="line">&#125;;</div><div class="line">//获取用户信息</div><div class="line">Future&lt;String&gt; getUserInfo(String id)&#123;</div><div class="line">    ...</div><div class="line">	//返回用户个人信息</div><div class="line">&#125;;</div><div class="line">// 保存用户信息</div><div class="line">Future saveUserInfo(String userInfo)&#123;</div><div class="line">    ...</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>接下来，执行整个任务流：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">login(&quot;alice&quot;,&quot;******&quot;).then((id)&#123;</div><div class="line"> //登录成功后通过，id获取用户信息</div><div class="line"> getUserInfo(id).then((userInfo)&#123;</div><div class="line">    //获取用户信息后保存</div><div class="line">    saveUserInfo(userInfo).then(()&#123;</div><div class="line">       //保存用户信息，接下来执行其它操作</div><div class="line">        ...</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>使用Future消除Callback Hell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">login(&quot;alice&quot;,&quot;******&quot;).then((id)&#123;</div><div class="line">      return getUserInfo(id);</div><div class="line">&#125;).then((userInfo)&#123;</div><div class="line">    return saveUserInfo(userInfo);</div><div class="line">&#125;).then((e)&#123;</div><div class="line">   //执行接下来的操作</div><div class="line">&#125;).catchError((e)&#123;</div><div class="line">  //错误处理</div><div class="line">  print(e);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>使用async/await消除callback hell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">task() async &#123;</div><div class="line">   try&#123;</div><div class="line">    String id = await login(&quot;alice&quot;,&quot;******&quot;);</div><div class="line">    String userInfo = await getUserInfo(id);</div><div class="line">    await saveUserInfo(userInfo);</div><div class="line">    //执行接下来的操作</div><div class="line">   &#125; catch(e)&#123;</div><div class="line">    //错误处理</div><div class="line">    print(e);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="4-字符串拼接的方式"><a href="#4-字符串拼接的方式" class="headerlink" title="4. 字符串拼接的方式"></a>4. 字符串拼接的方式</h3><p>变量取值 $name<br>函数取值 ${code??” 没有 “}<br>三引号：’’’  ‘’’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">getInfo() =&gt; &apos;&apos;&apos;</div><div class="line">购物车信息:</div><div class="line">-----------------------------</div><div class="line">  用户名: $name</div><div class="line">  优惠码: $&#123;code??&quot; 没有 &quot;&#125;</div><div class="line">  总价: $price</div><div class="line">  Date: $date</div><div class="line">-----------------------------</div><div class="line">&apos;&apos;&apos;;</div></pre></td></tr></table></figure></p>
<h1 id="一些Flutter开发中的心得："><a href="#一些Flutter开发中的心得：" class="headerlink" title="一些Flutter开发中的心得："></a>一些Flutter开发中的心得：</h1><h2 id="1-Dart-Flutter-扩展方法-ExtensionMethod"><a href="#1-Dart-Flutter-扩展方法-ExtensionMethod" class="headerlink" title="1. Dart/Flutter - 扩展方法(ExtensionMethod)"></a>1. Dart/Flutter - 扩展方法(ExtensionMethod)</h2><p>目前Dart-SDK-2.6.0及以上是可以正常使用的，但是在Flutter的Stable分支中是属于实验性的支持，因此我们需要做一下几个步骤的操作：</p>
<p>1.Flutter项目根目录创建一个analysis_options.yaml文件，然后添加以下内容到文件中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">analyzer:</div><div class="line">    enable-experiment:</div><div class="line">        - extension-methods</div></pre></td></tr></table></figure></p>
<p>2.语法是怎么样的呢，其实很简单。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/// 字符串扩展方法</div><div class="line">extension StringExtension on String&#123;</div><div class="line">  /// 是否是电话号码</div><div class="line">  bool get isMobileNumber &#123;</div><div class="line">    if(this?.isNotEmpty != true) return false;</div><div class="line">    return RegExp(r&apos;^((13[0-9])|(14[5,7,9])|(15[^4])|(18[0-9])|(17[0,1,3,5,6,7,8])|(19)[0-9])\d&#123;8&#125;$&apos;).hasMatch(this);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.怎么使用呢？那就更简单了，看实例！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void test()&#123;</div><div class="line">  bool isMobileNumber= &quot;电话号码&quot;.isMobileNumber;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="2-Flutter渲染、State原理和优化"><a href="#2-Flutter渲染、State原理和优化" class="headerlink" title="2. Flutter渲染、State原理和优化"></a>2. Flutter渲染、State原理和优化</h2><p><img src="https://static001.geekbang.org/resource/image/ac/2f/ac7d1cec200f7ea7cb6cbab04eda252f.png" alt=""></p>
<h3 id="渲染方面基本的理解"><a href="#渲染方面基本的理解" class="headerlink" title="渲染方面基本的理解"></a>渲染方面基本的理解</h3><p>优化之前我们先来介绍下Flutter的渲染原理，通过这部分基础了解渲染流程以及主要耗时花费。</p>
<p>Flutter视图树包含了三颗树：Widget、Element、RenderObject</p>
<p>Widget: 存放渲染内容、它只是一个配置数据结构，创建是非常轻量的，在页面刷新的过程中随时会重建</p>
<p>Element: 同时持有Widget和RenderObject，存放上下文信息，通过它来遍历视图树，支撑UI结构</p>
<p>RenderObject: 根据Widget的布局属性进行layout，paint ，负责真正的渲染</p>
<p>从创建到渲染的大体流程是：根据Widget生成Element，然后创建相应的RenderObject并关联到Element.renderObject属性上，最后再通过RenderObject来完成布局排列和绘制。</p>
<p>例如下面这段布局代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Container(</div><div class="line">      color: Colors.blue,</div><div class="line">      child: Row(</div><div class="line">        children: &lt;Widget&gt;[</div><div class="line">	Image.asset(&apos;image&apos;),</div><div class="line">	Text(&apos;text&apos;),</div><div class="line">	],</div><div class="line">    ),</div><div class="line">);</div></pre></td></tr></table></figure></p>
<p>对应三棵树的结构如下图<br><img src="http://static.flin.catxn.cn/640-4.png" alt=""></p>
<p>了解了这三棵树，我们再来看下页面刷新的时候具体做了哪些操作</p>
<p>当需要更新UI的时候，Framework通知Engine，Engine会等到下个Vsync信号到达的时候，会通知Framework进行animate, build，layout，paint，最后生成layer提交给Engine。Engine会把layer进行组合，生成纹理，最后通过Open Gl接口提交数据给GPU， GPU经过处理后在显示器上面显示，如下图：<br><img src="http://static.flin.catxn.cn/640-5.png" alt=""></p>
<p>结合前面的例子，如果text文本或者image内容发生变化会触发哪些操作呢？</p>
<p>Widget是不可改变，需要重新创建一颗新树，build开始，然后对上一帧的element树做遍历，调用他的updateChild，看子节点类型跟之前是不是一样，不一样的话就把子节点扔掉，创造一个新的，一样的话就做内容更新，对renderObject做updateRenderObject操作，updateRenderObject内部实现会判断现在的节点跟上一帧是不是有改动，有改动才会别标记dirty，重新layout、paint，再生成新的layer交给GPU，流程如下图：<br><img src="http://static.flin.catxn.cn/640-6.png" alt=""></p>
<h3 id="Widget中的State到底是什么？"><a href="#Widget中的State到底是什么？" class="headerlink" title="Widget中的State到底是什么？"></a>Widget中的State到底是什么？</h3><p>Widget 有 StatelessWidget 和 StatefulWidget 两种类型。StatefulWidget 应对有交互、需要动态变化视觉效果的场景，而 StatelessWidget 则用于处理静态的、无状态的视图展示。StatefulWidget 的场景已经完全覆盖了 StatelessWidget，因此我们在构建界面时，往往会大量使用 StatefulWidget 来处理静态的视图展示需求，看起来似乎也没什么问题。</p>
<p>那么，StatelessWidget 存在的必要性在哪里？StatefulWidget 是否是 Flutter 中的万金油？</p>
<h4 id="UI-编程范式"><a href="#UI-编程范式" class="headerlink" title="UI 编程范式"></a>UI 编程范式</h4><p>如果你有过原生系统（Android、iOS）或原生 JavaScript 开发经验的话，应该知道视图开发是命令式的，需要精确地告诉操作系统或浏览器用何种方式去做事情。比如，如果我们想要变更界面的某个文案，则需要找到具体的文本控件并调用它的控件方法命令，才能完成文字变更。<br>Flutter 的视图开发是声明式的，其核心设计思想就是将视图和数据分离<br>对我们来说，如果要实现同样的需求，则要稍微麻烦点：除了设计好 Widget 布局方案之外，还需要提前维护一套文案数据集，并为需要变化的 Widget 绑定数据集中的数据，使 Widget 根据这个数据集完成渲染。<br>但是，当需要变更界面的文案时，我们只要改变数据集中的文案数据，并通知 Flutter 框架触发 Widget 的重新渲染即可。这样一来，开发者将无需再精确关注 UI 编程中的各个过程细节，只要维护好数据集即可。比起命令式的视图开发方式需要挨个设置不同组件（Widget）的视觉属性，这种方式要便捷得多。<br>总结来说，命令式编程强调精确控制过程细节；而声明式编程强调通过意图输出结果整体。对应到 Flutter 中，意图是绑定了组件状态的 State，结果则是重新渲染后的组件。在 Widget 的生命周期内，应用到 State 中的任何更改都将强制 Widget 重新构建。<br>其中，对于组件完成创建后就无需变更的场景，状态的绑定是可选项。这里“可选”就区分出了 Widget 的两种类型，即：StatelessWidget 不带绑定状态，而 StatefulWidget 带绑定状态。当你所要构建的用户界面不随任何状态信息的变化而变化时，需要选择使用 StatelessWidget，反之则选用 StatefulWidget。前者一般用于静态内容的展示，而后者则用于存在交互反馈的内容呈现中。<br><img src="https://static001.geekbang.org/resource/image/3e/cc/3ec97a9f584132c2bcdbca60fd2888cc.png" alt=""><br><img src="https://static001.geekbang.org/resource/image/8a/f6/8ae7bf36f618a999da8847cbb4da4bf6.png" alt=""></p>
<p><code>StatefulWidget 不是万金油，要慎用</code><br>对于 UI 框架而言，同样的展示效果一般可以通过多种控件实现。从定义来看，StatefulWidget 仿佛是万能的，替代 StatelessWidget 看起来合情合理。于是 StatefulWidget 的滥用，也容易因此变得顺理成章，难以避免。<br>但事实是，StatefulWidget 的滥用会直接影响 Flutter 应用的渲染性能。<br>如果我们的根布局是一个 StatefulWidget，在其 State 中每调用一次更新 UI，都将是一整个页面所有 Widget 的销毁和重建。<br>在上面渲染方面有基本的理解，我们了解到，虽然 Flutter 内部通过 Element 层可以最大程度地降低对真实渲染视图的修改，提高渲染效率，而不是销毁整个 RenderObject 树重建。但，<code>大量 Widget 对象的销毁重建是无法避免的。如果某个子 Widget 的重建涉及到一些耗时操作，那页面的渲染性能将会急剧下降</code>。<br>因此，正确评估你的视图展示需求，避免无谓的 StatefulWidget 使用，是提高 Flutter 应用渲染性能最简单也是最直接的手段。</p>
<h3 id="优化措施"><a href="#优化措施" class="headerlink" title="优化措施:"></a>优化措施:</h3><ul>
<li>提高build效率，setState刷新数据尽量下发到底层节点，减少build层级深度。</li>
<li>提高paint效率，RepaintBoundry创建单独layer减少重绘区域。</li>
<li>StatefulWidget使用在实际有改变的Widget。</li>
<li>减少build中逻辑处理，因为widget在页面刷新的过程中随时会通过build重建，build调用频繁，我们应该只处理跟UI相关的逻辑</li>
<li>减少saveLayer（ShaderMask、ColorFilter、Text Overflow）、clipPath的使用，saveLayer会在GPU中分配一块新的绘图缓冲区，切换绘图目标，这个操作是在GPU中非常耗时的，clipPath会影响每个绘图指令,做相交操作，之外的部分剔除掉，所以这也是个耗时操作</li>
<li>减少Opacity Widget 使用，尤其是在动画中，因为他会导致widget每一帧都会被重建，可以用 AnimatedOpacity 或 FadeInImage 进行代替</li>
</ul>
<h2 id="3-对于类中的属性和方法的定义规范的建议："><a href="#3-对于类中的属性和方法的定义规范的建议：" class="headerlink" title="3. 对于类中的属性和方法的定义规范的建议："></a>3. 对于类中的属性和方法的定义规范的建议：</h2><ul>
<li>不引用其他属性的成员，定义为属性</li>
<li>引用其他属性，且不接收参数的成员，定义为getter <code>bool get isEmptyString</code></li>
<li>引用其他属性，且接受参数的成员，定义为function</li>
</ul>
<h1 id="iOS接入flutter问题"><a href="#iOS接入flutter问题" class="headerlink" title="iOS接入flutter问题"></a>iOS接入flutter问题</h1><ol>
<li><p>flutter以module形式接入到iOS主工程的时候（<a href="https://flutter.dev/docs/development/add-to-app/ios/project-setup" target="_blank" rel="external"></a>)，官网默认<code>*.xcworkspace</code>和<code>*.xcodeproj</code>是同一目录下，changshuo的ios工程由于历史原因<code>ChangShuo.xcworkspace</code>和<code>ChangShuo.xcodeproj</code>不在同一目录下，因此需要调整.iOS下的podhelp.rb脚本</p>
<figure class="highlight rb"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">flutter_export_environment_path = File.join(current_directory_pathname, <span class="string">'flutter_export_environment.sh'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>flutter的plugin是依赖Cocoapods建立的，当plugin依赖自定义的私有pod库的时候，需要手工在podfile中添加对于私有库的依赖,例如需要对<code>changshuo_logic_account</code>进行调试就需要在<code>changshuo_logic_account/example/Podfile</code>中添加<code>pod &#39;changshuo_ios_initialize&#39;</code>  </p>
</li>
<li><p>flutter在需要使用到原生的UIKit控件的时(由于功能还在测试中),需要在<code>info.plist</code>中添加<code>io.flutter.embedded_views_preview</code>为true</p>
</li>
<li><p>flutter引擎官方在Appdelegate的<code>didFinishLaunchingWithOptions</code>中初始化，但是运用到实际项目中，这样并不准确，引擎接入到历史工程中的时候，应该在初始化在FlutterController的前一个页面来同时保证内存资源和加载效率。</p>
</li>
<li><p>使用 <code>DecorationImage.ExactAssetImage</code>加载图片的时候，并不会通过assets目录下的2x，3x加载，只会加载1x的图片</p>
</li>
<li><p>dart里所有可定义的变量都是对象，包括int,double，enum这些简单的变量，这和Objective-C是有本质的区别，最直观的例子在OC中定义<code>BOOL aBool;</code>和dart定义<code>bool aBool</code>在OC中<code>aBool</code>未NO,在dart中为<code>null</code></p>
</li>
<li><p>dart中的泛型是编译期的真泛型，例如Map<string,dynamic>和Map<string,string>是不同的类型，这2个类型做相互赋值的时候会抛异常</string,string></string,dynamic></p>
</li>
<li><p>flutter中的<code>BuildContext context</code>是一个由上到下的环境变量记录，并且不同的Navigator对应不同的context，所以InheritWidget是使用同一个页面的子child中，而不是用于2个页面的传值。</p>
</li>
<li><p>dart语言是没有析构函数，只有在StatefulWidget的State中才存在<code>dispose()</code>（严格意义上也不是析构函数），所有再使用StreamController做释放操作的时候，只能依赖StatefulWidget。</p>
</li>
<li><p>遇到 <code>Waiting for another flutter command to release the startup lock...</code>的时候，表示非正常结束了上一个flutter应用，这个时候需要手工删除<code>{flutter}/bin/cache/lockfile</code>文件</p>
</li>
</ol>
<h1 id="Android进阶实践"><a href="#Android进阶实践" class="headerlink" title="Android进阶实践"></a>Android进阶实践</h1><h3 id="Flutter环境配置"><a href="#Flutter环境配置" class="headerlink" title="Flutter环境配置"></a>Flutter环境配置</h3><ul>
<li>安装flutter过程中可能会遇到从github上clone过程非常慢的现象[镜像包问题];团队多人开发为解决这种现象，我们可以先把github flutter 项目同步到gitee(码云)上（这一过程大概只需要20秒左右）再次gitee上同步下来就非常快了;</li>
<li><p>另外安装完后在环境变量中务必配置一下国内镜像，要不然在更新flutter upgrade将会非常慢有时还会下载不下来:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</div><div class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="创建Flutter工程与AndroidX迁移"><a href="#创建Flutter工程与AndroidX迁移" class="headerlink" title="创建Flutter工程与AndroidX迁移"></a>创建Flutter工程与AndroidX迁移</h3><ul>
<li>1.在创建flutter项目或模块时，务必将project name和package name填写好不要使用默认.往往在创建项目什么都没看很容易就行一直next,然后结束.当然一定要这样做也没什么问题，不足的之处就是回头再改一个比较麻烦另外很容易改不全;<br>2.在finished之后最好勾选Use androidx.* artifacts;</li>
<li>因flutter sdk相关引用包使用的是androidx模块，因此如果要对接flutter项目就要把项目迁移到androidx.官网提供的迁移步骤：<a href="https://www.bookstack.cn/read/flutter-1.2-zh/40336d41b348da21.md" target="_blank" rel="external">https://www.bookstack.cn/read/flutter-1.2-zh/40336d41b348da21.md</a></li>
</ul>
<h3 id="Android-Flutter引擎升级带来的问题"><a href="#Android-Flutter引擎升级带来的问题" class="headerlink" title="Android Flutter引擎升级带来的问题"></a>Android Flutter引擎升级带来的问题</h3><ul>
<li>Flutter升级1.12后做了比较大的发动,相关参考链接:<br><a href="https://flutter.cn/docs/development/tools/sdk/release-notes/release-notes-1.12.13" target="_blank" rel="external">https://flutter.cn/docs/development/tools/sdk/release-notes/release-notes-1.12.13</a><br><br><a href="https://baijiahao.baidu.com/s?id=1657245790948868968&amp;wfr=spider&amp;for=pc" target="_blank" rel="external">https://baijiahao.baidu.com/s?id=1657245790948868968&amp;wfr=spider&amp;for=pc</a></li>
<li>升级之后原io.flutter.app包下的有些类已经被弃用改用io.flutter.embedding.android（如FlutterActivity）</li>
<li><p>升级之后的项目需要在manimafest文件中添加配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">      android:name=&quot;flutterEmbedding&quot;</div><div class="line">      android:value=&quot;2&quot; /&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>FlutterActivity 设置透明问题</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  官方api有问题，BackgroundMode枚举并没有暴露出来</div><div class="line">FlutterActivity</div><div class="line">  .withNewEngine()</div><div class="line">  .backgroundMode(FlutterActivity.BackgroundMode.transparent).build(context)</div><div class="line">  </div><div class="line">  暂时可以通过下面代码来设置</div><div class="line">  Intent intent = FlutterActivity.withNewEngine().initialRoute(&apos;route&apos;).build(activity);</div><div class="line">  intent.putExtra(&quot;background_mode&quot;,&quot;transparent&quot;);</div><div class="line">  activity.startActivity(intent);</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Flutter包体积压缩"><a href="#Flutter包体积压缩" class="headerlink" title="Flutter包体积压缩"></a>Flutter包体积压缩</h3><p>安装包体积决定了用户等待下载的时间和可能会耗费的流量，如何控制安装包体积，减小flutter产物的大小成为当务之急，那么如何减少包大小？<br>1.打包时通过增加参数:<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew clean assembleRelease -Pextra-gen-snapshot-options=&quot;--dwarf_stack_traces,--print-snapshot-sizes,--obfuscate&quot;</div></pre></td></tr></table></figure></p>
<blockquote>
<p><font color="gray" size="3">查看缩减方式:<br>  1.执行以下命令导出arm架构和包的组成结构:<br>  flutter –suppress-analytics build aot –output-dir=build/aot –target-platform=android –target=lib/main.dart –release –android-arch=arm64 –extra-gen-snapshot-options=”–dwarf_stack_traces,–print-snapshot-sizes,–print_instructions_sizes_to=build/aot.json”<br>  2.使用dart命令将aot.json转为可视化网页：<br>  dart ./bin/run_binary_size_analysis.dart  build/aot.json path_to_webpage_dir<br>  </font><br>  <img src="media/15873090806806/15873604446994.jpg" alt=""></p>
</blockquote>
<p>2.通过对flutter/native资源的压缩和共享<br>  <a href="https://www.devio.org/2019/04/11/flutter-image-widget/" target="_blank" rel="external">https://www.devio.org/2019/04/11/flutter-image-widget/</a><br>3.过滤掉不需要的cpu架构<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./gradlew clean assembleRelease -Ptarget-platform=&quot;android-arm&quot;</div></pre></td></tr></table></figure></p>
<h3 id="Flutter集成"><a href="#Flutter集成" class="headerlink" title="Flutter集成"></a>Flutter集成</h3><ul>
<li><p>flutter模块集成到工程项目中时最好在gradle添加source方式，如果按ant和脚本打包出来的产物进行集成可能会出现版本兼容或包的冲突问题：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">flutter &#123;</div><div class="line">  source &quot;flutter模块地址&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过封装中间产物降低原项目代码的侵入性或耦合度.(可查看<a href="http://192.168.200.131/flutter_app/changshuo_android/changshuo_android_initial" target="_blank" rel="external">changshuo_android_initial文档</a>)</p>
</li>
</ul>
<h3 id="Flutter引擎的启动速度"><a href="#Flutter引擎的启动速度" class="headerlink" title="Flutter引擎的启动速度"></a>Flutter引擎的启动速度</h3><p>Android项目在启动flutter引擎时或首次打开flutter页面都会出现短暂的黑屏情况，这种情况我们要尽可能的去避免;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">对于加载flutter页面方式:</div><div class="line">1.manifest或xml layout注册方式;</div><div class="line">2.FlutterActivity.createDefaultIntent(this);</div><div class="line">3.FlutterActivity.withNewEngine();</div><div class="line">4.flutterView.attachToFlutterEngine(new FlutterEngine(this));</div><div class="line">5.FlutterActivity.withCachedEngine(&quot;engine id&quot;);</div></pre></td></tr></table></figure></p>
<blockquote>
<font color="gray" size="3">对于不同的沉浸方式建议withCachedEngine;flutter engin与页面状态是完全分离的，因此可以应用启动时即可在后面默默的启动并缓存好; 【这里需要做一定的封装与判断,直接使用可能导致资源释放不了问题,sdk内部对引擎缓存做了强引用处理.】</font>


</blockquote>
<h1 id="对技术前瞻性多些思考"><a href="#对技术前瞻性多些思考" class="headerlink" title="对技术前瞻性多些思考"></a>对技术前瞻性多些思考</h1><p>希望大家对于我们的技术前瞻性多些思考。空余时间多学一些。</p>
<p>无论是 Weex、RN、小程序，还是 Flutter、SwiftUI，他们解决的问题是不一样的，本质更不同。到底哪个更优其实没有标准答案，不同的业务场景和业务所处的时间点，造成选择会不一样。“我们是工程师，并不是 Swift 或者 Flutter 工程师，我们选择的技术最终要为我们的业务和商业服务。”</p>
<p>“拥有一把锤子可以敲一个钉子，拥有一个工具箱可以造一艘航母”。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flutter知识库]]></title>
      <url>/2020/3/1/Flutter%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="Flutter-WIKI"><a href="#Flutter-WIKI" class="headerlink" title="Flutter WIKI"></a>Flutter WIKI</h1><p>[TOC]</p>
<h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p><a href="https://flutterchina.club/web-analogs/" target="_blank" rel="external">《Flutter官方中文教程》</a></p>
<ul>
<li><a href="https://flutterchina.club/flutter-for-android/" target="_blank" rel="external">Flutter for Android 开发者</a></li>
<li><a href="https://flutterchina.club/flutter-for-ios/" target="_blank" rel="external">Flutter for iOS 开发者</a></li>
</ul>
<p><a href="https://book.flutterchina.club" target="_blank" rel="external">《Flutter实战》</a></p>
<p><a href="https://www.showdoc.cc/411604771348975?page_id=2397870947016786" target="_blank" rel="external">《Flutter核心技术与实战》</a></p>
<p><a href="https://juejin.im/collection/5db25bcff265da06a19a304e" target="_blank" rel="external">《Flutter完整开发实战详解 》</a></p>
<p><a href="https://www.devio.org/2019/04/11/flutter-image-widget/" target="_blank" rel="external">带你快速掌握Flutter图片开发核心技能</a></p>
<h2 id="架构相关"><a href="#架构相关" class="headerlink" title="架构相关"></a>架构相关</h2><p><a href="https://yq.aliyun.com/articles/739854" target="_blank" rel="external">Flutter+Serverless端到端研发架构实践</a></p>
<p><a href="https://yq.aliyun.com/articles/697672" target="_blank" rel="external">编译技术在服务端的探索和应用</a></p>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><p><a href="https://mp.weixin.qq.com/s/IZ6rUfg3_-zvopc7jZZobg" target="_blank" rel="external">Flutter 沙龙回顾 | 跨平台技术趋势及字节跳动 Flutter 架构实践</a></p>
<p><a href="https://www.infoq.cn/article/EYYIY7tp133QAC4U3Y5R" target="_blank" rel="external">Flutter 在字节跳动的现状与工程实践</a></p>
<p><a href="https://mp.weixin.qq.com/s/Unox7RPZQsyxSiH04DiGtw" target="_blank" rel="external">京东：将Flutter扩展到微信小程序端的探索</a></p>
<p><a href="https://yq.aliyun.com/articles/728144" target="_blank" rel="external">怎样的Flutter Engine定制流程，才能实现真正“开箱即用”？</a></p>
<h2 id="优化性能"><a href="#优化性能" class="headerlink" title="优化性能"></a>优化性能</h2><p><a href="https://mp.weixin.qq.com/s/Ls3cDcqjlyOX80PXUO0wRw" target="_blank" rel="external">Flutter 沙龙回顾 | 如何缩减接近 50% 的 Flutter 包体积</a></p>
<p><a href="https://yq.aliyun.com/articles/725876" target="_blank" rel="external">做一个高一致性、高性能的Flutter动态渲染，真的很难么？</a></p>
<p><a href="https://mp.weixin.qq.com/s/iXFa9C68gUHr7PL8NHnZUA" target="_blank" rel="external">复杂业务如何保证Flutter的高性能高流畅度？</a></p>
<a id="more"></a>
<h2 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h2><p><a href="https://juejin.im/post/5e58ceadf265da575918dd14" target="_blank" rel="external">Flutter 开发踩坑记录（干货总结）</a></p>
<p><a href="https://my.oschina.net/u/1464083/blog/2877167" target="_blank" rel="external">在Flutter中嵌入Native组件的解决方案</a></p>
<p><a href="https://www.jianshu.com/p/f9d00020b3a5" target="_blank" rel="external">Dart/Flutter - 扩展方法(ExtensionMethod)</a></p>
<p><a href="https://juejin.im/post/5e5f1d41518825495b29a05b" target="_blank" rel="external">dna — 一个 dart 到 native 的超级通道</a></p>
<p><a href="https://www.jianshu.com/p/14cbcbaa74b7" target="_blank" rel="external">FlutterJsonBeanFactory插件json使用</a></p>
<p><a href="https://www.codingsky.com/doc/flutter-things/flutter-plugin.html" target="_blank" rel="external">Flutter插件详解及其发布插件</a></p>
<h2 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h2><p><a href="http://dart.goodev.org/guides/language/effective-dart/style" target="_blank" rel="external">Flutter代码风格</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://juejin.im/collection/5db25d706fb9a069f422c374" target="_blank" rel="external">《Flutter番外的世界》</a></p>
<h2 id="附录A"><a href="#附录A" class="headerlink" title="附录A"></a>附录A</h2><p><a href="https://flutterchina.club" target="_blank" rel="external">Flutter中文网</a></p>
<p><a href="https://juejin.im/tag/Flutter" target="_blank" rel="external">掘金Flutter社区</a></p>
<p><a href="https://my.oschina.net/u/1464083?q=Flutter" target="_blank" rel="external">阿里云官方博客(已过滤Flutter)</a></p>
<p><a href="https://yq.aliyun.com/teams/290" target="_blank" rel="external">闲鱼技术博客</a></p>
<p><a href="https://flutter.dev" target="_blank" rel="external">https://flutter.dev</a></p>
<p><a href="https://pub.dev" target="_blank" rel="external">https://pub.dev</a></p>
<p><a href="https://pub.flutter-io.cn" target="_blank" rel="external">https://pub.flutter-io.cn</a></p>
<p><a href="https://github.com/flutter" target="_blank" rel="external">https://github.com/flutter</a></p>
<h2 id="附录B"><a href="#附录B" class="headerlink" title="附录B"></a>附录B</h2><p><a href="https://dartpad.dartlang.org" target="_blank" rel="external">工具Dart Pad</a></p>
<p>国内镜像地址：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 官方提供的国内镜像</div><div class="line">export PUB_HOSTED_URL=https://pub.flutter-io.cn</div><div class="line">export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</div><div class="line"></div><div class="line"># 上海交通大学提供的国内镜像</div><div class="line">export FLUTTER_STORAGE_BASE_URL=https://mirrors.sjtug.sjtu.edu.cn/</div><div class="line">expot PUB_HOSTED_URL=https://dart-pub.mirrors.sjtug.sjtu.edu.cn/</div></pre></td></tr></table></figure></p>
<h3 id="widgets完整关系图"><a href="#widgets完整关系图" class="headerlink" title="widgets完整关系图"></a>widgets完整关系图</h3><p><img src="http://static.flin.catxn.cn/8112345-bf44219f46c955aa-4.png" alt="widgets"></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Flutter </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[解决mac下的Sourcetree每次拉取提交都需要输入密码]]></title>
      <url>/2019/5/7/%E8%A7%A3%E5%86%B3mac%E4%B8%8BSourcetree%E6%AF%8F%E6%AC%A1%E6%8B%89%E5%8F%96%E6%8F%90%E4%BA%A4%E9%83%BD%E9%9C%80%E8%A6%81%E8%BE%93%E5%85%A5%E5%AF%86%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>[TOC]<br>最近重装了一次mac,并且重做了一下开发环境,结果以前的sourceTree项目的GIT密码始终保存不到Mac的钥匙串中,明明在钥匙串中是存在的.但是在使用sourceTree pull/push代码的时候还是需要再输入密码,很是繁琐.</p>
<p>于是,网上搜索了一下,说的在https模式下,Mac需要使用osxkeychain凭据助手,并在Git中设置使用. 并且如果已经安装了brew的应该会自带了osxkeychain.但是奇怪的是,我安装了brew的,使用brew安装应用也没有问题.那就只能手动的再设置一次了.</p>
<p>使用方法</p>
<p>先使用命令下载 git-credential-osxkeychain<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl http://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain -o git-credential-osxkeychain</div></pre></td></tr></table></figure></p>
<p>把git-credential-osxkeychain 放入 bin目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv git-credential-osxkeychain /usr/local/bin</div></pre></td></tr></table></figure></p>
<p>给git-credential-osxkeychain赋权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod u+x /usr/local/bin/git-credential-osxkeychain</div></pre></td></tr></table></figure></p>
<p>在Git全局配置中进行设置(也可以在某一个项目里面设置):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global credential.helper osxkeychain</div></pre></td></tr></table></figure></p>
<p>经过上面的设置，下次访问https的项目时只需要输入一次密码,就会存储到osx的钥匙串中了,以后再也不会在Git中询问了.</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Flutter SDK安装和诊断]]></title>
      <url>/2019/4/2/FlutterSDK%E5%AE%89%E8%A3%85%E5%92%8C%E8%AF%8A%E6%96%AD/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>本文以Mac系统为例</p>
<h2 id="访问官网安装："><a href="#访问官网安装：" class="headerlink" title="访问官网安装："></a>访问官网安装：</h2><p><a href="https://flutter.dev/docs/get-started/install/macos" target="_blank" rel="external">https://flutter.dev/docs/get-started/install/macos</a></p>
<h3 id="下载SDK包flutter-macos-v1-2-1-stable-zip"><a href="#下载SDK包flutter-macos-v1-2-1-stable-zip" class="headerlink" title="下载SDK包flutter_macos_v1.2.1-stable.zip"></a>下载SDK包flutter_macos_v1.2.1-stable.zip</h3><h3 id="命令行执行下面几个步骤："><a href="#命令行执行下面几个步骤：" class="headerlink" title="命令行执行下面几个步骤："></a>命令行执行下面几个步骤：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜ cd ~/development //替换成自己的目录</div><div class="line">➜ unzip ~/Downloads/flutter_macos_v1.2.1-stable.zip</div><div class="line">➜ export PATH=&quot;$PATH:`pwd`/flutter/bin&quot;</div><div class="line">➜ flutter precache</div><div class="line">➜ flutter doctor</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="doctor提示问题"><a href="#doctor提示问题" class="headerlink" title="doctor提示问题"></a>doctor提示问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">Doctor summary (to see all details, run flutter doctor -v):</div><div class="line">[✓] Flutter (Channel stable, v1.2.1, on Mac OS X 10.14.3 18D109, locale</div><div class="line">    zh-Hans-CN)</div><div class="line">[!] Android toolchain - develop for Android devices (Android SDK version 26.0.1)</div><div class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</div><div class="line">      To update using sdkmanager, run:</div><div class="line">        /Users/david/Library/Android/sdk/tools/bin/sdkmanager</div><div class="line">        &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</div><div class="line">      or visit https://flutter.io/setup/#android-setup for detailed</div><div class="line">      instructions.</div><div class="line">    ! Some Android licenses not accepted.  To resolve this, run: flutter doctor</div><div class="line">      --android-licenses</div><div class="line">[!] iOS toolchain - develop for iOS devices (Xcode 10.2)</div><div class="line">    ✗ libimobiledevice and ideviceinstaller are not installed. To install with</div><div class="line">      Brew, run:</div><div class="line">        brew update</div><div class="line">        brew install --HEAD usbmuxd</div><div class="line">        brew link usbmuxd</div><div class="line">        brew install --HEAD libimobiledevice</div><div class="line">        brew install ideviceinstaller</div><div class="line">    ✗ ios-deploy not installed. To install:</div><div class="line">        brew install ios-deploy</div><div class="line">[!] Android Studio (version 2.3)</div><div class="line">    ✗ Flutter plugin not installed; this adds Flutter specific functionality.</div><div class="line">    ✗ Dart plugin not installed; this adds Dart specific functionality.</div><div class="line">[!] VS Code (version 1.7.2)</div><div class="line">    ✗ Flutter extension not installed; install from</div><div class="line">      https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter</div><div class="line">[!] Connected device</div><div class="line">    ! No devices available</div><div class="line"></div><div class="line">! Doctor found issues in 5 categories.</div></pre></td></tr></table></figure>
<h1 id="解决中遇到的问题"><a href="#解决中遇到的问题" class="headerlink" title="解决中遇到的问题"></a>解决中遇到的问题</h1><h2 id="1，运行precache很慢"><a href="#1，运行precache很慢" class="headerlink" title="1，运行precache很慢"></a>1，运行precache很慢</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Downloading android-arm64-profile/darwin-x64 tools... ⢿ (This is taking an unexpect</div></pre></td></tr></table></figure>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜ export PUB_HOSTED_URL=https://pub.flutter-io.cn</div><div class="line">➜ export FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cn</div><div class="line">➜ flutter precache</div></pre></td></tr></table></figure>
<h2 id="2，更新brew很慢"><a href="#2，更新brew很慢" class="headerlink" title="2，更新brew很慢"></a>2，更新brew很慢</h2><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><p>使用中科大的镜像替换默认源</p>
<ul>
<li><p>第一步，替换brew.git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜ cd &quot;$(brew --repo)&quot;</div><div class="line">➜ git remote set-url origin https://mirrors.ustc.edu.cn/brew.git</div></pre></td></tr></table></figure>
</li>
<li><p>第二步：替换homebrew-core.git</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜ cd &quot;$(brew --repo)/Library/Taps/homebrew/homebrew-core&quot;</div><div class="line">➜ git remote set-url origin https://mirrors.ustc.edu.cn/homebrew-core.git</div></pre></td></tr></table></figure>
</li>
<li><p>最后使用下面命令进行更新，发现速度变的很快。替换镜像完成。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜ brew update</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3，brew遇到SSL-certificate-problem"><a href="#3，brew遇到SSL-certificate-problem" class="headerlink" title="3，brew遇到SSL certificate problem"></a>3，brew遇到SSL certificate problem</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜ brew install --HEAD usbmuxd</div><div class="line">==&gt; Cloning https://git.sukimashita.com/libusbmuxd.git</div><div class="line">Cloning into &apos;/Users/david/Library/Caches/Homebrew/usbmuxd--git&apos;...</div><div class="line">fatal: unable to access &apos;https://git.sukimashita.com/libusbmuxd.git/&apos;: SSL certificate problem: certificate has expired</div><div class="line">Error: An exception occurred within a child process:</div><div class="line">  DownloadError: Failed to download resource &quot;usbmuxd&quot;</div><div class="line">Failure while executing; `git clone --branch master https://git.sukimashita.com/libusbmuxd.git /Users/david/Library/Caches/Homebrew/usbmuxd--git` exited with 128. Here&apos;s the output:</div><div class="line">Cloning into &apos;/Users/david/Library/Caches/Homebrew/usbmuxd--git&apos;...</div><div class="line">fatal: unable to access &apos;https://git.sukimashita.com/libusbmuxd.git/&apos;: SSL certificate problem: certificate has expired</div></pre></td></tr></table></figure>
<h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜ git config --global http.sslVerify false</div></pre></td></tr></table></figure>
<h2 id="4，android-licenses长时间没有反应"><a href="#4，android-licenses长时间没有反应" class="headerlink" title="4，android-licenses长时间没有反应"></a>4，android-licenses长时间没有反应</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜ flutter doctor</div><div class="line">Doctor summary (to see all details, run flutter doctor -v):</div><div class="line">[✓] Flutter (Channel beta, v1.3.8, on Mac OS X 10.14.3 18D109, locale zh-Hans-CN)</div><div class="line">⢿ Checking Android licenses is taking an unexpectedly long time...</div></pre></td></tr></table></figure>
<h3 id="解决方案-3"><a href="#解决方案-3" class="headerlink" title="解决方案"></a>解决方案</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜ flutter doctor --android-licenses</div><div class="line">Warning: File /Users/david/.android/repositories.cfg could not be loaded.</div><div class="line">All SDK package licenses accepted.======] 100% Computing updates...</div></pre></td></tr></table></figure>
<h2 id="5，Install-the-Flutter-and-Dart-plugins"><a href="#5，Install-the-Flutter-and-Dart-plugins" class="headerlink" title="5，Install the Flutter and Dart plugins"></a>5，Install the Flutter and Dart plugins</h2><h3 id="Android-Studio-解决方案"><a href="#Android-Studio-解决方案" class="headerlink" title="Android Studio 解决方案"></a>Android Studio 解决方案</h3><p>To install these:</p>
<ul>
<li>Start Android Studio.</li>
<li>Open plugin preferences (Preferences &gt; Plugins on macOS, File &gt; Settings &gt; Plugins on Windows &amp; Linux).</li>
<li>Select Browse repositories, select the Flutter plugin and click Install.</li>
<li>Click Yes when prompted to install the Dart plugin.</li>
<li>Click Restart when prompted.</li>
</ul>
<h3 id="VSCode-解决方案"><a href="#VSCode-解决方案" class="headerlink" title="VSCode 解决方案"></a>VSCode 解决方案</h3><ul>
<li>Start VS Code.</li>
<li>Invoke View &gt; Command Palette….</li>
<li>Type “install”, and select Extensions: Install Extensions.</li>
<li>Type “flutter” in the extensions search field, select Flutter in the list, and click Install. This also installs the required Dart plugin.</li>
</ul>
<h4 id="VSCode-Validate-your-setup-with-the-Flutter-Doctor"><a href="#VSCode-Validate-your-setup-with-the-Flutter-Doctor" class="headerlink" title="VSCode Validate your setup with the Flutter Doctor"></a>VSCode Validate your setup with the Flutter Doctor</h4><ul>
<li>Invoke View &gt; Command Palette….</li>
<li>Type “doctor”, and select the Flutter: Run Flutter Doctor.</li>
<li>Review the output in the OUTPUT pane for any issues.</li>
</ul>
<h2 id="6，Android-SDK版本不匹配"><a href="#6，Android-SDK版本不匹配" class="headerlink" title="6，Android SDK版本不匹配"></a>6，Android SDK版本不匹配</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜ flutter doctor</div><div class="line">Doctor summary (to see all details, run flutter doctor -v):</div><div class="line">[✓] Flutter (Channel beta, v1.3.8, on Mac OS X 10.14.3 18D109, locale</div><div class="line">    zh-Hans-CN)</div><div class="line">[!] Android toolchain - develop for Android devices (Android SDK version 28.0.3)</div><div class="line">    ✗ Flutter requires Android SDK 28 and the Android BuildTools 28.0.3</div><div class="line">      To update using sdkmanager, run:</div><div class="line">        /Users/david/Library/Android/sdk/tools/bin/sdkmanager</div><div class="line">        &quot;platforms;android-28&quot; &quot;build-tools;28.0.3&quot;</div><div class="line">      or visit https://flutter.io/setup/#android-setup for detailed</div><div class="line">      instructions.</div><div class="line">[✓] iOS toolchain - develop for iOS devices (Xcode 10.2)</div><div class="line">[✓] Android Studio (version 3.3)</div><div class="line">[✓] VS Code (version 1.32.3)</div><div class="line">[✓] Connected device (1 available)</div></pre></td></tr></table></figure>
<h3 id="解决方案-4"><a href="#解决方案-4" class="headerlink" title="解决方案"></a>解决方案</h3><ul>
<li>点击androidStudio菜单的Settings</li>
<li>点击Appearance&amp;Behavior</li>
<li>点击System Settings</li>
<li>安装Android SDK 28</li>
</ul>
<h2 id="最后所有诊断都通过"><a href="#最后所有诊断都通过" class="headerlink" title="最后所有诊断都通过"></a>最后所有诊断都通过</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜ flutter doctor</div><div class="line">Doctor summary (to see all details, run flutter doctor -v):</div><div class="line">[✓] Flutter (Channel beta, v1.3.8, on Mac OS X 10.14.3 18D109, locale</div><div class="line">    zh-Hans-CN)</div><div class="line">[✓] Android toolchain - develop for Android devices (Android SDK version 28.0.3)</div><div class="line">[✓] iOS toolchain - develop for iOS devices (Xcode 10.2)</div><div class="line">[✓] Android Studio (version 3.3)</div><div class="line">[✓] VS Code (version 1.32.3)</div><div class="line">[✓] Connected device (1 available)</div></pre></td></tr></table></figure>
<h2 id="7-新建flutter项目flutter-Resolving-dependencies…很慢"><a href="#7-新建flutter项目flutter-Resolving-dependencies…很慢" class="headerlink" title="7. 新建flutter项目flutter Resolving dependencies…很慢"></a>7. 新建flutter项目flutter Resolving dependencies…很慢</h2><p>打开和新建flutter项目时发现，flutter Resolving dependencies…很慢。</p>
<h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>打开Flutter SDK：flutter\packages\flutter_tools\gradle\flutter.gradle<br>改为以下即可解决！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">        // google()</div><div class="line">        // jcenter()</div><div class="line">        maven&#123; url &apos;https://maven.aliyun.com/repository/google&apos; &#125;</div><div class="line">        maven&#123; url &apos;https://maven.aliyun.com/repository/jcenter&apos; &#125;</div><div class="line">        maven&#123;url &apos;http://maven.aliyun.com/nexus/content/groups/public&apos;&#125;</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        classpath &apos;com.android.tools.build:gradle:3.2.1&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Operation和OperationQueue温习总结]]></title>
      <url>/2019/2/1/Operation%E5%92%8COperationQueue%E6%B8%A9%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<p>NSOperation、NSOperationQueue 简介、操作和操作队列、使用步骤和基本使用方法、控制串行/并发执行、NSOperation 操作依赖和优先级、线程间的通信、线程同步和线程安全，以及 NSOperation、NSOperationQueue 常用属性和方法归纳。</p>
<h1 id="1-NSOperation、NSOperationQueue-简介"><a href="#1-NSOperation、NSOperationQueue-简介" class="headerlink" title="1. NSOperation、NSOperationQueue 简介"></a>1. NSOperation、NSOperationQueue 简介</h1><p>NSOperation、NSOperationQueue 是苹果提供给我们的一套多线程解决方案。实际上 NSOperation、NSOperationQueue 是基于 GCD 更高一层的封装，完全面向对象。但是比 GCD 更简单易用、代码可读性也更高。</p>
<h3 id="为什么要使用-NSOperation、NSOperationQueue？"><a href="#为什么要使用-NSOperation、NSOperationQueue？" class="headerlink" title="为什么要使用 NSOperation、NSOperationQueue？"></a>为什么要使用 NSOperation、NSOperationQueue？</h3><ul>
<li>可添加完成的代码块，在操作完成后执行。</li>
<li>添加操作之间的依赖关系，方便的控制执行顺序。</li>
<li>设定操作执行的优先级。</li>
<li>可以很方便的取消一个操作的执行。</li>
<li>使用 KVO 观察对操作执行状态的更改：isExecuteing、isFinished、isCancelled。</li>
</ul>
<h1 id="2-NSOperation、NSOperationQueue-操作和操作队列"><a href="#2-NSOperation、NSOperationQueue-操作和操作队列" class="headerlink" title="2. NSOperation、NSOperationQueue 操作和操作队列"></a>2. NSOperation、NSOperationQueue 操作和操作队列</h1><p>既然是基于 GCD 的更高一层的封装。那么，GCD 中的一些概念同样适用于 NSOperation、NSOperationQueue。在 NSOperation、NSOperationQueue 中也有类似的任务（操作）和队列（操作队列）的概念。</p>
<ul>
<li>操作（Operation）：<ul>
<li>执行操作的意思，换句话说就是你在线程中执行的那段代码。</li>
<li>在 GCD 中是放在 block 中的。在 NSOperation 中，我们使用 NSOperation 子类 NSInvocationOperation、NSBlockOperation，或者自定义子类来封装操作。</li>
</ul>
</li>
<li>操作队列（Operation Queues）：<ul>
<li>这里的队列指操作队列，即用来存放操作的队列。不同于 GCD 中的调度队列 FIFO（先进先出）的原则。NSOperationQueue 对于添加到队列中的操作，首先进入准备就绪的状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作的开始执行顺序（非结束执行顺序）由操作之间相对的优先级决定（优先级是操作对象自身的属性）。</li>
<li>操作队列通过设置最大并发操作数（maxConcurrentOperationCount）来控制并发、串行。</li>
<li>NSOperationQueue 为我们提供了两种不同类型的队列：主队列和自定义队列。主队列运行在主线程之上，而自定义队列在后台执行。</li>
</ul>
</li>
</ul>
<h1 id="3-NSOperation、NSOperationQueue-使用步骤"><a href="#3-NSOperation、NSOperationQueue-使用步骤" class="headerlink" title="3. NSOperation、NSOperationQueue 使用步骤"></a>3. NSOperation、NSOperationQueue 使用步骤</h1><p>NSOperation 需要配合 NSOperationQueue 来实现多线程。因为默认情况下，NSOperation 单独使用时系统同步执行操作，配合 NSOperationQueue 我们能更好的实现异步执行。<br>NSOperation 实现多线程的使用步骤分为三步：</p>
<ul>
<li>创建操作：先将需要执行的操作封装到一个 NSOperation 对象中。</li>
<li>创建队列：创建 NSOperationQueue 对象。</li>
<li>将操作加入到队列中：将 NSOperation 对象添加到 NSOperationQueue 对象中。</li>
</ul>
<p>之后呢，系统就会自动将 NSOperationQueue 中的 NSOperation 取出来，在新线程中执行操作。<br>下面我们来学习下 NSOperation 和 NSOperationQueue 的基本使用。</p>
<h1 id="4-NSOperation-和-NSOperationQueue-基本使用"><a href="#4-NSOperation-和-NSOperationQueue-基本使用" class="headerlink" title="4. NSOperation 和 NSOperationQueue 基本使用"></a>4. NSOperation 和 NSOperationQueue 基本使用</h1><h2 id="4-1-创建操作"><a href="#4-1-创建操作" class="headerlink" title="4.1 创建操作"></a>4.1 创建操作</h2><p>NSOperation 是个抽象类，不能用来封装操作。我们只有使用它的子类来封装操作。我们有三种方式来封装操作。</p>
<ul>
<li>使用子类 NSInvocationOperation</li>
<li>使用子类 NSBlockOperation</li>
<li>自定义继承自 NSOperation 的子类，通过实现内部相应的方法来封装操作。</li>
</ul>
<p>在不使用 NSOperationQueue，单独使用 NSOperation 的情况下系统同步执行操作，下面我们学习以下操作的三种创建方式。</p>
<a id="more"></a>
<h3 id="4-1-1-使用子类-NSInvocationOperation-swift中无这种方式"><a href="#4-1-1-使用子类-NSInvocationOperation-swift中无这种方式" class="headerlink" title="4.1.1 使用子类 NSInvocationOperation swift中无这种方式"></a>4.1.1 使用子类 <code>NSInvocationOperation</code> swift中无这种方式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 使用子类 NSInvocationOperation</div><div class="line">*/</div><div class="line">- (void)useInvocationOperation &#123;</div><div class="line">    // 1.创建 NSInvocationOperation 对象</div><div class="line">    NSLog(@&quot;start---%@&quot;, [NSThread currentThread]); // 打印当前线程</div><div class="line">    NSInvocationOperation *op = [[NSInvocationOperation alloc] initWithTarget:self selector:@selector(task1) object:nil];</div><div class="line">    // 2.调用 start 方法开始执行操作</div><div class="line">    [op start];</div><div class="line">&#125;</div><div class="line">/**</div><div class="line">* 任务1</div><div class="line">*/</div><div class="line">- (void)task1 &#123;</div><div class="line">    for (int i = 0; i &lt; 2; i++) &#123;</div><div class="line">        [NSThread sleepForTimeInterval:2]; // 模拟耗时操作</div><div class="line">        NSLog(@&quot;%d---%@&quot;, i, [NSThread currentThread]); // 打印当前线程</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>2019-02-01 10:39:50.336606+0800 NSInvocationOperationDemo[85071:3570974] start—<nsthread: 0x600000265400="">{number = 1, name = main}<br>2019-02-01 10:39:52.337095+0800 NSInvocationOperationDemo[85071:3570974] 0—<nsthread: 0x600000265400="">{number = 1, name = main}<br>2019-02-01 10:39:54.337249+0800 NSInvocationOperationDemo[85071:3570974] 1—<nsthread: 0x600000265400="">{number = 1, name = main}</nsthread:></nsthread:></nsthread:></p>
</blockquote>
<ul>
<li>可以看到：在没有使用 NSOperationQueue、在主线程中单独使用使用子类 NSInvocationOperation 执行一个操作的情况下，操作是在当前线程执行的，并没有开启新线程。</li>
</ul>
<p>如果在其他线程中执行操作，则打印结果为其他线程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 在其他线程使用子类 NSInvocationOperation</div><div class="line">[NSThread detachNewThreadSelector:@selector(useInvocationOperation) toTarget:self withObject:nil];</div></pre></td></tr></table></figure></p>
<p>输出结果：</p>
<blockquote>
<p>2019-02-01 10:40:35.781823+0800 NSInvocationOperationDemo[85111:3572741] start—<nsthread: 0x600000009180="">{number = 3, name = (null)}<br>2019-02-01 10:40:37.783119+0800 NSInvocationOperationDemo[85111:3572741] 0—<nsthread: 0x600000009180="">{number = 3, name = (null)}<br>2019-02-01 10:40:39.783312+0800 NSInvocationOperationDemo[85111:3572741] 1—<nsthread: 0x600000009180="">{number = 3, name = (null)}</nsthread:></nsthread:></nsthread:></p>
</blockquote>
<ul>
<li>可以看到：在其他线程中单独使用子类 NSInvocationOperation，操作是在当前调用的其他线程执行的，并没有开启新线程。</li>
</ul>
<h3 id="4-1-2-使用子类-NSBlockOperation"><a href="#4-1-2-使用子类-NSBlockOperation" class="headerlink" title="4.1.2 使用子类 NSBlockOperation"></a>4.1.2 使用子类 NSBlockOperation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 使用子类 NSBlockOperation</div><div class="line">*/</div><div class="line">func useBlockOperation() &#123;</div><div class="line">    print(&quot;start&quot;)</div><div class="line">    let iOp = BlockOperation.init &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    iOp.start()</div><div class="line">    print(&quot;end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>start<br>1—<nsthread: 0x600001be68c0="">{number = 1, name = main}<br>end</nsthread:></p>
</blockquote>
<ul>
<li>可以看到：在没有使用 NSOperationQueue、在主线程中单独使用 NSBlockOperation 执行一个操作的情况下，操作是在当前线程执行的，并没有开启新线程。</li>
</ul>
<p>但是，NSBlockOperation 还提供了一个方法 <code>addExecutionBlock:</code>，通过 <code>addExecutionBlock:</code> 就可以为 NSBlockOperation 添加额外的操作。这些操作（包括 blockOperationWithBlock 中的操作）可以在不同的线程中同时（并发）执行。只有当所有相关的操作已经完成执行时，才视为完成。<br>如果添加的操作多的话，<code>blockOperationWithBlock:</code> 中的操作也可能会在其他线程（非当前线程）中执行，这是由系统决定的，并不是说添加到 <code>blockOperationWithBlock:</code> 中的操作一定会在当前线程中执行。（可以使用 <code>addExecutionBlock:</code> 多添加几个操作试试）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@objc func useBlockOperation() &#123;</div><div class="line">    print(&quot;start&quot;)</div><div class="line">    // 1.创建 NSBlockOperation 对象</div><div class="line">    let iOp = BlockOperation.init &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    // 2.添加额外的操作</div><div class="line">    iOp.addExecutionBlock &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    iOp.start()</div><div class="line">    print(&quot;end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>start<br>2—<nsthread: 0x600000b3dd40="">{number = 3, name = (null)}<br>1—<nsthread: 0x600000b628c0="">{number = 1, name = main}<br>end</nsthread:></nsthread:></p>
</blockquote>
<ul>
<li>可以看出：使用子类 <code>NSBlockOperation</code>，并调用方法 <code>AddExecutionBlock:</code> 的情况下，<code>blockOperationWithBlock:</code>方法中的操作 和 <code>addExecutionBlock:</code> 中的操作是在不同的线程中异步执行的。而且，这次执行结果中 <code>blockOperationWithBlock:</code>方法中的操作也不是在当前线程（主线程）中执行的。从而印证了<code>blockOperationWithBlock:</code> 中的操作也可能会在其他线程（非当前线程）中执行。</li>
</ul>
<p>一般情况下，如果一个 NSBlockOperation 对象封装了多个操作。NSBlockOperation 是否开启新线程，取决于操作的个数。如果添加的操作的个数多，就会自动开启新线程。当然开启的线程数是由系统来决定的。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">performSelector(inBackground: #selector(useBlockOperation), with: nil)</div></pre></td></tr></table></figure>
<blockquote>
<p>start<br>2—<nsthread: 0x600002d56fc0="">{number = 4, name = (null)}<br>1—<nsthread: 0x600002d58980="">{number = 3, name = (null)}<br>end</nsthread:></nsthread:></p>
</blockquote>
<h3 id="4-1-3-使用自定义继承自-NSOperation-的子类"><a href="#4-1-3-使用自定义继承自-NSOperation-的子类" class="headerlink" title="4.1.3 使用自定义继承自 NSOperation 的子类"></a>4.1.3 使用自定义继承自 NSOperation 的子类</h3><p>如果使用子类 NSInvocationOperation、NSBlockOperation 不能满足日常需求，我们可以使用自定义继承自 NSOperation 的子类。可以通过重写 <code>main</code> 或者 <code>start</code> 方法 来定义自己的 NSOperation 对象。重写<code>main</code>方法比较简单，我们不需要管理操作的状态属性 <code>isExecuting</code> 和 <code>isFinished</code>。当 main 执行完返回的时候，这个操作就结束了。</p>
<p>先定义一个继承自 NSOperation 的子类，重写main方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class MyOperation: Operation &#123;</div><div class="line">    override func main() &#123;</div><div class="line">        if !self.isCancelled &#123;</div><div class="line">            sleep(2)</div><div class="line">            print(&quot;1---\(Thread.current)&quot;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">class ViewController: UIViewController &#123;</div><div class="line">    func useCustomOperation() &#123;</div><div class="line">        MyOperation().start()</div><div class="line">    &#125;</div><div class="line">    override func viewDidLoad() &#123;</div><div class="line">        super.viewDidLoad()</div><div class="line">        // Do any additional setup after loading the view, typically from a nib.</div><div class="line">        useCustomOperation()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1—<nsthread: 0x600001472880="">{number = 1, name = main}</nsthread:></p>
</blockquote>
<ul>
<li>以看出：在没有使用 NSOperationQueue、在主线程单独使用自定义继承自 NSOperation 的子类的情况下，是在主线程执行操作，并没有开启新线程。</li>
</ul>
<h2 id="4-2-创建队列"><a href="#4-2-创建队列" class="headerlink" title="4.2 创建队列"></a>4.2 创建队列</h2><p>NSOperationQueue 一共有两种队列：主队列、自定义队列。其中自定义队列同时包含了串行、并发功能。下边是主队列、自定义队列的基本创建方法和特点。</p>
<ul>
<li><p>主队列<br>  -凡是添加到主队列中的操作，都会放到主线程中执行（注：不包括操作使用addExecutionBlock:添加的额外操作，额外操作可能在其他线程执行，感谢指正）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 主队列获取方法</div><div class="line">let mainQueue = OperationQueue.main</div></pre></td></tr></table></figure>
</li>
<li><p>自定义队列（非主队列）</p>
<ul>
<li>添加到这种队列中的操作，就会自动放到子线程中执行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 自定义队列创建方法</div><div class="line">let queue = OperationQueue()</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="4-3-将操作加入到队列中"><a href="#4-3-将操作加入到队列中" class="headerlink" title="4.3 将操作加入到队列中"></a>4.3 将操作加入到队列中</h2><p>上边我们说到 NSOperation 需要配合 NSOperationQueue 来实现多线程。<br>那么我们需要将创建好的操作加入到队列中去。总共有两种方法：</p>
<ol>
<li><p><code>- (void)addOperation:(NSOperation *)op;</code></p>
<ul>
<li>需要先创建操作，再将创建好的操作加入到创建好的队列中去。</li>
</ul>
</li>
<li><p><code>- (void)addOperationWithBlock:(void (^)(void))block;</code></p>
<ul>
<li>无需先创建操作，在 block 中添加操作，直接将包含操作的 block 加入到队列中。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 使用 addOperation: 将操作加入到操作队列中</div><div class="line">*/</div><div class="line">func addOperationToQueue() &#123;</div><div class="line">    print(&quot;start&quot;)</div><div class="line">    let queue = OperationQueue()</div><div class="line">    queue.addOperation &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;0---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    let operation1 = BlockOperation.init &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    operation1.addExecutionBlock &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    queue.addOperation(operation1)</div><div class="line">    print(&quot;end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<blockquote>
<p>start<br>end<br>2—<nsthread: 0x600002e61a00="">{number = 5, name = (null)}<br>0—<nsthread: 0x600002e55fc0="">{number = 3, name = (null)}<br>1—<nsthread: 0x600002e40980="">{number = 4, name = (null)}</nsthread:></nsthread:></nsthread:></p>
</blockquote>
<ul>
<li>可以看出：使用 NSOperation 子类创建操作，并使用 addOperation: 将操作加入到操作队列后能够开启新线程，进行并发执行。</li>
<li>可以看出：使用 addOperationWithBlock: 将操作加入到操作队列后能够开启新线程，进行并发执行。</li>
</ul>
<h1 id="5-NSOperationQueue-控制串行执行、并发执行"><a href="#5-NSOperationQueue-控制串行执行、并发执行" class="headerlink" title="5. NSOperationQueue 控制串行执行、并发执行"></a>5. NSOperationQueue 控制串行执行、并发执行</h1><p> 最大并发操作数：maxConcurrentOperationCount</p>
<ul>
<li>maxConcurrentOperationCount 默认情况下为-1，表示不进行限制，可进行并发执行。</li>
<li>maxConcurrentOperationCount 为1时，队列为串行队列。只能串行执行。</li>
<li>maxConcurrentOperationCount 大于1时，队列为并发队列。操作并发执行，当然这个值不应超过系统限制，即使自己设置一个很大的值，系统也会自动调整为 min{自己设定的值，系统设定的默认最大值}。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">func setMaxConcurrentOperationCount() &#123;</div><div class="line">    print(&quot;start&quot;)</div><div class="line">    let queue = OperationQueue()</div><div class="line">    queue.maxConcurrentOperationCount = 1; // 串行队列</div><div class="line">    queue.addOperation &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;0---\(Date())\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    queue.addOperation &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;1---\(Date())\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    let operation1 = BlockOperation.init &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Date())\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    operation1.addExecutionBlock &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;3---\(Date())\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    queue.addOperation(operation1)</div><div class="line">    print(&quot;end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>start<br>end<br>0—2019-02-01 07:48:13 +0000<nsthread: 0x6000029ce500="">{number = 3, name = (null)}<br>1—2019-02-01 07:48:15 +0000<nsthread: 0x6000029ccbc0="">{number = 4, name = (null)}<br>2—2019-02-01 07:48:17 +0000<nsthread: 0x6000029ce500="">{number = 3, name = (null)}<br>3—2019-02-01 07:48:17 +0000<nsthread: 0x6000029ccbc0="">{number = 4, name = (null)}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">queue.maxConcurrentOperationCount = 2; // 串行队列</div></pre></td></tr></table></figure></nsthread:></nsthread:></nsthread:></nsthread:></p>
<p>start<br>end<br>0—2019-02-01 07:49:42 +0000<nsthread: 0x600002e76d80="">{number = 4, name = (null)}<br>1—2019-02-01 07:49:42 +0000<nsthread: 0x600002e4b980="">{number = 3, name = (null)}<br>3—2019-02-01 07:49:44 +0000<nsthread: 0x600002e4b980="">{number = 3, name = (null)}<br>2—2019-02-01 07:49:44 +0000<nsthread: 0x600002e4e980="">{number = 5, name = (null)}</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<h1 id="6-NSOperation-操作依赖"><a href="#6-NSOperation-操作依赖" class="headerlink" title="6. NSOperation 操作依赖"></a>6. NSOperation 操作依赖</h1><p>NSOperation、NSOperationQueue 最吸引人的地方是它能添加操作之间的依赖关系。通过操作依赖，我们可以很方便的控制操作之间的执行先后顺序。NSOperation 提供了3个接口供我们管理和查看依赖。</p>
<ul>
<li><code>- (void)addDependency:(NSOperation *)op;</code> 添加依赖，使当前操作依赖于操作 op 的完成。</li>
<li><code>- (void)removeDependency:(NSOperation *)op;</code> 移除依赖，取消当前操作对操作 op 的依赖。</li>
<li><code>@property (readonly, copy) NSArray&lt;NSOperation *&gt; *dependencies;</code> 在当前操作开始执行之前完成执行的所有操作对象数组。</li>
</ul>
<p>当然，我们经常用到的还是添加依赖操作。现在考虑这样的需求，比如说有 A、B 两个操作，其中 A 执行完操作，B 才能执行操作。<br>如果使用依赖来处理的话，那么就需要让操作 B 依赖于操作 A。具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">func addDependency() &#123;</div><div class="line">    let queue = OperationQueue()</div><div class="line">    let op1 = BlockOperation.init &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;1---\(Date())\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    let op2 = BlockOperation.init &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Date())\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    op2.addDependency(op1)</div><div class="line">    queue.addOperation(op1)</div><div class="line">    queue.addOperation(op2)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1—2019-02-01 07:55:38 +0000<nsthread: 0x600003967180="">{number = 3, name = (null)}<br>2—2019-02-01 07:55:40 +0000<nsthread: 0x600003969a80="">{number = 4, name = (null)}</nsthread:></nsthread:></p>
<ul>
<li>可以看到：通过添加操作依赖，无论运行几次，其结果都是 op1 先执行，op2 后执行。</li>
</ul>
</blockquote>
<h1 id="7-NSOperation-优先级"><a href="#7-NSOperation-优先级" class="headerlink" title="7. NSOperation 优先级"></a>7. NSOperation 优先级</h1><p>NSOperation 提供了<code>queuePriority</code>（优先级）属性，<code>queuePriority</code>属性适用于同一操作队列中的操作，不适用于不同操作队列中的操作。默认情况下，所有新创建的操作对象优先级都是<code>NSOperationQueuePriorityNormal</code>。但是我们可以通过<code>setQueuePriority:</code>方法来改变当前操作在同一队列中的执行优先级。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 优先级的取值</div><div class="line">typedef NS_ENUM(NSInteger, NSOperationQueuePriority) &#123;</div><div class="line">    NSOperationQueuePriorityVeryLow = -8L,</div><div class="line">    NSOperationQueuePriorityLow = -4L,</div><div class="line">    NSOperationQueuePriorityNormal = 0,</div><div class="line">    NSOperationQueuePriorityHigh = 4,</div><div class="line">    NSOperationQueuePriorityVeryHigh = 8</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>上边我们说过：对于添加到队列中的操作，首先进入准备就绪的状态（就绪状态取决于操作之间的依赖关系），然后进入就绪状态的操作的开始执行顺序（非结束执行顺序）由操作之间相对的优先级决定（优先级是操作对象自身的属性）。</p>
<p>那么，什么样的操作才是进入就绪状态的操作呢？<br>当一个操作的所有依赖都已经完成时，操作对象通常会进入准备就绪状态，等待执行。<br>举个例子，现在有4个优先级都是 NSOperationQueuePriorityNormal（默认级别）的操作：op1，op2，op3，op4。其中 op3 依赖于 op2，op2 依赖于 op1，即 op3 -&gt; op2 -&gt; op1。现在将这4个操作添加到队列中并发执行。</p>
<ul>
<li>因为 op1 和 op4 都没有需要依赖的操作，所以在 op1，op4 执行之前，就是处于准备就绪状态的操作。</li>
<li>而 op3 和 op2 都有依赖的操作（op3 依赖于 op2，op2 依赖于 op1），所以 op3 和 op2 都不是准备就绪状态下的操作。<br>理解了进入就绪状态的操作，那么我们就理解了queuePriority 属性的作用对象。</li>
<li>queuePriority 属性决定了进入准备就绪状态下的操作之间的开始执行顺序。并且，优先级不能取代依赖关系。</li>
<li>如果一个队列中既包含高优先级操作，又包含低优先级操作，并且两个操作都已经准备就绪，那么队列先执行高优先级操作。比如上例中，如果 op1 和 op4 是不同优先级的操作，那么就会先执行优先级高的操作。</li>
<li>如果，一个队列中既包含了准备就绪状态的操作，又包含了未准备就绪的操作，未准备就绪的操作优先级比准备就绪的操作优先级高。那么，虽然准备就绪的操作优先级低，也会优先执行。优先级不能取代依赖关系。如果要控制操作间的启动顺序，则必须使用依赖关系。</li>
</ul>
<h1 id="8-NSOperation、NSOperationQueue-线程间的通信"><a href="#8-NSOperation、NSOperationQueue-线程间的通信" class="headerlink" title="8. NSOperation、NSOperationQueue 线程间的通信"></a>8. NSOperation、NSOperationQueue 线程间的通信</h1><p>在 iOS 开发过程中，我们一般在主线程里边进行 UI 刷新，例如：点击、滚动、拖拽等事件。我们通常把一些耗时的操作放在其他线程，比如说图片下载、文件上传等耗时操作。而当我们有时候在其他线程完成了耗时操作时，需要回到主线程，那么就用到了线程之间的通讯。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 线程间通信</div><div class="line">*/</div><div class="line">func communication() &#123;</div><div class="line">    OperationQueue().addOperation &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;1---\(Date())\(Thread.current)&quot;)</div><div class="line">        OperationQueue.main.addOperation(&#123;</div><div class="line">            sleep(2)</div><div class="line">            print(&quot;2---\(Date())\(Thread.current)&quot;)</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>1—2019-02-01 08:55:01 +0000<nsthread: 0x600003e4f000="">{number = 3, name = (null)}<br>2—2019-02-01 08:55:03 +0000<nsthread: 0x600003e228c0="">{number = 1, name = main}</nsthread:></nsthread:></p>
</blockquote>
<ul>
<li>可以看到：通过线程间的通信，先在其他线程中执行操作，等操作执行完了之后再回到主线程执行主线程的相应操作。</li>
</ul>
<h1 id="9-NSOperation、NSOperationQueue-线程同步和线程安全"><a href="#9-NSOperation、NSOperationQueue-线程同步和线程安全" class="headerlink" title="9. NSOperation、NSOperationQueue 线程同步和线程安全"></a>9. NSOperation、NSOperationQueue 线程同步和线程安全</h1><ul>
<li>线程安全：如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。</li>
<li>若每个线程中对全局变量、静态变量只有读操作，而无写操作，一般来说，这个全局变量是线程安全的；若有多个线程同时执行写操作（更改变量），一般都需要考虑线程同步，否则的话就可能影响线程安全。</li>
<li>线程同步：可理解为线程 A 和 线程 B 一块配合，A 执行到一定程度时要依靠线程 B 的某个结果，于是停下来，示意 B 运行；B 依言执行，再将结果给 A；A 再继续操作。</li>
</ul>
<h2 id="9-2-NSOperation、NSOperationQueue-非线程安全"><a href="#9-2-NSOperation、NSOperationQueue-非线程安全" class="headerlink" title="9.2 NSOperation、NSOperationQueue 非线程安全"></a>9.2 NSOperation、NSOperationQueue 非线程安全</h2><p>线程安全解决方案：可以给线程加锁，在一个线程执行该操作的时候，不允许其他线程进行操作。iOS 实现线程加锁有很多种方式。@synchronized、 NSLock、NSRecursiveLock、NSCondition、NSConditionLock、pthread_mutex、dispatch_semaphore、OSSpinLock、atomic(property) set/ge等等各种方式。这里我们使用 NSLock 对象来解决线程同步问题。NSLock 对象可以通过进入锁时调用 lock 方法，解锁时调用 unlock 方法来保证线程安全。<br>考虑线程安全的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 线程安全：使用 NSLock 加锁</div><div class="line">* 初始化火车票数量、卖票窗口(线程安全)、并开始卖票</div><div class="line">*/</div><div class="line"></div><div class="line">- (void)initTicketStatusSave &#123;</div><div class="line">    NSLog(@&quot;currentThread---%@&quot;,[NSThread currentThread]); // 打印当前线程</div><div class="line"></div><div class="line">    self.ticketSurplusCount = 50;</div><div class="line"></div><div class="line">    self.lock = [[NSLock alloc] init];  // 初始化 NSLock 对象</div><div class="line"></div><div class="line">    // 1.创建 queue1,queue1 代表北京火车票售卖窗口</div><div class="line">    NSOperationQueue *queue1 = [[NSOperationQueue alloc] init];</div><div class="line">    queue1.maxConcurrentOperationCount = 1;</div><div class="line"></div><div class="line">    // 2.创建 queue2,queue2 代表上海火车票售卖窗口</div><div class="line">    NSOperationQueue *queue2 = [[NSOperationQueue alloc] init];</div><div class="line">    queue2.maxConcurrentOperationCount = 1;</div><div class="line"></div><div class="line">    // 3.创建卖票操作 op1</div><div class="line">    NSBlockOperation *op1 = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">        [self saleTicketSafe];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    // 4.创建卖票操作 op2</div><div class="line">    NSBlockOperation *op2 = [NSBlockOperation blockOperationWithBlock:^&#123;</div><div class="line">        [self saleTicketSafe];</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    // 5.添加操作，开始卖票</div><div class="line">    [queue1 addOperation:op1];</div><div class="line">    [queue2 addOperation:op2];</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line">* 售卖火车票(线程安全)</div><div class="line">*/</div><div class="line">- (void)saleTicketSafe &#123;</div><div class="line">    while (1) &#123;</div><div class="line"></div><div class="line">        // 加锁</div><div class="line">        [self.lock lock];</div><div class="line"></div><div class="line">        if (self.ticketSurplusCount &gt; 0) &#123;</div><div class="line">            //如果还有票，继续售卖</div><div class="line">            self.ticketSurplusCount--;</div><div class="line">            NSLog(@&quot;%@&quot;, [NSString stringWithFormat:@&quot;剩余票数:%d 窗口:%@&quot;, self.ticketSurplusCount, [NSThread currentThread]]);</div><div class="line">            [NSThread sleepForTimeInterval:0.2];</div><div class="line">        &#125;</div><div class="line">            // 解锁</div><div class="line">        [self.lock unlock];</div><div class="line"></div><div class="line">        if (self.ticketSurplusCount &lt;= 0) &#123;</div><div class="line">            NSLog(@&quot;所有火车票均已售完&quot;);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ul>
<li>在考虑了线程安全，使用 NSLock 加锁、解锁机制的情况下，得到的票数是正确的，没有出现混乱的情况。我们也就解决了多个线程同步的问题。</li>
</ul>
<h1 id="10-NSOperation、NSOperationQueue-常用属性和方法归纳"><a href="#10-NSOperation、NSOperationQueue-常用属性和方法归纳" class="headerlink" title="10. NSOperation、NSOperationQueue 常用属性和方法归纳"></a>10. NSOperation、NSOperationQueue 常用属性和方法归纳</h1><h2 id="10-1-NSOperation-常用属性和方法"><a href="#10-1-NSOperation-常用属性和方法" class="headerlink" title="10.1 NSOperation 常用属性和方法"></a>10.1 NSOperation 常用属性和方法</h2><ol>
<li>取消操作方法<ul>
<li>-(void)cancel; 可取消操作，实质是标记 isCancelled 状态。</li>
</ul>
</li>
<li>判断操作状态方法<ul>
<li>-(BOOL)isFinished; 判断操作是否已经结束。</li>
<li>-(BOOL)isCancelled; 判断操作是否已经标记为取消。</li>
<li>-(BOOL)isExecuting; 判断操作是否正在在运行。</li>
<li>-(BOOL)isReady; 判断操作是否处于准备就绪状态，这个值和操作的依赖关系相关。</li>
</ul>
</li>
<li>操作同步<ul>
<li>-(void)waitUntilFinished; 阻塞当前线程，直到该操作结束。可用于线程执行顺序的同步。</li>
<li>-(void)setCompletionBlock:(void (^)(void))block; completionBlock 会在当前操作执行完毕时执行 completionBlock。</li>
<li>-(void)addDependency:(NSOperation *)op; 添加依赖，使当前操作依赖于操作 op 的完成。</li>
<li>-(void)removeDependency:(NSOperation *)op; 移除依赖，取消当前操作对操作 op 的依赖。</li>
<li>@property (readonly, copy) NSArray<nsoperation *=""> *dependencies; 在当前操作开始执行之前完成执行的所有操作对象数组。<h2 id="10-2-NSOperationQueue-常用属性和方法"><a href="#10-2-NSOperationQueue-常用属性和方法" class="headerlink" title="10.2 NSOperationQueue 常用属性和方法"></a>10.2 NSOperationQueue 常用属性和方法</h2></nsoperation></li>
</ul>
</li>
<li>取消/暂停/恢复操作<ul>
<li>-(void)cancelAllOperations; 可以取消队列的所有操作。</li>
<li>-(BOOL)isSuspended; 判断队列是否处于暂停状态。 YES 为暂停状态，NO 为恢复状态。</li>
<li>-(void)setSuspended:(BOOL)b; 可设置操作的暂停和恢复，YES 代表暂停队</li>
</ul>
</li>
<li>操作同步<ul>
<li>-(void)waitUntilAllOperationsAreFinished; 阻塞当前线程，直到队列中的操作全部执行完毕。</li>
</ul>
</li>
<li>添加/获取操作`<ul>
<li>-(void)addOperationWithBlock:(void (^)(void))block; 向队列中添加一个 NSBlockOperation 类型操作对象。</li>
<li>-(void)addOperations:(NSArray *)ops waitUntilFinished:(BOOL)wait; 向队列中添加操作数组，wait 标志是否阻塞当前线程直到所有操作结束</li>
<li>-(NSArray *)operations; 当前在队列中的操作数组（某个操作执行结束后会自动从这个数组清除）。</li>
<li>-(NSUInteger)operationCount; 当前队列中的操作数。</li>
</ul>
</li>
<li>获取队列<ul>
<li>+(id)currentQueue; 获取当前队列，如果当前线程不是在 NSOperationQueue 上运行则返回 nil。</li>
<li>+(id)mainQueue; 获取主队列。<blockquote>
<p>注意：    </p>
</blockquote>
</li>
</ul>
<ol>
<li>这里的暂停和取消（包括操作的取消和队列的取消）并不代表可以将当前的操作立即取消，而是当当前的操作执行完毕之后不再执行新的操作。</li>
<li>暂停和取消的区别就在于：暂停操作之后还可以恢复操作，继续向下执行；而取消操作之后，所有的操作就清空了，无法再接着执行剩下的操作。</li>
</ol>
</li>
</ol>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/p/4b1d77054b35" target="_blank" rel="external">iOS 多线程：『NSOperation、NSOperationQueue』详尽总结</a></p>
]]></content>
      
        <categories>
            
            <category> 回顾温习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[GCD回顾温习总结(Swift)]]></title>
      <url>/2019/1/30/GCD%E5%9B%9E%E9%A1%BE%E6%B8%A9%E4%B9%A0%E6%80%BB%E7%BB%93(Swift)/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="1-GCD-简介"><a href="#1-GCD-简介" class="headerlink" title="1. GCD 简介"></a>1. GCD 简介</h1><p>什么是 GCD 呢?</p>
<blockquote>
<p>Grand Central Dispatch(GCD) 是 Apple 开发的一个多核编程的较新的解决方法。它主要用于优化应用程序以支持多核处理器以及其他对称多处理系统。它是一个在线程池模式的基础上执行的并发任务。在 Mac OS X 10.6 雪豹中首次推出，也可在 iOS 4 及以上版本使用。</p>
</blockquote>
<p>为什么要用 GCD 呢？</p>
<ul>
<li>GCD 可用于多核的并行运算</li>
<li>GCD 会自动利用更多的 CPU 内核（比如双核、四核）</li>
<li>GCD 会自动管理线程的生命周期（创建线程、调度任务、销毁线程）</li>
<li>程序员只需要告诉 GCD 想要执行什么任务，不需要编写任何线程管理代码</li>
</ul>
<h1 id="2-GCD-任务和队列"><a href="#2-GCD-任务和队列" class="headerlink" title="2. GCD 任务和队列"></a>2. GCD 任务和队列</h1><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><p>就是执行操作的意思，换句话说就是你在线程中执行的那段代码。在 GCD 中是放在 block 中的。执行任务有两种方式：同步执行（sync）和异步执行（async）。两者的主要区别是：是否等待队列的任务执行结束，以及是否具备开启新线程的能力。</p>
<ul>
<li>同步执行（sync）：<ul>
<li>同步添加任务到指定的队列中，在添加的任务执行结束之前，会一直等待，直到队列里面的任务完成之后再继续执行。</li>
<li>只能在当前线程中执行任务，不具备开启新线程的能力。</li>
</ul>
</li>
<li>异步执行（async）：<ul>
<li>异步添加任务到指定的队列中，它不会做任何等待，可以继续执行任务。</li>
<li>可以在新的线程中执行任务，具备开启新线程的能力。<blockquote>
<p>注意：异步执行（async）虽然具有开启新线程的能力，但是并不一定开启新线程。这跟任务所指定的队列类型有关。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<h3 id="队列（Dispatch-Queue）"><a href="#队列（Dispatch-Queue）" class="headerlink" title="队列（Dispatch Queue）"></a>队列（Dispatch Queue）</h3><p>这里的队列指执行任务的等待队列，即用来存放任务的队列。队列是一种特殊的线性表，采用 FIFO（先进先出）的原则，即新任务总是被插入到队列的末尾，而读取任务的时候总是从队列的头部开始读取。每读取一个任务，则从队列中释放一个任务。</p>
<p>在 GCD 中有两种队列：串行队列和并发队列。两者都符合 FIFO（先进先出）的原则。两者的主要区别是：执行顺序不同，以及开启线程数不同。</p>
<ul>
<li>串行队列（Serial Dispatch Queue）：<ul>
<li>每次只有一个任务被执行。让任务一个接着一个地执行。（只开启一个线程，一个任务执行完毕后，再执行下一个任务）<br><img src="https://upload-images.jianshu.io/upload_images/1877784-4faca27116209f35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="串行队列"> </li>
</ul>
</li>
<li>并发队列（Concurrent Dispatch Queue）：<ul>
<li>可以让多个任务并发（同时）执行。（可以开启多个线程，并且同时执行任务）<br><img src="https://upload-images.jianshu.io/upload_images/1877784-97f3931d1b187b11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="并发队列"> <blockquote>
<p>注意：并发队列的并发功能只有在异步（dispatch_async）函数下才有效</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<h1 id="3-GCD-的使用步骤"><a href="#3-GCD-的使用步骤" class="headerlink" title="3. GCD 的使用步骤"></a>3. GCD 的使用步骤</h1><ol>
<li>创建一个队列（串行队列或并发队列）</li>
<li>将任务追加到任务的等待队列中，然后系统就会根据任务类型执行任务（同步执行或异步执行）<h2 id="3-1-队列的创建方法-获取方法"><a href="#3-1-队列的创建方法-获取方法" class="headerlink" title="3.1 队列的创建方法/获取方法"></a>3.1 队列的创建方法/获取方法</h2></li>
</ol>
<ul>
<li><p>可以使用<code>dispatch_queue_create</code>来创建队列，需要传入两个参数，第一个参数表示队列的唯一标识符，用于 DEBUG，可为空，Dispatch Queue 的名称推荐使用应用程序 ID 这种逆序全程域名；第二个参数用来识别是串行队列还是并发队列。<code>DISPATCH_QUEUE_SERIAL</code> 表示串行队列，<code>DISPATCH_QUEUE_CONCURRENT</code> 表示并发队列。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// objective-c写法</div><div class="line">// 串行队列的创建方法</div><div class="line">dispatch_queue_t queue = dispatch_queue_create(&quot;net.bujige.testQueue&quot;, DISPATCH_QUEUE_SERIAL);</div><div class="line">// 并发队列的创建方法</div><div class="line">let queue = DispatchQueue(label: &quot;com.David.testQueue&quot;)</div><div class="line"></div><div class="line">// swift写法</div><div class="line">// 串行队列的创建方法</div><div class="line">let queue = DispatchQueue(label:&quot;com.David.testQueue&quot;)</div><div class="line">// 并发队列的创建方法</div><div class="line">let queue = DispatchQueue(label:&quot;com.David.testQueue&quot;, qos:.utility, attributes:.concurrent)</div></pre></td></tr></table></figure>
</li>
<li><p>对于串行队列，GCD 提供了的一种特殊的串行队列：主队列（Main Dispatch Queue）。</p>
<ul>
<li>所有放在主队列中的任务，都会放到主线程中执行。</li>
<li>可使用dispatch_get_main_queue()获得主队列。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 主队列的获取方法</div><div class="line">// objective-c写法</div><div class="line">dispatch_queue_t queue = dispatch_get_main_queue();</div><div class="line">// swift写法</div><div class="line">let mainQueue = DispatchQueue.main</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>对于并发队列，GCD 默认提供了全局并发队列（Global Dispatch Queue）。</p>
<ul>
<li>可以使用<code>dispatch_get_global_queue</code>来获取。需要传入两个参数。第一个参数表示队列优先级，一般用<code>DISPATCH_QUEUE_PRIORITY_DEFAULT</code>。第二个参数暂时没用，用0即可。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 全局并发队列的获取方法</div><div class="line">// objective-c写法</div><div class="line">dispatch_queue_t queue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);</div><div class="line">// swift写法</div><div class="line">let globalQueue = DispatchQueue.global()</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="3-2-任务的创建方法"><a href="#3-2-任务的创建方法" class="headerlink" title="3.2 任务的创建方法"></a>3.2 任务的创建方法</h2><p>GCD 提供了同步执行任务的创建方法<code>dispatch_sync</code>和异步执行任务创建方法<code>dispatch_async</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 同步执行任务创建方法</div><div class="line">dispatch_sync(queue, ^&#123;</div><div class="line">// 这里放同步执行任务代码</div><div class="line">&#125;);</div><div class="line">// 异步执行任务创建方法</div><div class="line">dispatch_async(queue, ^&#123;</div><div class="line">// 这里放异步执行任务代码</div><div class="line">&#125;);</div><div class="line"></div><div class="line">//swift写法</div><div class="line">queue.sync &#123;</div><div class="line">// 这里放同步执行任务代码</div><div class="line">&#125;</div><div class="line">queue.async &#123;</div><div class="line">// 这里放异步执行任务代码</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>虽然使用 GCD 只需两步，但是既然我们有两种队列（串行队列/并发队列），两种任务执行方式（同步执行/异步执行），那么我们就有了四种不同的组合方式。这四种不同的组合方式是：</p>
<blockquote>
<ol>
<li>同步执行 + 并发队列</li>
<li>异步执行 + 并发队列</li>
<li>同步执行 + 串行队列</li>
<li>异步执行 + 串行队列</li>
</ol>
</blockquote>
<p>实际上，刚才还说了两种特殊队列：全局并发队列、主队列。全局并发队列可以作为普通并发队列来使用。但是主队列因为有点特殊，所以我们就又多了两种组合方式。这样就有六种不同的组合方式了。</p>
<blockquote>
<ol>
<li>同步执行 + 主队列</li>
<li>异步执行 + 主队列</li>
</ol>
</blockquote>
<table>
<thead>
<tr>
<th>区别</th>
<th>并发队列</th>
<th>串行队列</th>
<th>主队列</th>
</tr>
</thead>
<tbody>
<tr>
<td>同步(sync)</td>
<td>没有开启新线程，串行执行任务</td>
<td>没有开启新线程，串行执行任务</td>
<td>主线程调用：死锁卡住不执行</td>
</tr>
<tr>
<td>异步(async)</td>
<td>有开启新线程，并发执行任务</td>
<td>有开启新线程(1条)，串行执行任务</td>
<td>没有开启新线程，串行执行任务</td>
</tr>
</tbody>
</table>
<h1 id="4-GCD-的基本使用"><a href="#4-GCD-的基本使用" class="headerlink" title="4. GCD 的基本使用"></a>4. GCD 的基本使用</h1><h2 id="4-1-同步执行-并发队列"><a href="#4-1-同步执行-并发队列" class="headerlink" title="4.1 同步执行 + 并发队列"></a>4.1 同步执行 + 并发队列</h2><ul>
<li>在当前线程中执行任务，不会开启新线程，执行完一个任务，再执行下一个任务<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 同步执行 + 并发队列</div><div class="line">* 特点：在当前线程中执行任务，不会开启新线程，执行完一个任务，再执行下一个任务。</div><div class="line">*/</div><div class="line">func syncConcurrent() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;syncConcurrent---begin&quot;)</div><div class="line">    let queue = DispatchQueue(label:&quot;com.David.testQueue&quot;, qos:.utility, attributes:.concurrent)</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(3)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle1&quot;)</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle2&quot;)</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;syncConcurrent---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x600001996880="">{number = 1, name = main}<br>syncConcurrent—begin<br>1—<nsthread: 0x600001996880="">{number = 1, name = main}<br>middle1<br>2—<nsthread: 0x600001996880="">{number = 1, name = main}<br>middle2<br>3—<nsthread: 0x600001996880="">{number = 1, name = main}<br>syncConcurrent—end</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>从同步执行 + 并发队列中可看到：</p>
<ul>
<li>所有任务都是在当前线程（主线程）中执行的，没有开启新的线程（同步执行不具备开启新线程的能力）。</li>
<li>所有任务都在打印的syncConcurrent—begin和syncConcurrent—end之间执行的（同步任务需要等待队列的任务执行结束）。</li>
<li>任务按顺序执行的。按顺序执行的原因：虽然并发队列可以开启多个线程，并且同时执行多个任务。但是因为本身不能创建新线程，只有当前线程这一个线程（同步任务不具备开启新线程的能力），所以也就不存在并发。而且当前线程只有等待当前队列中正在执行的任务执行完毕之后，才能继续接着执行下面的操作（同步任务需要等待队列的任务执行结束）。所以任务只能一个接一个按顺序执行，不能同时被执行。</li>
</ul>
<h2 id="4-2-异步执行-并发队列"><a href="#4-2-异步执行-并发队列" class="headerlink" title="4.2 异步执行 + 并发队列"></a>4.2 异步执行 + 并发队列</h2><ul>
<li>可以开启多个线程，任务交替（同时）执行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 异步执行 + 并发队列</div><div class="line">* 特点：可以开启多个线程，任务交替（同时）执行。</div><div class="line">*/</div><div class="line">func asyncConcurrent() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;asyncConcurrent---begin&quot;)</div><div class="line">    let queue = DispatchQueue(label:&quot;com.david.testQueue&quot;, qos:.utility, attributes:.concurrent)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(3)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle1&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle2&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;asyncConcurrent---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x600002379240="">{number = 1, name = main}<br>asyncConcurrent—begin<br>middle1<br>middle2<br>asyncConcurrent—end<br>3—<nsthread: 0x600002315880="">{number = 3, name = (null)}<br>2—<nsthread: 0x6000023299c0="">{number = 4, name = (null)}<br>1—<nsthread: 0x600002338a40="">{number = 5, name = (null)}</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>在异步执行 + 并发队列中可以看出：</p>
<ul>
<li>除了当前线程（主线程），系统又开启了3个线程，并且任务是交替/同时执行的。（异步执行具备开启新线程的能力。且并发队列可开启多个线程，同时执行多个任务）。</li>
<li>所有任务是在打印的syncConcurrent—begin和syncConcurrent—end之后才执行的。说明当前线程没有等待，而是直接开启了新线程，在新线程中执行任务（异步执行不做等待，可以继续执行任务）。</li>
</ul>
<h2 id="4-3-同步执行-串行队列"><a href="#4-3-同步执行-串行队列" class="headerlink" title="4.3 同步执行 + 串行队列"></a>4.3 同步执行 + 串行队列</h2><ul>
<li>不会开启新线程，在当前线程执行任务。任务是串行的，执行完一个任务，再执行下一个任务。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 同步执行 + 串行队列</div><div class="line">* 特点：不会开启新线程，在当前线程执行任务。任务是串行的，执行完一个任务，再执行下一个任务。</div><div class="line">*/</div><div class="line">func syncSerial() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;syncSerial---begin&quot;)</div><div class="line">    let queue = DispatchQueue(label:&quot;com.David.testQueue&quot;)</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(3)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle1&quot;)</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle2&quot;)</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    sleep(1)</div><div class="line">    print(&quot;syncConcurrent---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x6000007e1900="">{number = 1, name = main}<br>syncConcurrent—begin<br>1—<nsthread: 0x6000007e1900="">{number = 1, name = main}<br>middle1<br>2—<nsthread: 0x6000007e1900="">{number = 1, name = main}<br>middle2<br>3—<nsthread: 0x6000007e1900="">{number = 1, name = main}<br>syncConcurrent—end</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>在同步执行 + 串行队列可以看到：</p>
<ul>
<li>所有任务都是在当前线程（主线程）中执行的，并没有开启新的线程（同步执行不具备开启新线程的能力）。</li>
<li>所有任务都在打印的syncConcurrent—begin和syncConcurrent—end之间执行（同步任务需要等待队列的任务执行结束）。<br>任务是按顺序执行的（串行队列每次只有一个任务被执行，任务一个接一个按顺序执行）。</li>
</ul>
<h2 id="4-4-异步执行-串行队列"><a href="#4-4-异步执行-串行队列" class="headerlink" title="4.4 异步执行 + 串行队列"></a>4.4 异步执行 + 串行队列</h2><ul>
<li>会开启新线程，但是因为任务是串行的，执行完一个任务，再执行下一个任务<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 异步执行 + 串行队列</div><div class="line">* 特点：会开启新线程，但是因为任务是串行的，执行完一个任务，再执行下一个任务。</div><div class="line">*/</div><div class="line">func asyncSerial() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;asyncSerial---begin&quot;)</div><div class="line">    let queue = DispatchQueue(label:&quot;com.David.testQueue&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(3)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle1&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle2&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    sleep(1)</div><div class="line">    print(&quot;asyncSerial---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x600001ead9c0="">{number = 1, name = main}<br>asyncSerial—begin<br>middle1<br>middle2<br>asyncSerial—end<br>1—<nsthread: 0x600001ecc000="">{number = 3, name = (null)}<br>2—<nsthread: 0x600001ecc000="">{number = 3, name = (null)}<br>3—<nsthread: 0x600001ecc000="">{number = 3, name = (null)}</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>在异步执行 + 串行队列可以看到：</p>
<ul>
<li>开启了一条新线程（异步执行具备开启新线程的能力，串行队列只开启一个线程）。</li>
<li>所有任务是在打印的syncConcurrent—begin和syncConcurrent—end之后才开始执行的（异步执行不会做任何等待，可以继续执行任务）。<br>任务是按顺序执行的（串行队列每次只有一个任务被执行，任务一个接一个按顺序执行）。</li>
</ul>
<h2 id="4-5-同步执行-主队列"><a href="#4-5-同步执行-主队列" class="headerlink" title="4.5 同步执行 + 主队列"></a>4.5 同步执行 + 主队列</h2><p><code>同步执行 + 主队列</code>在不同线程中调用结果也是不一样，在主线程中调用会出现死锁，而在其他线程中则不会。</p>
<h3 id="4-5-1-在主线程中调用-同步执行-主队列"><a href="#4-5-1-在主线程中调用-同步执行-主队列" class="headerlink" title="4.5.1 在主线程中调用 同步执行 + 主队列"></a>4.5.1 在主线程中调用 <code>同步执行 + 主队列</code></h3><ul>
<li>互相等待卡住不可行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 同步执行 + 主队列</div><div class="line">* 特点(主线程调用)：互等卡主不执行。</div><div class="line">* 特点(其他线程调用)：不会开启新线程，执行完一个任务，再执行下一个任务。</div><div class="line">*/</div><div class="line">func syncMain() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;syncMain---begin&quot;)</div><div class="line">    let queue = DispatchQueue.main</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(3)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle1&quot;)</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle2&quot;)</div><div class="line">    queue.sync &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;syncMain---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x600003f1e780="">{number = 1, name = main}<br>syncMain—begin</nsthread:></p>
</blockquote>
<p><img src="https://upload-images.jianshu.io/upload_images/454522-7c87be73855fe537.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="syncMain Error"></p>
<p>在同步执行 + 主队列可以惊奇的发现：</p>
<ul>
<li>在主线程中使用同步执行 + 主队列，追加到主线程的任务1、任务2、任务3都不再执行了，而且syncMain—end也没有打印，在XCode 9上还会报崩溃。这是为什么呢？</li>
</ul>
<p>这是因为我们在主线程中执行syncMain方法，相当于把syncMain任务放到了主线程的队列中。而同步执行会等待当前队列中的任务执行完毕，才会接着执行。那么当我们把任务1追加到主队列中，任务1就在等待主线程处理完syncMain任务。而syncMain任务需要等待任务1执行完毕，才能接着执行。<br>那么，现在的情况就是syncMain任务和任务1都在等对方执行完毕。这样大家互相等待，所以就卡住了，所以我们的任务执行不了，而且syncMain—end也没有打印。</p>
<h2 id="4-6-异步执行-主队列"><a href="#4-6-异步执行-主队列" class="headerlink" title="4.6 异步执行 + 主队列"></a>4.6 异步执行 + 主队列</h2><ul>
<li>只在主线程中执行任务，执行完一个任务，再执行下一个任务。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 异步执行 + 主队列</div><div class="line">* 特点：只在主线程中执行任务，执行完一个任务，再执行下一个任务</div><div class="line">*/</div><div class="line">func asyncMain() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;asyncMain---begin&quot;)</div><div class="line">    let queue = DispatchQueue.main</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(3)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle1&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle2&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;asyncMain---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x6000038de800="">{number = 1, name = main}<br>asyncMain—begin<br>middle1<br>middle2<br>asyncMain—end<br>1—<nsthread: 0x6000038de800="">{number = 1, name = main}<br>2—<nsthread: 0x6000038de800="">{number = 1, name = main}<br>3—<nsthread: 0x6000038de800="">{number = 1, name = main}</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>在异步执行 + 主队列可以看到：</p>
<ul>
<li>所有任务都是在当前线程（主线程）中执行的，并没有开启新的线程（虽然异步执行具备开启线程的能力，但因为是主队列，所以所有任务都在主线程中）。</li>
<li>所有任务是在打印的syncConcurrent—begin和syncConcurrent—end之后才开始执行的（异步执行不会做任何等待，可以继续执行任务）。</li>
<li>任务是按顺序执行的（因为主队列是串行队列，每次只有一个任务被执行，任务一个接一个按顺序执行）。</li>
</ul>
<h2 id="4-8-同步执行-全局队列"><a href="#4-8-同步执行-全局队列" class="headerlink" title="4.8 同步执行 + 全局队列"></a>4.8 同步执行 + 全局队列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 同步执行 + 全局（并发）队列</div><div class="line">* 特点：在当前线程中执行任务，不会开启新线程，执行完一个任务，再执行下一个任务。</div><div class="line">*/</div><div class="line">func asyncGlobal() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;asyncMain---begin&quot;)</div><div class="line">    let queue = DispatchQueue.global()</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(3)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle1&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle2&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;asyncGlobal---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>currentThread—<nsthread: 0x600002c868c0="">{number = 1, name = main}<br>syncGlobal—begin<br>1—<nsthread: 0x600002c868c0="">{number = 1, name = main}<br>middle1<br>2—<nsthread: 0x600002c868c0="">{number = 1, name = main}<br>middle2<br>3—<nsthread: 0x600002c868c0="">{number = 1, name = main}<br>syncMain—end</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<h2 id="4-7-异步执行-全局队列"><a href="#4-7-异步执行-全局队列" class="headerlink" title="4.7 异步执行 + 全局队列"></a>4.7 异步执行 + 全局队列</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">func asyncGlobal() &#123;</div><div class="line">/**</div><div class="line">* 异步执行 + 全局（并发）队列</div><div class="line">* 特点：可以开启多个线程，任务交替（同时）执行。</div><div class="line">*/</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;asyncMain---begin&quot;)</div><div class="line">    let queue = DispatchQueue.global()</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(3)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle1&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;middle2&quot;)</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;asyncGlobal---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>currentThread—<nsthread: 0x600001c3e880="">{number = 1, name = main}<br>asyncMain—begin<br>middle1<br>middle2<br>asyncGlobal—end<br>3—<nsthread: 0x600001c5c040="">{number = 3, name = (null)}<br>2—<nsthread: 0x600001c61ec0="">{number = 4, name = (null)}<br>1—<nsthread: 0x600001c76080="">{number = 5, name = (null)}</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<h1 id="5-GCD-线程间的通信"><a href="#5-GCD-线程间的通信" class="headerlink" title="5. GCD 线程间的通信"></a>5. GCD 线程间的通信</h1><p>在iOS开发过程中，我们一般在主线程里边进行UI刷新，例如：点击、滚动、拖拽等事件。我们通常把一些耗时的操作放在其他线程，比如说图片下载、文件上传等耗时操作。而当我们有时候在其他线程完成了耗时操作时，需要回到主线程，那么就用到了线程之间的通讯。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">func communication() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;communication---begin&quot;)</div><div class="line">    DispatchQueue.global().async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">        DispatchQueue.main.async &#123;</div><div class="line">            sleep(2)</div><div class="line">            print(&quot;2---\(Thread.current)&quot;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    print(&quot;communication---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>currentThread—<nsthread: 0x60000035fbc0="">{number = 1, name = main}<br>communication—begin<br>communication—end<br>1—<nsthread: 0x60000033a5c0="">{number = 3, name = (null)}<br>2—<nsthread: 0x60000035fbc0="">{number = 1, name = main}</nsthread:></nsthread:></nsthread:></p>
</blockquote>
<ul>
<li>可以看到在其他线程中先执行任务，执行完了之后回到主线程执行主线程的相应操作。</li>
</ul>
<h1 id="6-GCD-的其他方法"><a href="#6-GCD-的其他方法" class="headerlink" title="6. GCD 的其他方法"></a>6. GCD 的其他方法</h1><h2 id="6-1-GCD-栅栏方法：dispatch-barrier-async"><a href="#6-1-GCD-栅栏方法：dispatch-barrier-async" class="headerlink" title="6.1 GCD 栅栏方法：dispatch_barrier_async"></a>6.1 GCD 栅栏方法：dispatch_barrier_async</h2><ul>
<li>我们有时需要异步执行两组操作，而且第一组操作执行完之后，才能开始执行第二组操作。这样我们就需要一个相当于<code>栅栏</code>一样的一个方法将两组异步执行的操作组给分割起来，当然这里的操作组里可以包含一个或多个任务。这就需要用到<code>dispatch_barrier_async</code>方法在两个操作组间形成栅栏。<br><code>dispatch_barrier_async</code>函数会等待前边追加到并发队列中的任务全部执行完毕之后，再将指定的任务追加到该异步队列中。然后在<code>dispatch_barrier_async</code>函数追加的任务执行完毕之后，异步队列才恢复为一般动作，接着追加任务到该异步队列并开始执行。具体如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/1877784-4d6d77fafd3ad007.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1000" alt="dispatch_barrier_async"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">func barrier() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;communication---begin&quot;)</div><div class="line">    let queue = DispatchQueue(label:&quot;com.David.testQueue&quot;, qos:.default, attributes:.concurrent)</div><div class="line">    //        let queue = DispatchQueue.global()</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    queue.async(group: nil, qos: .default, flags: .barrier) &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;barrier---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;communication---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x6000016d68c0="">{number = 1, name = main}<br>communication—beginc<br>communication—end<br>1—<nsthread: 0x6000016b5940="">{number = 3, name = (null)}<br>barrier—<nsthread: 0x6000016b4b40="">{number = 4, name = (null)}<br>3—<nsthread: 0x6000016b5940="">{number = 3, name = (null)}<br>2—<nsthread: 0x6000016b4b40="">{number = 4, name = (null)}</nsthread:></nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>如果queue替换成下面global，实际是错的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">let queue = DispatchQueue.global()</div></pre></td></tr></table></figure></p>
<blockquote>
<p>currentThread—<nsthread: 0x60000225ad00="">{number = 1, name = main}<br>communication—begin<br>communication—end<br>1—<nsthread: 0x600002235a00="">{number = 5, name = (null)}<br>2—<nsthread: 0x60000223a440="">{number = 4, name = (null)}<br>3—<nsthread: 0x600002230980="">{number = 3, name = (null)}<br>barrier—<nsthread: 0x60000223a680="">{number = 6, name = (null)}</nsthread:></nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<h2 id="6-2-GCD-延时执行方法：dispatch-after"><a href="#6-2-GCD-延时执行方法：dispatch-after" class="headerlink" title="6.2 GCD 延时执行方法：dispatch_after"></a>6.2 GCD 延时执行方法：dispatch_after</h2><p>我们经常会遇到这样的需求：在指定时间（例如3秒）之后执行某个任务。可以用 GCD 的<code>dispatch_after</code>函数来实现。<br>需要注意的是：<code>dispatch_after</code>函数并不是在指定时间之后才开始执行处理，而是在指定时间之后将任务追加到主队列中。严格来说，这个时间并不是绝对准确的，但想要大致延迟执行任务，<code>dispatch_after</code>函数是很有效的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 延时执行方法 dispatch_after</div><div class="line">*/</div><div class="line">func after() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;after---begin&quot;)</div><div class="line">    DispatchQueue.main.asyncAfter(deadline: DispatchTime.now()+2) &#123;</div><div class="line">        print(&quot;after---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;after---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>currentThread—<nsthread: 0x6000027d99c0="">{number = 1, name = main}<br>after—begin<br>after—end<br>after—<nsthread: 0x6000027d99c0="">{number = 1, name = main}</nsthread:></nsthread:></p>
</blockquote>
<h2 id="6-3-GCD-一次性代码（只执行一次）：dispatch-once"><a href="#6-3-GCD-一次性代码（只执行一次）：dispatch-once" class="headerlink" title="6.3 GCD 一次性代码（只执行一次）：dispatch_once"></a>6.3 GCD 一次性代码（只执行一次）：dispatch_once</h2><ul>
<li>我们在创建单例、或者有整个程序运行过程中只执行一次的代码时，我们就用到了 GCD 的 <code>dispatch_once</code> 函数。使用<br><code>dispatch_once</code> 函数能保证某段代码在程序运行过程中只被执行1次，并且即使在多线程的环境下，<code>dispatch_once</code>也可以保证线程安全。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 一次性代码（只执行一次）dispatch_once</div><div class="line">*/</div><div class="line">- (void)once &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        // 只执行1次的代码(这里面默认是线程安全的)</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="6-4-GCD-快速迭代方法：dispatch-apply"><a href="#6-4-GCD-快速迭代方法：dispatch-apply" class="headerlink" title="6.4 GCD 快速迭代方法：dispatch_apply"></a>6.4 GCD 快速迭代方法：dispatch_apply</h2><ul>
<li>通常我们会用 for 循环遍历，但是 GCD 给我们提供了快速迭代的函数<code>dispatch_apply</code>。<code>dispatch_apply</code>按照指定的次数将指定的任务追加到指定的队列中，并等待全部队列执行结束。</li>
</ul>
<p>如果是在串行队列中使用 <code>dispatch_apply</code>，那么就和 for 循环一样，按顺序同步执行。可这样就体现不出快速迭代的意义了。<br>我们可以利用并发队列进行异步执行。比如说遍历 0~5 这6个数字，for 循环的做法是每次取出一个元素，逐个遍历。<code>dispatch_apply</code> 可以 在多个线程中同时（异步）遍历多个数字。<br>还有一点，无论是在串行队列，还是异步队列中，dispatch_apply 都会等待全部任务执行完毕，这点就像是同步操作，也像是队列组中的 <code>dispatch_group_wait</code>方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">func apply() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;apply---begin&quot;)</div><div class="line">    DispatchQueue.concurrentPerform(iterations: 3) &#123; (index) in</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;apply\(index)---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;apply---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>currentThread—<nsthread: 0x6000021819c0="">{number = 1, name = main}<br>apply—begin<br>apply1—<nsthread: 0x6000021e6700="">{number = 4, name = (null)}<br>apply0—<nsthread: 0x6000021819c0="">{number = 1, name = main}<br>apply2—<nsthread: 0x6000021dd5c0="">{number = 3, name = (null)}<br>apply—end</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>因为是在并发队列中异步执行任务，所以各个任务的执行时间长短不定，最后结束顺序也不定。但是<code>apply---end</code>一定在最后执行。这是因为<code>dispatch_apply</code>函数会等待全部任务执行完毕。</p>
<h2 id="GCD-队列组：dispatch-group"><a href="#GCD-队列组：dispatch-group" class="headerlink" title="GCD 队列组：dispatch_group"></a>GCD 队列组：dispatch_group</h2><p>有时候我们会有这样的需求：分别异步执行2个耗时任务，然后当2个耗时任务都执行完毕后再回到主线程执行任务。这时候我们可以用到 GCD 的队列组。</p>
<ul>
<li>调用队列组的 <code>dispatch_group_async</code> 先把任务放到队列中，然后将队列放入队列组中。或者使用队列组的 <code>dispatch_group_enter</code>、<code>dispatch_group_leave</code> 组合 来实现 <code>dispatch_group_async</code>。</li>
<li>调用队列组的 <code>dispatch_group_notify</code> 回到指定线程执行任务。或者使用 <code>dispatch_group_wait</code> 回到当前线程继续向下执行（会阻塞当前线程）。<h3 id="dispatch-group-notify"><a href="#dispatch-group-notify" class="headerlink" title="dispatch_group_notify"></a>dispatch_group_notify</h3></li>
<li>监听 group 中任务的完成状态，当所有的任务都执行完成后，追加任务到 group 中，并执行任务。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 队列组 dispatch_group_notify</div><div class="line">*/</div><div class="line">func groupNotify() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;groupNotify---begin&quot;)</div><div class="line">    let queue = DispatchQueue.global()</div><div class="line">    let group = DispatchGroup()</div><div class="line">    queue.async(group: group) &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    queue.async(group: group) &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    group.notify(queue: queue) &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;groupNotify---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x600002caa8c0="">{number = 1, name = main}<br>groupNotify—begin<br>groupNotify—end<br>1—<nsthread: 0x600002ce1a00="">{number = 3, name = (null)}<br>2—<nsthread: 0x600002cc5f00="">{number = 4, name = (null)}<br>3—<nsthread: 0x600002cc5f00="">{number = 4, name = (null)}</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<h3 id="6-5-2-dispatch-group-wait"><a href="#6-5-2-dispatch-group-wait" class="headerlink" title="6.5.2 dispatch_group_wait"></a>6.5.2 dispatch_group_wait</h3><ul>
<li>暂停当前线程（阻塞当前线程），等待指定的 group 中的任务执行完成后，才会往下继续执行。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">* 队列组 dispatch_group_wait</div><div class="line">*/</div><div class="line">func groupWait() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;groupWait---begin&quot;)</div><div class="line">    let queue = DispatchQueue.global()</div><div class="line">    let group = DispatchGroup()</div><div class="line">    queue.async(group: group) &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    queue.async(group: group) &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    group.wait()</div><div class="line">    print(&quot;groupWait---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x6000001f28c0="">{number = 1, name = main}<br>groupWait—begin<br>2—<nsthread: 0x600000191c80="">{number = 3, name = (null)}<br>1—<nsthread: 0x6000001bfd40="">{number = 4, name = (null)}<br>groupWait—end</nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>从<code>dispatch_group_wai</code>t相关代码运行输出结果可以看出：<br>当所有任务执行完成之后，才执行 <code>dispatch_group_wait</code> 之后的操作。但是，使用<code>dispatch_group_wait</code>会阻塞当前线程。</p>
<h3 id="6-5-3-dispatch-group-enter、dispatch-group-leave"><a href="#6-5-3-dispatch-group-enter、dispatch-group-leave" class="headerlink" title="6.5.3 dispatch_group_enter、dispatch_group_leave"></a>6.5.3 dispatch_group_enter、dispatch_group_leave</h3><p>-<code>dispatch_group_enter</code> 标志着一个任务追加到 group，执行一次，相当于 group 中未执行完毕任务数+1</p>
<ul>
<li><code>dispatch_group_leave</code> 标志着一个任务离开了 group，执行一次，相当于 group 中未执行完毕任务数-1。</li>
<li>当 group 中未执行完毕任务数为0的时候，才会使<code>dispatch_group_wait</code>解除阻塞，以及执行追加到<code>dispatch_group_notify</code>中的任务。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">func groupEnterAndLeave() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;groupEnterAndLeave---begin&quot;)</div><div class="line">    let queue = DispatchQueue.global()</div><div class="line">    let group = DispatchGroup()</div><div class="line">    group.enter()</div><div class="line">    queue.async() &#123;</div><div class="line">        sleep(2)</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">        group.leave()</div><div class="line">    &#125;</div><div class="line">    group.enter()</div><div class="line">    queue.async() &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;2---\(Thread.current)&quot;)</div><div class="line">        group.leave()</div><div class="line">    &#125;</div><div class="line">    group.notify(queue: queue) &#123;</div><div class="line">        sleep(1)</div><div class="line">        print(&quot;3---\(Thread.current)&quot;)</div><div class="line">    &#125;</div><div class="line">    print(&quot;groupEnterAndLeave---end&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p>currentThread—<nsthread: 0x600002bf68c0="">{number = 1, name = main}<br>groupEnterAndLeave—begin<br>groupEnterAndLeave—end<br>2—<nsthread: 0x600002b9c700="">{number = 3, name = (null)}<br>1—<nsthread: 0x600002b991c0="">{number = 4, name = (null)}<br>3—<nsthread: 0x600002b991c0="">{number = 4, name = (null)}</nsthread:></nsthread:></nsthread:></nsthread:></p>
</blockquote>
<p>从<code>dispatch_group_enter</code>、<code>dispatch_group_leave</code>相关代码运行结果中可以看出：当所有任务执行完成之后，才执行 <code>dispatch_group_notify</code> 中的任务。这里的<code>dispatch_group_enter</code>、<code>dispatch_group_leave</code>组合，其实等同于<code>dispatch_group_async</code>。</p>
<h2 id="6-6-GCD-信号量：dispatch-semaphore"><a href="#6-6-GCD-信号量：dispatch-semaphore" class="headerlink" title="6.6 GCD 信号量：dispatch_semaphore"></a>6.6 GCD 信号量：dispatch_semaphore</h2><p>GCD 中的信号量是指 Dispatch Semaphore，是持有计数的信号。类似于过高速路收费站的栏杆。可以通过时，打开栏杆，不可以通过时，关闭栏杆。在 Dispatch Semaphore 中，使用计数来完成这个功能，计数为0时等待，不可通过。计数为1或大于1时，计数减1且不等待，可通过。<br>Dispatch Semaphore 提供了三个函数。</p>
<ul>
<li><p><code>dispatch_semaphore_create</code>：创建一个Semaphore并初始化信号的总量</p>
</li>
<li><p><code>dispatch_semaphore_signal</code>：发送一个信号，让信号总量加1</p>
</li>
<li><p><code>dispatch_semaphore_wait</code>：可以使总信号量减1，当信号总量为0时就会一直等待（阻塞所在线程），否则就可以正常执行。</p>
</li>
</ul>
<blockquote>
<p>注意：信号量的使用前提是：想清楚你需要处理哪个线程等待（阻塞），又要哪个线程继续执行，然后使用信号量。</p>
</blockquote>
<p>Dispatch Semaphore 在实际开发中主要用于：</p>
<ul>
<li>保持线程同步，将异步执行任务转换为同步执行任务</li>
<li>保证线程安全，为线程加锁</li>
</ul>
<h3 id="6-6-1-Dispatch-Semaphore-线程同步"><a href="#6-6-1-Dispatch-Semaphore-线程同步" class="headerlink" title="6.6.1 Dispatch Semaphore 线程同步"></a>6.6.1 Dispatch Semaphore 线程同步</h3><p>我们在开发中，会遇到这样的需求：异步执行耗时任务，并使用异步执行的结果进行一些额外的操作。换句话说，相当于，将将异步执行任务转换为同步执行任务。比如说：AFNetworking 中 AFURLSessionManager.m 里面的 <code>tasksForKeyPath:</code> 方法。通过引入信号量的方式，等待异步执行任务结果，获取到 tasks，然后再返回该 tasks。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (NSArray *)tasksForKeyPath:(NSString *)keyPath &#123;</div><div class="line">    __block NSArray *tasks = nil;</div><div class="line">    dispatch_semaphore_t semaphore = dispatch_semaphore_create(0);</div><div class="line">    [self.session getTasksWithCompletionHandler:^(NSArray *dataTasks, NSArray *uploadTasks, NSArray *downloadTasks) &#123;</div><div class="line">        if ([keyPath isEqualToString:NSStringFromSelector(@selector(dataTasks))]) &#123;</div><div class="line">            tasks = dataTasks;</div><div class="line">        &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(uploadTasks))]) &#123;</div><div class="line">            tasks = uploadTasks;</div><div class="line">        &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(downloadTasks))]) &#123;</div><div class="line">            tasks = downloadTasks;</div><div class="line">        &#125; else if ([keyPath isEqualToString:NSStringFromSelector(@selector(tasks))]) &#123;</div><div class="line">            tasks = [@[dataTasks, uploadTasks, downloadTasks] valueForKeyPath:@&quot;@unionOfArrays.self&quot;];</div><div class="line">        &#125;</div><div class="line">        dispatch_semaphore_signal(semaphore);</div><div class="line">    &#125;];</div><div class="line">    dispatch_semaphore_wait(semaphore, DISPATCH_TIME_FOREVER);</div><div class="line">    return tasks;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>下面，我们来利用 Dispatch Semaphore 实现线程同步，将<code>异步</code>执行任务转换为<code>同步</code>执行任务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">func semaphoreSync() &#123;</div><div class="line">    print(&quot;currentThread---\(Thread.current)&quot;)</div><div class="line">    print(&quot;semaphoreSync---begin&quot;)</div><div class="line">    let queue = DispatchQueue.global()</div><div class="line">    let semaphore = DispatchSemaphore(value: 0)</div><div class="line">    var number = 0</div><div class="line">    queue.async &#123;</div><div class="line">        sleep(2)</div><div class="line">        number = 100</div><div class="line">        print(&quot;1---\(Thread.current)&quot;)</div><div class="line">        semaphore.signal()</div><div class="line">    &#125;</div><div class="line">    semaphore.wait()</div><div class="line">    print(&quot;semaphoreSync---end,number = \(number)&quot;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>currentThread—<nsthread: 0x600003ce59c0="">{number = 1, name = main}<br>semaphoreSync—begin<br>1—<nsthread: 0x600003cbc800="">{number = 3, name = (null)}<br>semaphoreSync—end,number = 100</nsthread:></nsthread:></p>
</blockquote>
<p>从 Dispatch Semaphore 实现线程同步的代码可以看到：</p>
<ul>
<li><code>semaphore---end</code> 是在执行完  <code>number = 100;</code> 之后才打印的。而且输出结果 number 为 100。<br>这是因为<code>异步执行</code>不会做任何等待，可以继续执行任务。<code>异步执行</code>将任务1追加到队列之后，不做等待，接着执行<code>dispatch_semaphore_wait</code>方法。此时 semaphore == 0，当前线程进入等待状态。然后，异步任务1开始执行。任务1执行到<code>dispatch_semaphore_signal</code>之后，总信号量，此时 semaphore == 1，<code>dispatch_semaphore_wait</code>方法使总信号量减1，正在被阻塞的线程（主线程）恢复继续执行。最后打印<code>semaphore---end,number = 100</code>。这样就实现了线程同步，将异步执行任务转换为同步执行任务。</li>
</ul>
<h1 id="7-考题：GCD来实现读写操作"><a href="#7-考题：GCD来实现读写操作" class="headerlink" title="7 考题：GCD来实现读写操作"></a>7 考题：GCD来实现读写操作</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">private let queue = DispatchQueue(label: &quot;com.davie.readwrite&quot;, attributes: .concurrent)</div><div class="line">private var _someString: NSString?</div><div class="line">var someString:NSString? &#123;</div><div class="line">    get &#123;</div><div class="line">        var tempString:NSString?</div><div class="line">        let semphore = DispatchSemaphore(value: 1)</div><div class="line">        queue.async() &#123;</div><div class="line">            sleep(1)</div><div class="line">            tempString = self._someString</div><div class="line">            print(&quot;read:\(tempString ?? &quot;NULL&quot;),\(semphore),\(Thread.current)&quot;)</div><div class="line">            semphore.signal()</div><div class="line">        &#125;</div><div class="line">        semphore.wait()</div><div class="line">        return tempString</div><div class="line">    &#125;</div><div class="line">    set &#123;</div><div class="line">        // 写数据时使用串行</div><div class="line">        queue.async(flags: .barrier) &#123;</div><div class="line">        sleep(1)</div><div class="line">        self._someString = newValue</div><div class="line">        print(&quot;write:\(self._someString ?? &quot;NULL&quot;),\(Thread.current)&quot;)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">var a = self.someString</div><div class="line">self.someString = &quot;22&quot;</div><div class="line">a = self.someString</div><div class="line">a = self.someString</div></pre></td></tr></table></figure>
<blockquote>
<p>read:NULL,<os_dispatch_semaphore: 0x600000d02e40="">,<nsthread: 0x600003b79200="">{number = 3, name = (null)}<br>write:22,<nsthread: 0x600003b79200="">{number = 3, name = (null)}<br>read:22,<os_dispatch_semaphore: 0x600000d03390="">,<nsthread: 0x600003b79200="">{number = 3, name = (null)}<br>read:22,<os_dispatch_semaphore: 0x600000d033e0="">,<nsthread: 0x600003b72880="">{number = 4, name = (null)}</nsthread:></os_dispatch_semaphore:></nsthread:></os_dispatch_semaphore:></nsthread:></nsthread:></os_dispatch_semaphore:></p>
</blockquote>
<p>如果用let queue = DispatchQueue.global() 实际barrier模式的栅栏不起作用</p>
<blockquote>
<p>read:NULL,<os_dispatch_semaphore: 0x600001fdcaa0="">,<nsthread: 0x6000029a1f40="">{number = 4, name = (null)}<br>read:NULL,<os_dispatch_semaphore: 0x600001fdd0e0="">,<nsthread: 0x600002993b40="">{number = 5, name = (null)}<br>read:NULL,<os_dispatch_semaphore: 0x600001fdd5e0="">,<nsthread: 0x6000029a1f00="">{number = 3, name = (null)}<br>write:22,<nsthread: 0x60000299c800="">{number = 6, name = (null)}</nsthread:></nsthread:></os_dispatch_semaphore:></nsthread:></os_dispatch_semaphore:></nsthread:></os_dispatch_semaphore:></p>
</blockquote>
<p>如果用let semphore = DispatchSemaphore(value: 0),实际读模式就变成了用了同一个线程的串型，后2次read中间等待了一秒</p>
<blockquote>
<p>read:NULL,<os_dispatch_semaphore: 0x6000033f62b0="">,<nsthread: 0x600000585480="">{number = 3, name = (null)}<br>write:22,<nsthread: 0x600000585480="">{number = 3, name = (null)}<br>read:22,<os_dispatch_semaphore: 0x6000033f62b0="">,<nsthread: 0x600000585480="">{number = 3, name = (null)}<br>read:22,<os_dispatch_semaphore: 0x6000033d0410="">,<nsthread: 0x600000585480="">{number = 3, name = (null)}</nsthread:></os_dispatch_semaphore:></nsthread:></os_dispatch_semaphore:></nsthread:></nsthread:></os_dispatch_semaphore:></p>
</blockquote>
<h3 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h3><p><a href="https://www.jianshu.com/p/2d57c72016c6" target="_blank" rel="external">iOS 多线程：『GCD』详尽总结</a></p>
]]></content>
      
        <categories>
            
            <category> 回顾温习 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[建立私有的pod库]]></title>
      <url>/2019/1/16/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%A7%81%E6%9C%89%E7%9A%84pod%E5%BA%93/</url>
      <content type="html"><![CDATA[<p><code>GitHub私有库居然免费了，很开心的把原来的pod库迁移了过来，并写了一个教程。</code></p>
<h2 id="创建并设置一个私有的Spec-Repo"><a href="#创建并设置一个私有的Spec-Repo" class="headerlink" title="创建并设置一个私有的Spec Repo"></a>创建并设置一个私有的Spec Repo</h2><ol>
<li>首先我们在github上建立一个自己的仓库 LocalPod(仓库名字任意)</li>
<li>在本地创建Spec Repo<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo add LocalPod https://github.com/davidlin7876/LocalPod.git</div></pre></td></tr></table></figure>
</li>
</ol>
<p>进入 ~/.cocoapods/repos 目录此时就能看到我们自己的pod仓库了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open ~/.cocoapods/repos</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>如果有其他合作人员共同使用这个私有Spec Repo的话在他有对应Git仓库的权限的前提下执行相同的命令添加这个Spec Repo即可。</p>
<h2 id="创建PodLib"><a href="#创建PodLib" class="headerlink" title="创建PodLib"></a>创建PodLib</h2><ol>
<li><p>用github建立一个私有的仓库，git clone到本地</p>
</li>
<li><p>跳转到一个用来保存自己库的文件夹下来创建一个lib（推荐单独创建一个专门用来保存自己的库），并在该目录执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ pod lib create NEGCFoundation</div></pre></td></tr></table></figure>
</li>
</ol>
<p>执行后正常情况下会有一个交互：</p>
<ul>
<li>lib使用的语言swif/ObjeC</li>
<li>是否创建一个demo</li>
<li>选择什么测试框架 [ Specta / Kiwi / None ]</li>
<li>是否进行UI测试</li>
<li>类的前缀</li>
</ul>
<p>然后就会在该目录创建一个lib</p>
<ol>
<li>添加相关要生成lib的文件到Pod文件夹：（libName)/（libName)/Classes, 当然还要删除ReplaceMe.m文件(只要在提交前删除掉就好)</li>
</ol>
<h2 id="创建lib所对应的podspec文件-（针对已存在的lib）"><a href="#创建lib所对应的podspec文件-（针对已存在的lib）" class="headerlink" title="创建lib所对应的podspec文件-（针对已存在的lib）"></a>创建lib所对应的podspec文件-（针对已存在的lib）</h2><p><a href="http://guides.cocoapods.org/making/specs-and-specs-repo.html" target="_blank" rel="external">官方教程</a></p>
<ol>
<li>在lib文件夹下执行<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod spec create NEGCFoundation https://github.com/davidlin7876/NEGCFoundation.git</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="配置podspec与验证"><a href="#配置podspec与验证" class="headerlink" title="配置podspec与验证"></a>配置podspec与验证</h2><ol>
<li><p>配置MyLibrary.podspec（ruby文件）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># pod lib lint NEGCFoundation.podspec --verbose --skip-import-validation --allow-warnings</div><div class="line"># pod trunk push NEGCFoundation.podspec --verbose --skip-import-validation --allow-warnings</div><div class="line"># pod repo push LocalPod NEGCFoundation.podspec --verbose --skip-import-validation --allow-warnings</div><div class="line">Pod::Spec.new do |s|</div><div class="line">s.name         = &quot;NEGCFoundation&quot;</div><div class="line">s.version      = &quot;0.0.1&quot;</div><div class="line">s.summary      = &quot;NetEase Game Center foundation framework.&quot;</div><div class="line">s.homepage     = &quot;https://github.com/davidlin7876/NEGCFoundation&quot;</div><div class="line">s.license      = &#123; :type =&gt; &quot;MIT&quot;, :file =&gt; &quot;LICENSE&quot; &#125;</div><div class="line">s.author       = &#123; &quot;David Lin&quot; =&gt; &quot;davidlin7876@163.com&quot; &#125;</div><div class="line">s.platform     = :ios, &quot;9.0&quot;</div><div class="line">s.source       = &#123; :git =&gt; &quot;https://github.com/davidlin7876/NEGCFoundation.git&quot;, :tag =&gt; &quot;0.0.1&quot; &#125;</div><div class="line">s.public_header_files = &quot;NEGCFoundation/NEGCFoundation.h&quot;, &quot;NEGCFoundation/**/*.&#123;h&#125;&quot;</div><div class="line">s.source_files  = &quot;NEGCFoundation/NEGCFoundation.h&quot;, &quot;NEGCFoundation/**/*.&#123;h,m&#125;&quot;</div><div class="line">s.frameworks = &quot;Foundation&quot;, &quot;QuartzCore&quot;, &quot;UIKit&quot;, &quot;CoreGraphics&quot;</div><div class="line">s.requires_arc = true</div><div class="line">s.dependency &quot;Reachability&quot;, &quot;~&gt; 3.2&quot;</div><div class="line">s.dependency &quot;FMDB&quot;, &quot;~&gt; 2.7.2&quot;</div><div class="line">end</div></pre></td></tr></table></figure>
</li>
<li><p>完成上面主要配置(并非所有配置)后，验证一下这个文件是否可用。执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod lib lint --verbose --skip-import-validation --allow-warnings NEGCFoundation.podspec</div></pre></td></tr></table></figure>
</li>
<li><p>本地测试与提交</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m &quot;new version&quot;</div><div class="line">git push origin master</div><div class="line"># 打上新tag</div><div class="line">git tag -m &quot;release 0.1.0&quot; &quot;0.1.0&quot;</div><div class="line">git push --tags     #推送tag到远端仓库</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="向私有的Spec-Repo中提交自己的podspec"><a href="#向私有的Spec-Repo中提交自己的podspec" class="headerlink" title="向私有的Spec Repo中提交自己的podspec"></a>向私有的Spec Repo中提交自己的podspec</h2><ol>
<li>提交podspec到自己的Spec Repo<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod repo push LocalPod NEGCFoundation.podspec --verbose --allow-warnings</div></pre></td></tr></table></figure>
</li>
</ol>
<p>如果是公开库用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk push NEGCFoundation.podspec --verbose --skip-import-validation --allow-warnings</div></pre></td></tr></table></figure></p>
<p>如果遇到错误 [!] You need to register a session first.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod trunk register davidlin7876@163.com &apos;David Lin&apos;</div></pre></td></tr></table></figure></p>
<ol>
<li>搜索自己的lib<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod search NEGCFoundation</div></pre></td></tr></table></figure>
</li>
</ol>
<p>到这里一个属于自己的pod库就大功告成了</p>
<h2 id="在自己项目中使用"><a href="#在自己项目中使用" class="headerlink" title="在自己项目中使用"></a>在自己项目中使用</h2><p>在Podfile文件中加入查找源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#我们自己的私有spec仓库的地址</div><div class="line">source &apos;https://github.com/davidlin7876/LocalPod.git&apos;  </div><div class="line">#官方仓库的地址</div><div class="line">source &apos;https://github.com/CocoaPods/Specs.git&apos;</div></pre></td></tr></table></figure></p>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ios deprecated 警告消除 强迫症的选择]]></title>
      <url>/2018/10/10/%E8%AD%A6%E5%91%8A%E6%B6%88%E9%99%A4%E5%BC%BA%E8%BF%AB%E7%97%87%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      <content type="html"><![CDATA[<p>[TOC]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#pragma clang diagnostic push</div><div class="line">#pragma clang diagnostic ignored &quot;-Wdeprecated-declarations&quot;</div><div class="line">这里写出现警告的代码</div><div class="line"></div><div class="line">#pragma clang diagnostic pop</div></pre></td></tr></table></figure></p>
<p>这样就消除了方法弃用的警告！</p>
<p>点阅读全文查看全部的Warnings对照表<br><a id="more"></a></p>
<h3 id="Semantic-Warnings"><a href="#Semantic-Warnings" class="headerlink" title="Semantic Warnings"></a>Semantic Warnings</h3><table>
<thead>
<tr>
<th>Warning</th>
<th>Message</th>
</tr>
</thead>
<tbody>
<tr>
<td>-WCFString-literal</td>
<td>input conversion stopped due to an input byte that does not belong to the input codeset UTF-8</td>
</tr>
<tr>
<td>-WNSObject-attribute</td>
<td>__attribute ((NSObject)) may be put on a typedef only, attribute is ignored</td>
</tr>
<tr>
<td>-Wabstract-vbase-init</td>
<td>initializer for virtual base class %0 of abstract class %1 will never be used</td>
</tr>
<tr>
<td>-Waddress-of-array-temporary</td>
<td>pointer is initialized by a temporary array, which will be destroyed at the end of the full-expression</td>
</tr>
<tr>
<td>-Warc-maybe-repeated-use-of-weak</td>
<td>“weak %selec{variable│property│implicit property│instance variable}0 %1 may be accessed multiple times in this %select{function│method│block│lambda}2 and may be unpredictably set to nil assign to a strong variable to keep the object alive</td>
</tr>
<tr>
<td>-Warc-non-pod-memaccess</td>
<td>%select{destination for│source of}0 this %1 call is a pointer to ownership-qualified type %2</td>
</tr>
<tr>
<td>-Warc-performSelector-leaks</td>
<td>performSelector may cause a leak because its selector is unknown</td>
</tr>
<tr>
<td>-Warc-repeated-use-of-weak</td>
<td>“weak %select{variable│property│implicit property│instance variable}0 %1 is accessed multiple times in this %select{function│method│block│lambda}2 but may be unpredictably set to nil assign to a strong variable to keep the object alive</td>
</tr>
<tr>
<td>-Warc-retain-cycles</td>
<td>capturing %0 strongly in this block is likely to lead to a retain cycle</td>
</tr>
<tr>
<td>-Warc-unsafe-retained-assign</td>
<td>assigning retained object to unsafe property object will be released after assignment</td>
</tr>
<tr>
<td>-Warc-unsafe-retained-assign</td>
<td>assigning %select{array literaldictionary literal│numeric literal│boxed expression│should not happen│block literal}0 to a weak %select{property│variable}1 object will be released after assignment</td>
</tr>
<tr>
<td>-Warc-unsafe-retained-assign</td>
<td>assigning retained object to %select{weak│unsafe_unretained}0 %select{property│variable}1 object will be released after assignment</td>
</tr>
<tr>
<td>-Warray-bounds</td>
<td>array index %0 is past the end of the array (which contains %1 element%s2)</td>
</tr>
<tr>
<td>-Warray-bounds</td>
<td>array index %0 is before the beginning of the array</td>
</tr>
<tr>
<td>-Warray-bounds</td>
<td>‘static’ has no effect on zero-length arrays</td>
</tr>
<tr>
<td>-Warray-bounds</td>
<td>array argument is too small contains %0 elements, callee requires at least %1</td>
</tr>
<tr>
<td>-Warray-bounds-pointer-arithmetic</td>
<td>the pointer incremented by %0 refers past the end of the array (that contains %1 element%s2)</td>
</tr>
<tr>
<td>-Warray-bounds-pointer-arithmetic</td>
<td>the pointer decremented by %0 refers before the beginning of the array</td>
</tr>
<tr>
<td>-Wassign-enum</td>
<td>integer constant not in range of enumerated type %0</td>
</tr>
<tr>
<td>-Watomic-property-with-user-defined-accessor</td>
<td>writable atomic property %0 cannot pair a synthesized %select{getter│setter}1 with a user defined %select{getter│setter}2</td>
</tr>
<tr>
<td>-Wattributes</td>
<td>unknown attribute %0 ignored</td>
</tr>
<tr>
<td>-Wauto-var-id</td>
<td>‘auto’ deduced as ‘id’ in declaration of %0</td>
</tr>
<tr>
<td>-Wavailability</td>
<td>unknown platform %0 in availability macro</td>
</tr>
<tr>
<td>-Wavailability</td>
<td>overriding method %select{introduced after│deprecated before│obsoleted before}0 overridden method on %1 (%2 vs. %3)</td>
</tr>
<tr>
<td>-Wavailability</td>
<td>availability does not match previous declaration</td>
</tr>
<tr>
<td>-Wavailability</td>
<td>overriding method cannot be unavailable on %0 when its overridden method is available</td>
</tr>
<tr>
<td>-Wavailability</td>
<td>feature cannot be %select{introduced│deprecated│obsoleted}0 in %1 version %2 before it was %select{introduced│deprecated│obsoleted}3 in version %4 attribute ignored</td>
</tr>
<tr>
<td>-Wbad-function-cast</td>
<td>cast from function call of type %0 to non-matching type %1</td>
</tr>
<tr>
<td>-Wbitfield-constant-conversion</td>
<td>implicit truncation from %2 to bitfield changes value from %0 to %1</td>
</tr>
<tr>
<td>-Wbitwise-op-parentheses</td>
<td>‘&amp;’ within ‘│’</td>
</tr>
<tr>
<td>-Wbool-conversion</td>
<td>“initialization of pointer of type %0 to null from a constant boolean “ “expression</td>
</tr>
<tr>
<td>-Wbridge-cast</td>
<td>%0 cannot bridge to %1</td>
</tr>
<tr>
<td>-Wbridge-cast</td>
<td>%0 bridges to %1, not %2</td>
</tr>
<tr>
<td>-Wbuiltin-requires-header</td>
<td>declaration of built-in function ‘%0’ requires inclusion of the header stdio.h</td>
</tr>
<tr>
<td>-Wbuiltin-requires-header</td>
<td>declaration of built-in function ‘%0’ requires inclusion of the header setjmp.h</td>
</tr>
<tr>
<td>-Wbuiltin-requires-header</td>
<td>declaration of built-in function ‘%0’ requires inclusion of the header ucontext.h</td>
</tr>
<tr>
<td>-Wc++-compat</td>
<td>%select{│empty }0%select{struct│union}1 has size 0 in C, %select{size 1│non-zero size}2 in C++</td>
</tr>
<tr>
<td>-Wc++11-compat</td>
<td>explicit instantiation cannot be ‘inline’</td>
</tr>
<tr>
<td>-Wc++11-compat</td>
<td>explicit instantiation of %0 must occur at global scope</td>
</tr>
<tr>
<td>-Wc++11-compat</td>
<td>explicit instantiation of %0 not in a namespace enclosing %1</td>
</tr>
<tr>
<td>-Wc++11-compat</td>
<td>explicit instantiation of %q0 must occur in namespace %1</td>
</tr>
<tr>
<td>-Wc++11-narrowing</td>
<td>constant expression evaluates to %0 which cannot be narrowed to type %1 in C++11</td>
</tr>
<tr>
<td>-Wc++11-narrowing</td>
<td>type %0 cannot be narrowed to %1 in initializer list in C++11</td>
</tr>
<tr>
<td>-Wc++11-narrowing</td>
<td>non-constant-expression cannot be narrowed from type %0 to %1 in initializer list in C++11</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>type definition in a constexpr %select{function│constructor}0 is incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>use of this statement in a constexpr %select{function│constructor}0 is incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>init-captures.def warn_cxx11_compat_init_capture : Warning “initialized lambda captures are incompatible with C++ standards “ “before C++1y</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>variable declaration in a constexpr %select{function│constructor}0 is incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>constexpr function with no return statements is incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>multiple return statements in constexpr function is incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>variable templates are incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>substitution failure due to access control is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>%select{anonymous struct│union}0 member %1 with a non-trivial %select{constructor│copy constructor│move constructor│copy assignment operator│move assignment operator│destructor}2 is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>enumeration type in nested name specifier is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>static data member %0 in union is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>default template arguments for a function template are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>scalar initialized from empty initializer list is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>befriending %1 without ‘%select{struct│interface│union│class│enum}0’ keyword is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>use of null pointer as non-type template argument is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>friend declaration naming a member of the declaring class is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>non-class friend type %0 is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>befriending enumeration type %0 is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>use of non-static data member %0 in an unevaluated context is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>friend function %0 would be implicitly redefined in C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>%select{class template│class template partial│variable template│variable template partial│function template│member function│static data member│member class│member enumeration}0 specialization of %1 outside namespace %2 is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>reference initialized from initializer list is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>redundant parentheses surrounding address non-type template argument are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>initialization of initializer_list object is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>use of ‘template’ keyword outside of a template is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>non-type template argument referring to %select{function│object}0 %1 with internal linkage is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>use of ‘typename’ outside of a template is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>passing object of trivial but non-POD type %0 through variadic %select{function│block│method│constructor}1 is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>goto would jump into protected scope in C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>constructor call from initializer list is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>‘auto’ type specifier is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>delegating constructors are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>‘constexpr’ specifier is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>inheriting constructors are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>explicit conversion functions are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>switch case would be in a protected scope in C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>‘%0’ type specifier is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>indirect goto might cross protected scopes in C++98</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>cast between pointer-to-function and pointer-to-object is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>implicit conversion from array size expression of type %0 to %select{integral│enumeration}1 type %2 is incompatible with C++98</td>
</tr>
<tr>
<td>-Wcast-align</td>
<td>cast from %0 to %1 increases required alignment from %2 to %3</td>
</tr>
<tr>
<td>-Wcast-of-sel-type</td>
<td>cast of type %0 to %1 is deprecated use sel_getName instead</td>
</tr>
<tr>
<td>-Wchar-subscripts</td>
<td>array subscript is of type ‘char’</td>
</tr>
<tr>
<td>-Wconditional-uninitialized</td>
<td>variable %0 may be uninitialized when %select{used here│captured by block}1</td>
</tr>
<tr>
<td>-Wconstant-logical-operand</td>
<td>use of logical ‘%0’ with constant operand</td>
</tr>
<tr>
<td>-Wconstexpr-not-const</td>
<td>‘constexpr’ non-static member function will not be implicitly ‘const’ in C++1y add ‘const’ to avoid a change in behavior</td>
</tr>
<tr>
<td>-Wconsumed</td>
<td>state of variable ‘%0’ must match at the entry and exit of loop</td>
</tr>
<tr>
<td>-Wconsumed</td>
<td>parameter ‘%0’ not in expected state when the function returns: expected ‘%1’, observed ‘%2’</td>
</tr>
<tr>
<td>-Wconsumed</td>
<td>argument not in expected state expected ‘%0’, observed ‘%1’</td>
</tr>
<tr>
<td>-Wconsumed</td>
<td>invalid invocation of method ‘%0’ on a temporary object while it is in the ‘%1’ state</td>
</tr>
<tr>
<td>-Wconsumed</td>
<td>return state set for an unconsumable type ‘%0’</td>
</tr>
<tr>
<td>-Wconsumed</td>
<td>consumed analysis attribute is attached to member of class ‘%0’ which isn’t marked as consumable</td>
</tr>
<tr>
<td>-Wconsumed</td>
<td>invalid invocation of method ‘%0’ on object ‘%1’ while it is in the ‘%2’ state</td>
</tr>
<tr>
<td>-Wconsumed</td>
<td>return value not in expected state expected ‘%0’, observed ‘%1’</td>
</tr>
<tr>
<td>-Wconversion</td>
<td>implicit conversion discards imaginary component: %0 to %1</td>
</tr>
<tr>
<td>-Wconversion</td>
<td>non-type template argument with value ‘%0’ converted to ‘%1’ for unsigned template parameter of type %2</td>
</tr>
<tr>
<td>-Wconversion</td>
<td>implicit conversion loses floating-point precision: %0 to %1</td>
</tr>
<tr>
<td>-Wconversion</td>
<td>implicit conversion loses integer precision: %0 to %1</td>
</tr>
<tr>
<td>-Wconversion</td>
<td>non-type template argument value ‘%0’ truncated to ‘%1’ for template parameter of type %2</td>
</tr>
<tr>
<td>-Wconversion</td>
<td>implicit conversion turns vector to scalar: %0 to %1</td>
</tr>
<tr>
<td>-Wconversion</td>
<td>implicit conversion turns floating-point number into integer: %0 to %1</td>
</tr>
<tr>
<td>-Wcovered-switch-default</td>
<td>default label in switch which covers all enumeration values</td>
</tr>
<tr>
<td>-Wcustom-atomic-properties</td>
<td>atomic by default property %0 has a user defined %select{getter│setter}1 (property should be marked ‘atomic’ if this is intended)</td>
</tr>
<tr>
<td>-Wdangling-field</td>
<td>initializing pointer member %0 with the stack address of parameter %1</td>
</tr>
<tr>
<td>-Wdangling-field</td>
<td>binding reference %select{│subobject of }1member %0 to a temporary value</td>
</tr>
<tr>
<td>-Wdangling-field</td>
<td>binding reference member %0 to stack allocated parameter %1</td>
</tr>
<tr>
<td>-Wdangling-initializer-list</td>
<td>array backing the initializer list will be destroyed at the end of %select{the full-expression│the constructor}0</td>
</tr>
<tr>
<td>-Wdelete-incomplete</td>
<td>deleting pointer to incomplete type %0 may cause undefined behavior</td>
</tr>
<tr>
<td>-Wdelete-non-virtual-dtor</td>
<td>delete called on %0 that is abstract but has non-virtual destructor</td>
</tr>
<tr>
<td>-Wdelete-non-virtual-dtor</td>
<td>delete called on %0 that has virtual functions but non-virtual destructor</td>
</tr>
<tr>
<td>-Wdeprecated</td>
<td>access declarations are deprecated use using declarations instead</td>
</tr>
<tr>
<td>-Wdeprecated</td>
<td>definition of implicit copy %select{constructor│assignment operator}1 for %0 is deprecated because it has a user-declared %select{copy %select{assignment operator│constructor}1│destructor}2</td>
</tr>
<tr>
<td>-Wdeprecated</td>
<td>dynamic exception specifications are deprecated</td>
</tr>
<tr>
<td>-Wdeprecated-increment-bool</td>
<td>incrementing expression of type bool is deprecated</td>
</tr>
<tr>
<td>-Wdeprecated-objc-isa-usage</td>
<td>assignment to Objective-C’s isa is deprecated in favor of object_setClass()</td>
</tr>
<tr>
<td>-Wdeprecated-objc-isa-usage</td>
<td>direct access to Objective-C’s isa is deprecated in favor of object_getClass()</td>
</tr>
<tr>
<td>-Wdeprecated-objc-pointer-introspection</td>
<td>bitmasking for introspection of Objective-C object pointers is strongly discouraged</td>
</tr>
<tr>
<td>-Wdeprecated-objc-pointer-introspection-performSelector</td>
<td>warn_objc_pointer_masking.Text</td>
</tr>
<tr>
<td>-Wdeprecated-writable-strings</td>
<td>dummy warning to enable -fconst-strings</td>
</tr>
<tr>
<td>-Wdirect-ivar-access</td>
<td>instance variable %0 is being directly accessed</td>
</tr>
<tr>
<td>-Wdistributed-object-modifiers</td>
<td>conflicting distributed object modifiers on return type in implementation of %0</td>
</tr>
<tr>
<td>-Wdistributed-object-modifiers</td>
<td>conflicting distributed object modifiers on parameter type in implementation of %0</td>
</tr>
<tr>
<td>-Wdivision-by-zero</td>
<td>division by zero is undefined</td>
</tr>
<tr>
<td>-Wdivision-by-zero</td>
<td>remainder by zero is undefined</td>
</tr>
<tr>
<td>-Wdocumentation</td>
<td>parameter ‘%0’ not found in the function declaration</td>
</tr>
<tr>
<td>-Wdocumentation</td>
<td>not a Doxygen trailing comment</td>
</tr>
<tr>
<td>-Wduplicate-enum</td>
<td>element %0 has been implicitly assigned %1 which another element has been assigned</td>
</tr>
<tr>
<td>-Wduplicate-method-match</td>
<td>multiple declarations of method %0 found and ignored</td>
</tr>
<tr>
<td>-Wdynamic-class-memaccess</td>
<td>%select{destination for│source of│first operand of│second operand of}0 this %1 call is a pointer to dynamic class %2 vtable pointer will be %select{overwritten│copied│moved│compared}3</td>
</tr>
<tr>
<td>-Wempty-body</td>
<td>switch statement has empty body</td>
</tr>
<tr>
<td>-Wempty-body</td>
<td>for loop has empty body</td>
</tr>
<tr>
<td>-Wempty-body</td>
<td>if statement has empty body</td>
</tr>
<tr>
<td>-Wempty-body</td>
<td>range-based for loop has empty body</td>
</tr>
<tr>
<td>-Wempty-body</td>
<td>while loop has empty body</td>
</tr>
<tr>
<td>-Wenum-compare</td>
<td>comparison of two values with different enumeration types%diff{ (and)│}0,1</td>
</tr>
<tr>
<td>-Wenum-conversion</td>
<td>implicit conversion from enumeration type %0 to different enumeration type %1</td>
</tr>
<tr>
<td>-Wexit-time-destructors</td>
<td>declaration requires an exit-time destructor</td>
</tr>
<tr>
<td>-Wexplicit-ownership-type</td>
<td>method parameter of type %0 with no explicit ownership</td>
</tr>
<tr>
<td>-Wextern-c-compat</td>
<td>%select{│empty }0%select{struct│union}1 has size 0 in C, %select{size 1│non-zero size}2 in C++</td>
</tr>
<tr>
<td>-Wextern-initializer</td>
<td>‘extern’ variable has an initializer</td>
</tr>
<tr>
<td>-Wfloat-equal</td>
<td>comparing floating point with == or != is unsafe</td>
</tr>
<tr>
<td>-Wformat</td>
<td>“data argument position ‘%0’ exceeds the number of data arguments (%1)</td>
</tr>
<tr>
<td>-Wformat</td>
<td>position arguments in format strings start counting at 1 (not 0)</td>
</tr>
<tr>
<td>-Wformat</td>
<td>invalid position specified for %select{field width│field precision}0</td>
</tr>
<tr>
<td>-Wformat</td>
<td>cannot mix positional and non-positional arguments in format string</td>
</tr>
<tr>
<td>-Wformat</td>
<td>values of type ‘%0’ should not be used as format arguments add an explicit cast to %1 instead</td>
</tr>
<tr>
<td>-Wformat</td>
<td>format specifies type %0 but the argument has type %1</td>
</tr>
<tr>
<td>-Wformat</td>
<td>zero field width in scanf format string is unused</td>
</tr>
<tr>
<td>-Wformat</td>
<td>no closing ‘]’ for ‘%%[‘ in scanf format string</td>
</tr>
<tr>
<td>-Wformat</td>
<td>format string should not be a wide string</td>
</tr>
<tr>
<td>-Wformat</td>
<td>format string contains ‘\0’ within the string body</td>
</tr>
<tr>
<td>-Wformat</td>
<td>‘%select{<em>│.</em>}0’ specified field %select{width│precision}0 is missing a matching ‘int’ argument</td>
</tr>
<tr>
<td>-Wformat</td>
<td>field %select{width│precision}0 should have type %1, but argument has type %2</td>
</tr>
<tr>
<td>-Wformat</td>
<td>%select{field width│precision}0 used with ‘%1’ conversion specifier, resulting in undefined behavior</td>
</tr>
<tr>
<td>-Wformat</td>
<td>format string missing</td>
</tr>
<tr>
<td>-Wformat</td>
<td>incomplete format specifier</td>
</tr>
<tr>
<td>-Wformat</td>
<td>flag ‘%0’ results in undefined behavior with ‘%1’ conversion specifier</td>
</tr>
<tr>
<td>-Wformat</td>
<td>flag ‘%0’ is ignored when flag ‘%1’ is present</td>
</tr>
<tr>
<td>-Wformat</td>
<td>more ‘%%’ conversions than data arguments</td>
</tr>
<tr>
<td>-Wformat</td>
<td>length modifier ‘%0’ results in undefined behavior or no effect with ‘%1’ conversion specifier</td>
</tr>
<tr>
<td>-Wformat-extra-args</td>
<td>data argument not used by format string</td>
</tr>
<tr>
<td>-Wformat-invalid-specifier</td>
<td>invalid conversion specifier ‘%0’</td>
</tr>
<tr>
<td>-Wformat-nonliteral</td>
<td>format string is not a string literal</td>
</tr>
<tr>
<td>-Wformat-security</td>
<td>format string is not a string literal (potentially insecure)</td>
</tr>
<tr>
<td>-Wformat-zero-length</td>
<td>format string is empty</td>
</tr>
<tr>
<td>-Wgcc-compat</td>
<td>GCC does not allow the ‘cleanup’ attribute argument to be anything other than a simple identifier</td>
</tr>
<tr>
<td>-Wglobal-constructors</td>
<td>declaration requires a global constructor</td>
</tr>
<tr>
<td>-Wglobal-constructors</td>
<td>declaration requires a global destructor</td>
</tr>
<tr>
<td>-Wgnu-conditional-omitted-operand</td>
<td>use of GNU ?: conditional expression extension, omitting middle operand</td>
</tr>
<tr>
<td>-Wheader-hygiene</td>
<td>using namespace directive in global context in header</td>
</tr>
<tr>
<td>-Widiomatic-parentheses</td>
<td>using the result of an assignment as a condition without parentheses</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>‘malloc’ attribute only applies to functions returning a pointer type</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 attribute only applies to %select{functions│unions│variables and functions│functions and methods│parameters│functions, methods and blocks│functions, methods, and classes│functions, methods, and parameters│classes│variables│methods│variables, functions and labels│fields and global variables│structs│variables, functions and tag types│thread-local variables│variables and fields│variables, data members and tag types│types and namespaces│Objective-C interfaces}1</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>‘%0’ attribute cannot be specified on a definition</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>__weak attribute cannot be specified on an automatic variable when ARC is not enabled</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>Objective-C GC does not allow weak variables on the stack</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>__weak attribute cannot be specified on a field declaration</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>attribute %0 cannot be applied to %select{functions│Objective-C method}1 without return value</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>attribute declaration must precede definition</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>attribute %0 is ignored, place it after \”%select{class│struct│union│interface│enum}1\” to apply attribute to type declaration</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>__declspec attribute %0 is not supported</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>attribute %0 ignored, because it cannot be applied to a type</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>attribute %0 after definition is ignored</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 attribute ignored</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>‘sentinel’ attribute only supported for variadic %select{functions│blocks}0</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>‘sentinel’ attribute requires named arguments</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>‘%0’ only applies to %select{function│pointer│Objective-C object or block pointer}1 types type here is %2</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>‘nonnull’ attribute applied to function with no pointer arguments</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 attribute can only be applied to instance variables or properties</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>ibaction attribute can only be applied to Objective-C instance methods</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 calling convention ignored on variadic function</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 only applies to variables with static storage duration and functions</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 attribute argument not supported: %1</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>#pramga ms_struct can not be used with dynamic classes or structures</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>transparent union definition must contain at least one field transparent_union attribute ignored</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>first field of a transparent union cannot have %select{floating point│vector}0 type %1 transparent_union attribute ignored</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>‘gnu_inline’ attribute requires function to be marked ‘inline’, attribute ignored</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>calling convention %0 ignored for this target</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>transparent_union attribute can only be applied to a union definition attribute ignored</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%select{alignment│size}0 of field %1 (%2 bits) does not match the %select{alignment│size}0 of the first field in transparent union transparent_union attribute ignored</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>attribute %0 is already applied</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 attribute ignored for field of type %1</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 attribute ignored when parsing type</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 attribute only applies to %select{functions│methods│properties}1 that return %select{an Objective-C object│a pointer│a non-retainable pointer}2</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>%0 attribute only applies to %select{Objective-C object│pointer}1 parameters</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>attribute %0 is already applied with different parameters</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>unknown visibility %0</td>
</tr>
<tr>
<td>-Wignored-qualifiers</td>
<td>“‘%0’ type qualifier%s1 on return type %plural{1:has│:have}1 no effect</td>
</tr>
<tr>
<td>-Wignored-qualifiers</td>
<td>ARC %select{unused│<strong>unsafe_unretained│</strong>strong│<strong>weak│</strong>autoreleasing}0 lifetime qualifier on return type is ignored</td>
</tr>
<tr>
<td>-Wimplicit-atomic-properties</td>
<td>property is assumed atomic by default</td>
</tr>
<tr>
<td>-Wimplicit-atomic-properties</td>
<td>property is assumed atomic when auto-synthesizing the property</td>
</tr>
<tr>
<td>-Wimplicit-fallthrough</td>
<td>fallthrough annotation in unreachable code</td>
</tr>
<tr>
<td>-Wimplicit-fallthrough</td>
<td>unannotated fall-through between switch labels</td>
</tr>
<tr>
<td>-Wimplicit-fallthrough</td>
<td>fallthrough annotation does not directly precede switch label</td>
</tr>
<tr>
<td>-Wimplicit-function-declaration</td>
<td>implicit declaration of function %0</td>
</tr>
<tr>
<td>-Wimplicit-function-declaration</td>
<td>use of unknown builtin %0</td>
</tr>
<tr>
<td>-Wimplicit-retain-self</td>
<td>“block implicitly retains ‘self’ explicitly mention ‘self’ to indicate this is intended behavior</td>
</tr>
<tr>
<td>-Wincompatible-library-redeclaration</td>
<td>incompatible redeclaration of library function %0</td>
</tr>
<tr>
<td>-Wincomplete-implementation</td>
<td>method definition for %0 not found</td>
</tr>
<tr>
<td>-Winherited-variadic-ctor</td>
<td>inheriting constructor does not inherit ellipsis</td>
</tr>
<tr>
<td>-Winitializer-overrides</td>
<td>subobject initialization overrides initialization of other fields within its enclosing subobject</td>
</tr>
<tr>
<td>-Winitializer-overrides</td>
<td>initializer overrides prior initialization of this subobject</td>
</tr>
<tr>
<td>-Wint-to-pointer-cast</td>
<td>cast to %1 from smaller integer type %0</td>
</tr>
<tr>
<td>-Wint-to-void-pointer-cast</td>
<td>cast to %1 from smaller integer type %0</td>
</tr>
<tr>
<td>-Winvalid-iboutlet</td>
<td>IBOutletCollection properties should be copy/strong and not assign</td>
</tr>
<tr>
<td>-Winvalid-iboutlet</td>
<td>%select{instance variable│property}2 with %0 attribute must be an object type (invalid %1)</td>
</tr>
<tr>
<td>-Winvalid-noreturn</td>
<td>function %0 declared ‘noreturn’ should not return</td>
</tr>
<tr>
<td>-Winvalid-noreturn</td>
<td>function declared ‘noreturn’ should not return</td>
</tr>
<tr>
<td>-Wlarge-by-value-copy</td>
<td>return value of %0 is a large (%1 bytes) pass-by-value object pass it by reference instead ?</td>
</tr>
<tr>
<td>-Wlarge-by-value-copy</td>
<td>%0 is a large (%1 bytes) pass-by-value argument pass it by reference instead ?</td>
</tr>
<tr>
<td>-Wliteral-conversion</td>
<td>implicit conversion from %0 to %1 changes value from %2 to %3</td>
</tr>
<tr>
<td>-Wliteral-range</td>
<td>magnitude of floating-point constant too large for type %0 maximum is %1</td>
</tr>
<tr>
<td>-Wliteral-range</td>
<td>magnitude of floating-point constant too small for type %0 minimum is %1</td>
</tr>
<tr>
<td>-Wlogical-not-parentheses</td>
<td>logical not is only applied to the left hand side of this comparison</td>
</tr>
<tr>
<td>-Wlogical-op-parentheses</td>
<td>‘&amp;&amp;’ within ‘││’</td>
</tr>
<tr>
<td>-Wloop-analysis</td>
<td>variable%select{s│ %1│s %1 and %2│s %1, %2, and %3│s %1, %2, %3, and %4}0 used in loop condition not modified in loop body</td>
</tr>
<tr>
<td>-Wloop-analysis</td>
<td>variable %0 is %select{decremented│incremented}1 both in the loop header and in the loop body</td>
</tr>
<tr>
<td>-Wmethod-signatures</td>
<td>conflicting parameter types in implementation of %0: %1 vs %2</td>
</tr>
<tr>
<td>-Wmethod-signatures</td>
<td>conflicting return type in implementation of %0: %1 vs %2</td>
</tr>
<tr>
<td>-Wmicrosoft</td>
<td>extra qualification on member %0</td>
</tr>
<tr>
<td>-Wmismatched-method-attributes</td>
<td>attributes on method implementation and its declaration must match</td>
</tr>
<tr>
<td>-Wmismatched-parameter-types</td>
<td>conflicting parameter types in implementation of %0%diff{: vs│}1,2</td>
</tr>
<tr>
<td>-Wmismatched-return-types</td>
<td>conflicting return type in implementation of %0%diff{: vs│}1,2</td>
</tr>
<tr>
<td>-Wmissing-braces</td>
<td>suggest braces around initialization of subobject</td>
</tr>
<tr>
<td>-Wmissing-declarations</td>
<td>‘%0’ ignored on this declaration</td>
</tr>
<tr>
<td>-Wmissing-field-initializers</td>
<td>missing field ‘%0’ initializer</td>
</tr>
<tr>
<td>-Wmissing-method-return-type</td>
<td>method has no return type specified defaults to ‘id’</td>
</tr>
<tr>
<td>-Wmissing-noreturn</td>
<td>%select{function│method}0 %1 could be declared with attribute ‘noreturn’</td>
</tr>
<tr>
<td>-Wmissing-noreturn</td>
<td>block could be declared with attribute ‘noreturn’</td>
</tr>
<tr>
<td>-Wmissing-prototypes</td>
<td>no previous prototype for function %0</td>
</tr>
<tr>
<td>-Wmissing-variable-declarations</td>
<td>no previous extern declaration for non-static variable %0</td>
</tr>
<tr>
<td>-Wmultiple-move-vbase</td>
<td>defaulted move assignment operator of %0 will move assign virtual base class %1 multiple times</td>
</tr>
<tr>
<td>-Wnested-anon-types</td>
<td>anonymous types declared in an anonymous union/struct are an extension</td>
</tr>
<tr>
<td>-Wno-typedef-redefinition</td>
<td>Redefinition of typedef ‘%0’ is a C11 feature</td>
</tr>
<tr>
<td>-Wnon-literal-null-conversion</td>
<td>“expression which evaluates to zero treated as a null pointer constant of “ “type %0</td>
</tr>
<tr>
<td>-Wnon-pod-varargs</td>
<td>second argument to ‘va_arg’ is of ARC ownership-qualified type %0</td>
</tr>
<tr>
<td>-Wnon-pod-varargs</td>
<td>cannot pass %select{non-POD│non-trivial}0 object of type %1 to variadic %select{function│block│method│constructor}2 expected type from format string was %3</td>
</tr>
<tr>
<td>-Wnon-pod-varargs</td>
<td>second argument to ‘va_arg’ is of non-POD type %0</td>
</tr>
<tr>
<td>-Wnon-pod-varargs</td>
<td>cannot pass object of %select{non-POD│non-trivial}0 type %1 through variadic %select{function│block│method│constructor}2 call will abort at runtime</td>
</tr>
<tr>
<td>-Wnon-virtual-dtor</td>
<td>%0 has virtual functions but non-virtual destructor</td>
</tr>
<tr>
<td>-Wnonnull</td>
<td>null passed to a callee which requires a non-null argument</td>
</tr>
<tr>
<td>-Wnull-arithmetic</td>
<td>use of NULL in arithmetic operation</td>
</tr>
<tr>
<td>-Wnull-arithmetic</td>
<td>comparison between NULL and non-pointer %select{(%1 and NULL)│(NULL and %1)}0</td>
</tr>
<tr>
<td>-Wnull-dereference</td>
<td>indirection of non-volatile null pointer will be deleted, not trap</td>
</tr>
<tr>
<td>-Wobjc-autosynthesis-property-ivar-name-match</td>
<td>autosynthesized property %0 will use %select{│synthesized}1 instance variable %2, not existing instance variable %3</td>
</tr>
<tr>
<td>-Wobjc-forward-class-redefinition</td>
<td>redefinition of forward class %0 of a typedef name of an object type is ignored</td>
</tr>
<tr>
<td>-Wobjc-interface-ivars</td>
<td>declaration of instance variables in the interface is deprecated</td>
</tr>
<tr>
<td>-Wobjc-literal-compare</td>
<td>direct comparison of %select{an array literal│a dictionary literal│a numeric literal│a boxed expression│}0 has undefined behavior</td>
</tr>
<tr>
<td>-Wobjc-literal-missing-atsign</td>
<td>string literal must be prefixed by ‘@’</td>
</tr>
<tr>
<td>-Wobjc-method-access</td>
<td>instance method %objcinstance0 not found (return type defaults to ‘id’) did you mean %objcinstance2?</td>
</tr>
<tr>
<td>-Wobjc-method-access</td>
<td>class method %objcclass0 not found (return type defaults to ‘id’) did you mean %objcclass2?</td>
</tr>
<tr>
<td>-Wobjc-method-access</td>
<td>instance method %objcinstance0 not found (return type defaults to ‘id’)</td>
</tr>
<tr>
<td>-Wobjc-method-access</td>
<td>instance method %0 is being used on ‘Class’ which is not in the root class</td>
</tr>
<tr>
<td>-Wobjc-method-access</td>
<td>class method %objcclass0 not found (return type defaults to ‘id’)</td>
</tr>
<tr>
<td>-Wobjc-method-access</td>
<td>instance method %0 found instead of class method %1</td>
</tr>
<tr>
<td>-Wobjc-missing-property-synthesis</td>
<td>“auto property synthesis is synthesizing property not explicitly synthesized</td>
</tr>
<tr>
<td>-Wobjc-missing-super-calls</td>
<td>method possibly missing a [super %0] call</td>
</tr>
<tr>
<td>-Wobjc-noncopy-retain-block-property</td>
<td>“retain’ed block property does not copy the block “ “- use copy attribute instead</td>
</tr>
<tr>
<td>-Wobjc-nonunified-exceptions</td>
<td>can not catch an exception thrown with @throw in C++ in the non-unified exception model</td>
</tr>
<tr>
<td>-Wobjc-property-implementation</td>
<td>property %0 requires method %1 to be defined - use @dynamic or provide a method implementation in this category</td>
</tr>
<tr>
<td>-Wobjc-property-implementation</td>
<td>property %0 requires method %1 to be defined - use @synthesize, @dynamic or provide a method implementation in this class implementation</td>
</tr>
<tr>
<td>-Wobjc-property-implicit-mismatch</td>
<td>“primary property declaration is implicitly strong while redeclaration in class extension is weak</td>
</tr>
<tr>
<td>-Wobjc-property-matches-cocoa-ownership-rule</td>
<td>property’s synthesized getter follows Cocoa naming convention for returning ‘owned’ objects</td>
</tr>
<tr>
<td>-Wobjc-property-no-attribute</td>
<td>no ‘assign’, ‘retain’, or ‘copy’ attribute is specified - ‘assign’ is assumed</td>
</tr>
<tr>
<td>-Wobjc-property-no-attribute</td>
<td>default property attribute ‘assign’ not appropriate for non-GC object</td>
</tr>
<tr>
<td>-Wobjc-property-synthesis</td>
<td>auto property synthesis will not synthesize property ‘%0’ because it is ‘readwrite’ but it will be synthesized ‘readonly’ via another property</td>
</tr>
<tr>
<td>-Wobjc-property-synthesis</td>
<td>“auto property synthesis will not synthesize property ‘%0’ because it cannot share an ivar with another synthesized property</td>
</tr>
<tr>
<td>-Wobjc-protocol-method-implementation</td>
<td>category is implementing a method which will also be implemented by its primary class</td>
</tr>
<tr>
<td>-Wobjc-protocol-property-synthesis</td>
<td>auto property synthesis will not synthesize property declared in a protocol</td>
</tr>
<tr>
<td>-Wobjc-redundant-literal-use</td>
<td>using %0 with a literal is redundant</td>
</tr>
<tr>
<td>-Wobjc-root-class</td>
<td>class %0 defined without specifying a base class</td>
</tr>
<tr>
<td>-Wobjc-string-compare</td>
<td>direct comparison of a string literal has undefined behavior</td>
</tr>
<tr>
<td>-Wobjc-string-concatenation</td>
<td>concatenated NSString literal for an NSArray expression - possibly missing a comma</td>
</tr>
<tr>
<td>-Wover-aligned</td>
<td>type %0 requires %1 bytes of alignment and the default allocator only guarantees %2 bytes</td>
</tr>
<tr>
<td>-Woverloaded-shift-op-parentheses</td>
<td>overloaded operator %select{│}0 has lower precedence than comparison operator</td>
</tr>
<tr>
<td>-Woverloaded-virtual</td>
<td>%q0 hides overloaded virtual %select{function│functions}1</td>
</tr>
<tr>
<td>-Woverriding-method-mismatch</td>
<td>conflicting distributed object modifiers on parameter type in declaration of %0</td>
</tr>
<tr>
<td>-Woverriding-method-mismatch</td>
<td>conflicting parameter types in declaration of %0: %1 vs %2</td>
</tr>
<tr>
<td>-Woverriding-method-mismatch</td>
<td>conflicting variadic declaration of method and its implementation</td>
</tr>
<tr>
<td>-Woverriding-method-mismatch</td>
<td>conflicting distributed object modifiers on return type in declaration of %0</td>
</tr>
<tr>
<td>-Woverriding-method-mismatch</td>
<td>conflicting parameter types in declaration of %0%diff{: vs│}1,2</td>
</tr>
<tr>
<td>-Woverriding-method-mismatch</td>
<td>conflicting return type in declaration of %0%diff{: vs│}1,2</td>
</tr>
<tr>
<td>-Woverriding-method-mismatch</td>
<td>conflicting return type in declaration of %0: %1 vs %2</td>
</tr>
<tr>
<td>-Wpacked</td>
<td>packed attribute is unnecessary for %0</td>
</tr>
<tr>
<td>-Wpadded</td>
<td>padding %select{struct│interface│class}0 %1 with %2 %select{byte│bit}3%select{│s}4 to align anonymous bit-field</td>
</tr>
<tr>
<td>-Wpadded</td>
<td>padding %select{struct│interface│class}0 %1 with %2 %select{byte│bit}3%select{│s}4 to align %5</td>
</tr>
<tr>
<td>-Wpadded</td>
<td>padding size of %0 with %1 %select{byte│bit}2%select{│s}3 to alignment boundary</td>
</tr>
<tr>
<td>-Wparentheses</td>
<td>using the result of an assignment as a condition without parentheses</td>
</tr>
<tr>
<td>-Wparentheses</td>
<td>%0 has lower precedence than %1 %1 will be evaluated first</td>
</tr>
<tr>
<td>-Wparentheses</td>
<td>operator ‘?:’ has lower precedence than ‘%0’ ‘%0’ will be evaluated first</td>
</tr>
<tr>
<td>-Wparentheses-equality</td>
<td>equality comparison with extraneous parentheses</td>
</tr>
<tr>
<td>-Wpointer-arith</td>
<td>subtraction of pointers to type %0 of zero size has undefined behavior</td>
</tr>
<tr>
<td>-Wpredefined-identifier-outside-function</td>
<td>predefined identifier is only valid inside function</td>
</tr>
<tr>
<td>-Wprivate-extern</td>
<td>use of <strong>private_extern</strong> on a declaration may not produce external symbol private to the linkage unit and is deprecated</td>
</tr>
<tr>
<td>-Wprotocol</td>
<td>method %0 in protocol not implemented</td>
</tr>
<tr>
<td>-Wprotocol-property-synthesis-ambiguity</td>
<td>property of type %0 was selected for synthesis</td>
</tr>
<tr>
<td>-Wreadonly-iboutlet-property</td>
<td>readonly IBOutlet property ‘%0’ when auto-synthesized may not work correctly with ‘nib’ loader</td>
</tr>
<tr>
<td>-Wreadonly-setter-attrs</td>
<td>property attributes ‘%0’ and ‘%1’ are mutually exclusive</td>
</tr>
<tr>
<td>-Wreceiver-expr</td>
<td>receiver type %0 is not ‘id’ or interface pointer, consider casting it to ‘id’</td>
</tr>
<tr>
<td>-Wreceiver-forward-class</td>
<td>receiver type %0 for instance message is a forward declaration</td>
</tr>
<tr>
<td>-Wreceiver-is-weak</td>
<td>“weak %select{receiver│property│implicit property}0 may be unpredictably set to nil</td>
</tr>
<tr>
<td>-Wreinterpret-base-class</td>
<td>‘reinterpret_cast’ %select{from│to}3 class %0 %select{to│from}3 its %select{virtual base│base at non-zero offset}2 %1 behaves differently from ‘static_cast’</td>
</tr>
<tr>
<td>-Wreorder</td>
<td>%select{field│base class}0 %1 will be initialized after %select{field│base}2 %3</td>
</tr>
<tr>
<td>-Wrequires-super-attribute</td>
<td>%0 attribute cannot be applied to %select{methods in protocols│dealloc}1</td>
</tr>
<tr>
<td>-Wreturn-stack-address</td>
<td>returning address of local temporary object</td>
</tr>
<tr>
<td>-Wreturn-stack-address</td>
<td>returning address of label, which is local</td>
</tr>
<tr>
<td>-Wreturn-stack-address</td>
<td>address of stack memory associated with local variable %0 returned</td>
</tr>
<tr>
<td>-Wreturn-stack-address</td>
<td>reference to stack memory associated with local variable %0 returned</td>
</tr>
<tr>
<td>-Wreturn-stack-address</td>
<td>returning reference to local temporary object</td>
</tr>
<tr>
<td>-Wreturn-type</td>
<td>control may reach end of non-void function</td>
</tr>
<tr>
<td>-Wreturn-type</td>
<td>non-void %select{function│method}1 %0 should return a value, DefaultError</td>
</tr>
<tr>
<td>-Wreturn-type</td>
<td>control reaches end of non-void function</td>
</tr>
<tr>
<td>-Wreturn-type-c-linkage</td>
<td>%0 has C-linkage specified, but returns incomplete type %1 which could be incompatible with C</td>
</tr>
<tr>
<td>-Wreturn-type-c-linkage</td>
<td>%0 has C-linkage specified, but returns user-defined type %1 which is incompatible with C</td>
</tr>
<tr>
<td>-Wsection</td>
<td>section does not match previous declaration</td>
</tr>
<tr>
<td>-Wselector</td>
<td>creating selector for nonexistent method %0</td>
</tr>
<tr>
<td>-Wselector-type-mismatch</td>
<td>multiple selectors named %0 found</td>
</tr>
<tr>
<td>-Wself-assign</td>
<td>explicitly assigning a variable of type %0 to itself</td>
</tr>
<tr>
<td>-Wself-assign-field</td>
<td>assigning %select{field│instance variable}0 to itself</td>
</tr>
<tr>
<td>-Wsentinel</td>
<td>“missing sentinel in %select{function call│method dispatch│block call}0</td>
</tr>
<tr>
<td>-Wsentinel</td>
<td>not enough variable arguments in %0 declaration to fit a sentinel</td>
</tr>
<tr>
<td>-Wshadow</td>
<td>declaration shadows a %select{“ “local variable│” “variable in %2│” “static data member of %2│” “field of %2}1</td>
</tr>
<tr>
<td>-Wshadow-ivar</td>
<td>local declaration of %0 hides instance variable</td>
</tr>
<tr>
<td>-Wshift-count-negative</td>
<td>shift count is negative</td>
</tr>
<tr>
<td>-Wshift-count-overflow</td>
<td>shift count = width of type</td>
</tr>
<tr>
<td>-Wshift-op-parentheses</td>
<td>operator ‘%0’ has lower precedence than ‘%1’ ‘%1’ will be evaluated first</td>
</tr>
<tr>
<td>-Wshift-overflow</td>
<td>signed shift result (%0) requires %1 bits to represent, but %2 only has %3 bits</td>
</tr>
<tr>
<td>-Wshift-sign-overflow</td>
<td>signed shift result (%0) sets the sign bit of the shift expression’s type (%1) and becomes negative</td>
</tr>
<tr>
<td>-Wshorten-64-to-32</td>
<td>implicit conversion loses integer precision: %0 to %1</td>
</tr>
<tr>
<td>-Wsign-compare</td>
<td>comparison of integers of different signs: %0 and %1</td>
</tr>
<tr>
<td>-Wsign-conversion</td>
<td>implicit conversion changes signedness: %0 to %1</td>
</tr>
<tr>
<td>-Wsign-conversion</td>
<td>operand of ? changes signedness: %0 to %1</td>
</tr>
<tr>
<td>-Wsizeof-array-argument</td>
<td>sizeof on array function parameter will return size of %0 instead of %1</td>
</tr>
<tr>
<td>-Wsizeof-array-decay</td>
<td>sizeof on pointer operation will return size of %0 instead of %1</td>
</tr>
<tr>
<td>-Wsizeof-pointer-memaccess</td>
<td>‘%0’ call operates on objects of type %1 while the size is based on a “ “different type %2</td>
</tr>
<tr>
<td>-Wsizeof-pointer-memaccess</td>
<td>argument to ‘sizeof’ in %0 call is the same pointer type %1 as the %select{destination│source}2 expected %3 or an explicit length</td>
</tr>
<tr>
<td>-Wsometimes-uninitialized</td>
<td>variable %0 is %select{used│captured}1 uninitialized whenever %select{‘%3’ condition is %select{true│false}4│’%3’ loop %select{is entered│exits because its condition is false}4│’%3’ loop %select{condition is true│exits because its condition is false}4│switch %3 is taken│its declaration is reached│%3 is called}2</td>
</tr>
<tr>
<td>-Wstatic-local-in-inline</td>
<td>non-constant static local variable in inline function may be different in different files</td>
</tr>
<tr>
<td>-Wstatic-self-init</td>
<td>static variable %0 is suspiciously used within its own initialization</td>
</tr>
<tr>
<td>-Wstrict-selector-match</td>
<td>multiple methods named %0 found</td>
</tr>
<tr>
<td>-Wstring-compare</td>
<td>result of comparison against %select{a string literal│@encode}0 is unspecified (use strncmp instead)</td>
</tr>
<tr>
<td>-Wstring-conversion</td>
<td>implicit conversion turns string literal into bool: %0 to %1</td>
</tr>
<tr>
<td>-Wstring-plus-char</td>
<td>adding %0 to a string pointer does not append to the string</td>
</tr>
<tr>
<td>-Wstring-plus-int</td>
<td>adding %0 to a string does not append to the string</td>
</tr>
<tr>
<td>-Wstrlcpy-strlcat-size</td>
<td>size argument in %0 call appears to be size of the source expected the size of the destination</td>
</tr>
<tr>
<td>-Wstrncat-size</td>
<td>the value of the size argument in ‘strncat’ is too large, might lead to a “ “buffer overflow</td>
</tr>
<tr>
<td>-Wstrncat-size</td>
<td>size argument in ‘strncat’ call appears “ “to be size of the source</td>
</tr>
<tr>
<td>-Wstrncat-size</td>
<td>the value of the size argument to ‘strncat’ is wrong</td>
</tr>
<tr>
<td>-Wsuper-class-method-mismatch</td>
<td>method parameter type %diff{doesnotmatchsuperclassmethodparametertype│does not match super class method parameter type}0,1</td>
</tr>
<tr>
<td>-Wswitch</td>
<td>overflow converting case value to switch condition type (%0 to %1)</td>
</tr>
<tr>
<td>-Wswitch</td>
<td>case value not in enumerated type %0</td>
</tr>
<tr>
<td>-Wswitch</td>
<td>%0 enumeration values not handled in switch: %1, %2, %3…</td>
</tr>
<tr>
<td>-Wswitch</td>
<td>enumeration values %0 and %1 not handled in switch</td>
</tr>
<tr>
<td>-Wswitch</td>
<td>enumeration value %0 not handled in switch</td>
</tr>
<tr>
<td>-Wswitch</td>
<td>enumeration values %0, %1, and %2 not handled in switch</td>
</tr>
<tr>
<td>-Wswitch-enum</td>
<td>enumeration values %0, %1, and %2 not explicitly handled in switch</td>
</tr>
<tr>
<td>-Wswitch-enum</td>
<td>enumeration values %0 and %1 not explicitly handled in switch</td>
</tr>
<tr>
<td>-Wswitch-enum</td>
<td>%0 enumeration values not explicitly handled in switch: %1, %2, %3…</td>
</tr>
<tr>
<td>-Wswitch-enum</td>
<td>enumeration value %0 not explicitly handled in switch</td>
</tr>
<tr>
<td>-Wtautological-compare</td>
<td>comparison of %0 unsigned%select{│ enum}2 expression is always %1</td>
</tr>
<tr>
<td>-Wtautological-compare</td>
<td>%select{self-│array }0comparison always evaluates to %select{false│true│a constant}1</td>
</tr>
<tr>
<td>-Wtautological-compare</td>
<td>comparison of unsigned%select{│ enum}2 expression %0 is always %1</td>
</tr>
<tr>
<td>-Wtautological-constant-out-of-range-compare</td>
<td>comparison of constant %0 with expression of type %1 is always %select{false│true}2</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>locking ‘%0’ that is already locked</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>cannot call function ‘%0’ while mutex ‘%1’ is locked</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>%select{reading│writing}2 the value pointed to by ‘%0’ requires locking %select{‘%1’│’%1’ exclusively}2</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>unlocking ‘%0’ that was not locked</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>mutex ‘%0’ is locked exclusively and shared in the same scope</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>calling function ‘%0’ requires %select{shared│exclusive}2 lock on ‘%1’</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>%select{reading│writing}2 variable ‘%0’ requires locking %select{‘%1’│’%1’ exclusively}2</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>cannot resolve lock expression</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>expecting mutex ‘%0’ to be locked at the end of function</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>mutex ‘%0’ is not locked on every path through here</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>%select{reading│writing}1 the value pointed to by ‘%0’ requires locking %select{any mutex│any mutex exclusively}1</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>%select{reading│writing}1 variable ‘%0’ requires locking %select{any mutex│any mutex exclusively}1</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>mutex ‘%0’ is still locked at the end of function</td>
</tr>
<tr>
<td>-Wthread-safety-analysis</td>
<td>expecting mutex ‘%0’ to be locked at start of each loop</td>
</tr>
<tr>
<td>-Wthread-safety-attributes</td>
<td>ignoring %0 attribute because its argument is invalid</td>
</tr>
<tr>
<td>-Wthread-safety-attributes</td>
<td>%0 attribute only applies to %select{fields and global variables│functions and methods│classes and structs}1</td>
</tr>
<tr>
<td>-Wthread-safety-attributes</td>
<td>%0 attribute requires arguments that are class type or point to class type type here is ‘%1’</td>
</tr>
<tr>
<td>-Wthread-safety-attributes</td>
<td>%0 attribute can only be applied in a context annotated with ‘lockable’ attribute</td>
</tr>
<tr>
<td>-Wthread-safety-attributes</td>
<td>%0 attribute requires arguments whose type is annotated with ‘lockable’ attribute type here is ‘%1’</td>
</tr>
<tr>
<td>-Wthread-safety-attributes</td>
<td>‘%0’ only applies to pointer types type here is %1</td>
</tr>
<tr>
<td>-Wthread-safety-beta</td>
<td>Thread safety beta warning.</td>
</tr>
<tr>
<td>-Wthread-safety-precise</td>
<td>%select{reading│writing}2 the value pointed to by ‘%0’ requires locking %select{‘%1’│’%1’ exclusively}2</td>
</tr>
<tr>
<td>-Wthread-safety-precise</td>
<td>%select{reading│writing}2 variable ‘%0’ requires locking %select{‘%1’│’%1’ exclusively}2</td>
</tr>
<tr>
<td>-Wthread-safety-precise</td>
<td>calling function ‘%0’ requires %select{shared│exclusive}2 lock on ‘%1’</td>
</tr>
<tr>
<td>-Wtype-safety</td>
<td>this type tag was not designed to be used with this function</td>
</tr>
<tr>
<td>-Wtype-safety</td>
<td>specified %0 type tag requires a null pointer</td>
</tr>
<tr>
<td>-Wtype-safety</td>
<td>argument type %0 doesn’t match specified ‘%1’ type tag %select{that requires %3│}2</td>
</tr>
<tr>
<td>-Wundeclared-selector</td>
<td>undeclared selector %0 did you mean %1?</td>
</tr>
<tr>
<td>-Wundeclared-selector</td>
<td>undeclared selector %0</td>
</tr>
<tr>
<td>-Wundefined-inline</td>
<td>inline function %q0 is not defined</td>
</tr>
<tr>
<td>-Wundefined-internal</td>
<td>%select{function│variable}0 %q1 has internal linkage but is not defined</td>
</tr>
<tr>
<td>-Wundefined-reinterpret-cast</td>
<td>dereference of type %1 that was reinterpret_cast from type %0 has undefined behavior</td>
</tr>
<tr>
<td>-Wundefined-reinterpret-cast</td>
<td>reinterpret_cast from %0 to %1 has undefined behavior</td>
</tr>
<tr>
<td>-Wuninitialized</td>
<td>reference %0 is not yet bound to a value when used within its own initialization</td>
</tr>
<tr>
<td>-Wuninitialized</td>
<td>field %0 is uninitialized when used here</td>
</tr>
<tr>
<td>-Wuninitialized</td>
<td>block pointer variable %0 is uninitialized when captured by block</td>
</tr>
<tr>
<td>-Wuninitialized</td>
<td>variable %0 is uninitialized when used within its own initialization</td>
</tr>
<tr>
<td>-Wuninitialized</td>
<td>variable %0 is uninitialized when %select{used here│captured by block}1</td>
</tr>
<tr>
<td>-Wuninitialized</td>
<td>reference %0 is not yet bound to a value when used here</td>
</tr>
<tr>
<td>-Wunneeded-internal-declaration</td>
<td>%select{function│variable}0 %1 is not needed and will not be emitted</td>
</tr>
<tr>
<td>-Wunneeded-internal-declaration</td>
<td>‘static’ function %0 declared in header file should be declared ‘static inline’</td>
</tr>
<tr>
<td>-Wunneeded-member-function</td>
<td>member function %0 is not needed and will not be emitted</td>
</tr>
<tr>
<td>-Wunreachable-code</td>
<td>will never be executed</td>
</tr>
<tr>
<td>-Wunsequenced</td>
<td>multiple unsequenced modifications to %0</td>
</tr>
<tr>
<td>-Wunsequenced</td>
<td>unsequenced modification and access to %0</td>
</tr>
<tr>
<td>-Wunsupported-friend</td>
<td>dependent nested name specifier ‘%0’ for friend template declaration is not supported ignoring this friend declaration</td>
</tr>
<tr>
<td>-Wunsupported-friend</td>
<td>dependent nested name specifier ‘%0’ for friend class declaration is not supported turning off access control for %1</td>
</tr>
<tr>
<td>-Wunsupported-visibility</td>
<td>target does not support ‘protected’ visibility using ‘default’</td>
</tr>
<tr>
<td>-Wunused-comparison</td>
<td>%select{equality│inequality}0 comparison result unused</td>
</tr>
<tr>
<td>-Wunused-const-variable</td>
<td>unused variable %0</td>
</tr>
<tr>
<td>-Wunused-exception-parameter</td>
<td>unused exception parameter %0</td>
</tr>
<tr>
<td>-Wunused-function</td>
<td>unused function %0</td>
</tr>
<tr>
<td>-Wunused-label</td>
<td>unused label %0</td>
</tr>
<tr>
<td>-Wunused-member-function</td>
<td>unused member function %0</td>
</tr>
<tr>
<td>-Wunused-parameter</td>
<td>unused parameter %0</td>
</tr>
<tr>
<td>-Wunused-private-field</td>
<td>private field %0 is not used</td>
</tr>
<tr>
<td>-Wunused-property-ivar</td>
<td>ivar %0 which backs the property is not referenced in this property’s accessor</td>
</tr>
<tr>
<td>-Wunused-result</td>
<td>ignoring return value of function declared with warn_unused_result attribute</td>
</tr>
<tr>
<td>-Wunused-value</td>
<td>ignoring return value of function declared with %0 attribute</td>
</tr>
<tr>
<td>-Wunused-value</td>
<td>expression result unused should this cast be to ‘void’?</td>
</tr>
<tr>
<td>-Wunused-value</td>
<td>expression result unused</td>
</tr>
<tr>
<td>-Wunused-variable</td>
<td>unused variable %0</td>
</tr>
<tr>
<td>-Wunused-volatile-lvalue</td>
<td>expression result unused assign into a variable to force a volatile load</td>
</tr>
<tr>
<td>-Wused-but-marked-unused</td>
<td>%0 was marked unused but was used</td>
</tr>
<tr>
<td>-Wuser-defined-literals</td>
<td>user-defined literal suffixes not starting with ‘_’ are reserved%select{ no literal will invoke this operator│}0</td>
</tr>
<tr>
<td>-Wvarargs</td>
<td>second parameter of ‘va_start’ not last named argument</td>
</tr>
<tr>
<td>-Wvarargs</td>
<td>‘va_start’ has undefined behavior with reference types</td>
</tr>
<tr>
<td>-Wvarargs</td>
<td>second argument to ‘va_arg’ is of promotable type %0 this va_arg has undefined behavior because arguments will be promoted to %1</td>
</tr>
<tr>
<td>-Wvector-conversion</td>
<td>incompatible vector types %select[%diff[assigning to from│assigning to different types]0,1│%diff[passing toparameteroftype│passing to parameter of different type]0,1│%diff[returning fromafunctionwithresulttype│returning from function with different return type]0,1│%diff[converting totype│converting between types]0,1│%diff[initializing withanexpressionoftype│initializing with expression of different type]0,1│%diff[sending toparameteroftype│sending to parameter of different type]0,1│%diff[casting totype│casting between types]0,1]2</td>
</tr>
<tr>
<td>-Wvexing-parse</td>
<td>parentheses were disambiguated as a function declaration</td>
</tr>
<tr>
<td>-Wvexing-parse</td>
<td>empty parentheses interpreted as a function declaration</td>
</tr>
<tr>
<td>-Wvisibility</td>
<td>declaration of %0 will not be visible outside of this function</td>
</tr>
<tr>
<td>-Wvisibility</td>
<td>redefinition of %0 will not be visible outside of this function</td>
</tr>
<tr>
<td>-Wvla</td>
<td>variable length array used</td>
</tr>
<tr>
<td>-Wvla-extension</td>
<td>variable length arrays are a C99 feature</td>
</tr>
<tr>
<td>-Wweak-template-vtables</td>
<td>explicit template instantiation %0 will emit a vtable in every translation unit</td>
</tr>
<tr>
<td>-Wweak-vtables</td>
<td>%0 has no out-of-line virtual method definitions; its vtable will be emitted in every translation unit</td>
</tr>
</tbody>
</table>
<h3 id="Lexer-Warnings"><a href="#Lexer-Warnings" class="headerlink" title="Lexer Warnings"></a>Lexer Warnings</h3><table>
<thead>
<tr>
<th>Warning</th>
<th>Message</th>
</tr>
</thead>
<tbody>
<tr>
<td>-W#pragma-messages</td>
<td>%0</td>
</tr>
<tr>
<td>-W#warnings</td>
<td>%0</td>
</tr>
<tr>
<td>-W#warnings</td>
<td>%0</td>
</tr>
<tr>
<td>-Wambiguous-macro</td>
<td>ambiguous expansion of macro %0</td>
</tr>
<tr>
<td>-Wauto-import</td>
<td>treating #%select{include│import│include_next│__include_macros}0 as an import of module ‘%1’</td>
</tr>
<tr>
<td>-Wbackslash-newline-escape</td>
<td>backslash and newline separated by space</td>
</tr>
<tr>
<td>-Wc++11-compat</td>
<td>identifier after literal will be treated as a user-defined literal suffix in C++11</td>
</tr>
<tr>
<td>-Wc++11-compat</td>
<td>‘%0’ is a keyword in C++11</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>digit separators are incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat-pedantic</td>
<td>binary integer literals are incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>raw string literals are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>unicode literals are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>universal character name referring to a control character is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>‘::’ is treated as digraph ‘:’ (aka ‘[‘) followed by ‘:’ in C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>using this character in an identifier is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>specifying character ‘%0’ with a universal character name is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>variadic macros are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>#line number greater than 32767 is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>C++98 requires newline at end of file</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>empty macro arguments are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc99-compat</td>
<td>unicode literals are incompatible with C99</td>
</tr>
<tr>
<td>-Wc99-compat</td>
<td>%select{using this character in an identifier│starting an identifier with this character}0 is incompatible with C99</td>
</tr>
<tr>
<td>-Wcomment</td>
<td>‘/*’ within block comment</td>
</tr>
<tr>
<td>-Wcomment</td>
<td>escaped newline between */ characters at block comment end</td>
</tr>
<tr>
<td>-Wdisabled-macro-expansion</td>
<td>disabled expansion of recursive macro</td>
</tr>
<tr>
<td>-Wheader-guard</td>
<td>%0 is used as a header guard here, followed by #define of a different macro</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>unknown attribute ‘%0’</td>
</tr>
<tr>
<td>-Wincomplete-module</td>
<td>header ‘%0’ is included in module ‘%1’ but not listed in module map</td>
</tr>
<tr>
<td>-Wincomplete-umbrella</td>
<td>umbrella header for module ‘%0’ does not include header ‘%1’</td>
</tr>
<tr>
<td>-Winvalid-token-paste</td>
<td>pasting formed ‘%0’, an invalid preprocessing token, DefaultError</td>
</tr>
<tr>
<td>-Wmalformed-warning-check</td>
<td>__has_warning expected option name (e.g. \”-Wundef\”)</td>
</tr>
<tr>
<td>-Wnewline-eof</td>
<td>no newline at end of file</td>
</tr>
<tr>
<td>-Wnull-character</td>
<td>null character ignored</td>
</tr>
<tr>
<td>-Wnull-character</td>
<td>null character(s) preserved in string literal</td>
</tr>
<tr>
<td>-Wnull-character</td>
<td>null character(s) preserved in character literal</td>
</tr>
<tr>
<td>-Wtrigraphs</td>
<td>ignored trigraph would end block comment</td>
</tr>
<tr>
<td>-Wtrigraphs</td>
<td>trigraph ignored</td>
</tr>
<tr>
<td>-Wundef</td>
<td>%0 is not defined, evaluates to 0</td>
</tr>
<tr>
<td>-Wunicode</td>
<td>universal character names are only valid in C99 or C++ treating as ‘\‘ followed by identifier</td>
</tr>
<tr>
<td>-Wunicode</td>
<td>\%0 used with no following hex digits treating as ‘\‘ followed by identifier</td>
</tr>
<tr>
<td>-Wunicode</td>
<td>incomplete universal character name treating as ‘\‘ followed by identifier</td>
</tr>
<tr>
<td>-Wunicode</td>
<td>universal character name refers to a surrogate character</td>
</tr>
<tr>
<td>-Wunknown-pragmas</td>
<td>unknown pragma ignored</td>
</tr>
<tr>
<td>-Wunknown-pragmas</td>
<td>pragma STDC FENV_ACCESS ON is not supported, ignoring pragma</td>
</tr>
<tr>
<td>-Wunused-macros</td>
<td>macro is not used</td>
</tr>
</tbody>
</table>
<h3 id="Parser-Warnings"><a href="#Parser-Warnings" class="headerlink" title="Parser Warnings"></a>Parser Warnings</h3><table>
<thead>
<tr>
<th>Warning</th>
<th>Message</th>
</tr>
</thead>
<tbody>
<tr>
<td>-Warc-bridge-casts-disallowed-in-nonarc</td>
<td>‘%0’ casts have no effect when not using ARC</td>
</tr>
<tr>
<td>-Wattributes</td>
<td>unknown __declspec attribute %0 ignored</td>
</tr>
<tr>
<td>-Wavailability</td>
<td>‘unavailable’ availability overrides all other availability information</td>
</tr>
<tr>
<td>-Wc++11-compat</td>
<td>use of right-shift operator (‘’) in template argument will require parentheses in C++11</td>
</tr>
<tr>
<td>-Wc++11-compat</td>
<td>‘auto’ storage class specifier is redundant and incompatible with C++11</td>
</tr>
<tr>
<td>-Wc++98-c++11-compat</td>
<td>‘decltype(auto)’ type specifier is incompatible with C++ standards before C++1y</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>range-based for loop is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>alias declarations are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>in-class initialization of non-static data members is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>defaulted function definitions are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>rvalue references are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>reference qualifiers on functions are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>inline namespaces are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>generalized initializer lists are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>trailing return types are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>enumeration types with a fixed underlying type are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>alignof expressions are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>‘%0’ keyword is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>‘decltype’ type specifier is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>deleted function definitions are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>consecutive right angle brackets are incompatible with C++98 (use ‘&gt; &gt;’)</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>static_assert declarations are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>scoped enumerations are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>lambda expressions are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>attributes are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>‘alignas’ is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>noexcept specifications are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>literal operators are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>noexcept expressions are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat</td>
<td>‘nullptr’ is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>extra ‘’ outside of a function is incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>extern templates are incompatible with C++98</td>
</tr>
<tr>
<td>-Wc++98-compat-pedantic</td>
<td>commas at the end of enumerator lists are incompatible with C++98</td>
</tr>
<tr>
<td>-Wdangling-else</td>
<td>add explicit braces to avoid dangling else</td>
</tr>
<tr>
<td>-Wdeprecated</td>
<td>Use of ‘long’ with ‘__vector’ is deprecated</td>
</tr>
<tr>
<td>-Wdeprecated-declarations</td>
<td>use of C-style parameters in Objective-C method declarations is deprecated</td>
</tr>
<tr>
<td>-Wdeprecated-register</td>
<td>‘register’ storage class specifier is deprecated</td>
</tr>
<tr>
<td>-Wduplicate-decl-specifier</td>
<td>duplicate ‘%0’ declaration specifier</td>
</tr>
<tr>
<td>-Wextra-semi</td>
<td>extra ‘;’ after member function definition</td>
</tr>
<tr>
<td>-Wextra-tokens</td>
<td>“extra tokens at the end of ‘#pragma omp %0’ are ignored</td>
</tr>
<tr>
<td>-Wgcc-compat</td>
<td>GCC does not allow %0 attribute in this position on a function definition</td>
</tr>
<tr>
<td>-Wignored-attributes</td>
<td>attribute %0 ignored, because it is not attached to a declaration</td>
</tr>
<tr>
<td>-Wmicrosoft-exists</td>
<td>dependent %select{<strong>if_not_exists│</strong>if_exists}0 declarations are ignored</td>
</tr>
<tr>
<td>-Wmissing-selector-name</td>
<td>%0 used as the name of the previous parameter rather than as part of the selector</td>
</tr>
<tr>
<td>-Wsemicolon-before-method-body</td>
<td>semicolon before method body is ignored</td>
</tr>
<tr>
<td>-Wsource-uses-openmp</td>
<td>“unexpected ‘#pragma omp …’ in program</td>
</tr>
<tr>
<td>-Wstatic-inline-explicit-instantiation</td>
<td>ignoring ‘%select{static│inline}0’ keyword on explicit template instantiation</td>
</tr>
</tbody>
</table>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS开发检测项目中哪个库包含了idfa]]></title>
      <url>/2018/4/8/iOS%E5%BC%80%E5%8F%91%E6%A3%80%E6%B5%8B%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%93%AA%E4%B8%AA%E5%BA%93%E5%8C%85%E5%90%AB%E4%BA%86idfa/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<p>今天上架的时候被提醒项目中包含idfa，请删除后重新提交。当时就纳闷了，明明sharesdk选的是无idfa的，之前项目提交都是没有问题的，怎么这回就出问题了，想想也没有其他可能用到idfa的第三方库，于是就去查找看看有没有办法可以检测项目中使用了idfa的第三方库，功夫不费有心人，方法就是在终端中进入项目目录，然后敲入命令：<br><code>grep -r advertisingIdentifier .</code><br>后等待一会如果有额外输出就会在终端中显示，没有包含的话终端就不会有任何打印，最后的”.”可不能省略哦。</p>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> appstore </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[iOS崩溃处理]]></title>
      <url>/2018/3/12/iOS%E5%B4%A9%E6%BA%83%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有代码的地方，就可能会有崩溃。定位崩溃问题的方法：最直接的，通过重现的步骤去调适；但是，有时候测试无法确定崩溃的步骤，或者崩溃是线上用户发生的，这些情况下，我们仍然可以通过崩溃日志，知道崩溃的原因和崩溃的代码行，从而修复问题。</p>
<ul>
<li>什么是崩溃？</li>
</ul>
<p>Application crashes: An application typically crashes when it performs an operation which is not allowed by the operating system.<br>Server crashes, Operating system crashes, …</p>
<ul>
<li>定位崩溃原因的方法有哪些？</li>
</ul>
<p>线索1：重现步骤</p>
<p>线索2：崩溃日志（知道崩溃的原因、崩溃的代码行等信息）</p>
<p>那么，本文就来说说崩溃日志。</p>
<a id="more"></a>
<h1 id="获取日志的几种方法"><a href="#获取日志的几种方法" class="headerlink" title="获取日志的几种方法"></a>获取日志的几种方法</h1><p>在iOS系统中，当应用崩溃的时候，系统会生成一个崩溃日志，保存在设备上。</p>
<h3 id="1-直接在手机上查看"><a href="#1-直接在手机上查看" class="headerlink" title="1.直接在手机上查看"></a>1.直接在手机上查看</h3><p>在手机端设置里查看，如图是iOS10的界面：<br><img src="http://upload-images.jianshu.io/upload_images/5890308-3308a5a9ccc61ba1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="2-手机连PC用iTunes导出"><a href="#2-手机连PC用iTunes导出" class="headerlink" title="2.手机连PC用iTunes导出"></a>2.手机连PC用iTunes导出</h3><p>iTunes同步资料库，然后去PC对应目录下，找文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Mac OS X:   ~/Library/Logs/CrashReporter/MobileDevice/</div><div class="line">Windows XP:   C://Documents and Settings/Application Data/Apple Computer/Logs/Crash/Reporter/MobileDevice</div><div class="line">Windows Vista or 7:    C://Users/AppData/Roaming/Apple Computer/Logs/Crash/Reporter/MobileDevice</div></pre></td></tr></table></figure></p>
<h3 id="3-手机连XCode导出"><a href="#3-手机连XCode导出" class="headerlink" title="3.手机连XCode导出"></a>3.手机连XCode导出</h3><p>Simulator-Hardware-Device-Manage Devices<br><img src="http://upload-images.jianshu.io/upload_images/5890308-07925c9549337347.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5890308-7b4a84a3698d4a90.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="4-XCode中，对提交商店的应用，查看Crashes"><a href="#4-XCode中，对提交商店的应用，查看Crashes" class="headerlink" title="4.XCode中，对提交商店的应用，查看Crashes"></a>4.XCode中，对提交商店的应用，查看Crashes</h3><p>xcode-&gt;Window-&gt;Organizer-&gt;Crashes<br><img src="http://upload-images.jianshu.io/upload_images/5890308-68c32a7833ebe9c6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="5-用iTunes-Connect（提交商店的应用）"><a href="#5-用iTunes-Connect（提交商店的应用）" class="headerlink" title="5.用iTunes Connect（提交商店的应用）"></a>5.用iTunes Connect（提交商店的应用）</h3><p>如果应用提交到App Store了，还可以从iTunes Connect（<a href="https://itunesconnect.apple.com/）上获取到用户的崩溃日志.。通过应用提交者的apple" target="_blank" rel="external">https://itunesconnect.apple.com/）上获取到用户的崩溃日志.。通过应用提交者的apple</a> id登录，管理提交的应用，应用细节中有一个崩溃报告<br><img src="http://upload-images.jianshu.io/upload_images/5890308-bfa6c65a0cf14abe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><img src="http://upload-images.jianshu.io/upload_images/5890308-3eea9f3c830eec32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="6-app植入第三方sdk，配合第三方平台查看"><a href="#6-app植入第三方sdk，配合第三方平台查看" class="headerlink" title="6.app植入第三方sdk，配合第三方平台查看"></a>6.app植入第三方sdk，配合第三方平台查看</h3><p>很多第三方平台，（比如蒲公英、fabric、网易云捕…）提供sdk和管理后台。</p>
<p>只需要使用它们的sdk，并添加几行代码，app运行时，sdk会将应用Crash数据自动上传到后台，后台会进行相应的统计和分析。并给出产品各个版本的崩溃数，崩溃率，影响用户数，崩溃的机型、系统 等。</p>
<h3 id="7-使用苹果的api，自己实现抓取崩溃信息，提交到自己写的后台"><a href="#7-使用苹果的api，自己实现抓取崩溃信息，提交到自己写的后台" class="headerlink" title="7.使用苹果的api，自己实现抓取崩溃信息，提交到自己写的后台"></a>7.使用苹果的api，自己实现抓取崩溃信息，提交到自己写的后台</h3><p>和6是一样的，有这些现成的情况下，不是很必要自己重新再写一个，但是可以简单了解一下其中的关键原理。</p>
<h5 id="1-iOS-SDK中提供了一个现成的函数NSSetUncaughtExceptionHandler-用来做异常处理。"><a href="#1-iOS-SDK中提供了一个现成的函数NSSetUncaughtExceptionHandler-用来做异常处理。" class="headerlink" title="1.iOS SDK中提供了一个现成的函数NSSetUncaughtExceptionHandler 用来做异常处理。"></a>1.iOS SDK中提供了一个现成的函数NSSetUncaughtExceptionHandler 用来做异常处理。</h5><p><img src="http://upload-images.jianshu.io/upload_images/5890308-2a06ed2f0a89f2a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">void HandleException(NSException*exception)   //捕捉到异常时执行的方法</div><div class="line">&#123;</div><div class="line">    //异常的堆栈信息</div><div class="line">    NSArray*stackArray = [exception callStackSymbols];</div><div class="line"></div><div class="line">    //出现异常的原因</div><div class="line">    NSString*reason = [exception reason];</div><div class="line">    //异常名称</div><div class="line">    NSString*name = [exception name];</div><div class="line">    NSString*exceptionInfo = [NSStringstringWithFormat:@&quot;Exception reason：%@\nException name：%@\nException stack：%@&quot;,name, reason, stackArray];</div><div class="line">    NSLog(@&quot;%@&quot;, exceptionInfo);</div><div class="line">    [UncaughtExceptionHandler saveCrash:exceptionInfo]; //自己实现一个记录下这些信息的方法，作者是实现了一个写文本文件的方法</div><div class="line">&#125;</div><div class="line"></div><div class="line">void InstallUncaughtExceptionHandler(void)    //注册一些抓取函数，在APPDelegate中didFinishLaunchingWithOptions调用</div><div class="line">&#123;</div><div class="line">    NSSetUncaughtExceptionHandler(&amp;HandleException);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="2-但NSSetUncaughtExceptionHandler功能非常有限，而引起崩溃的原因如：内存访问错误，重复释放等错误并不能被抓到，而这种错误它抛出的是Signal，因此做一个Signal处理可以抓到这一类的崩溃。"><a href="#2-但NSSetUncaughtExceptionHandler功能非常有限，而引起崩溃的原因如：内存访问错误，重复释放等错误并不能被抓到，而这种错误它抛出的是Signal，因此做一个Signal处理可以抓到这一类的崩溃。" class="headerlink" title="2.但NSSetUncaughtExceptionHandler功能非常有限，而引起崩溃的原因如：内存访问错误，重复释放等错误并不能被抓到，而这种错误它抛出的是Signal，因此做一个Signal处理可以抓到这一类的崩溃。"></a>2.但NSSetUncaughtExceptionHandler功能非常有限，而引起崩溃的原因如：内存访问错误，重复释放等错误并不能被抓到，而这种错误它抛出的是Signal，因此做一个Signal处理可以抓到这一类的崩溃。</h5><p><img src="http://upload-images.jianshu.io/upload_images/5890308-c0541ef4388e3b41.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">void SignalExceptionHandler(intsignal) //抓取到Signal异常时，执行的方法</div><div class="line">&#123;</div><div class="line">    NSMutableString*mstr = [[NSMutableString alloc] init];</div><div class="line">    [mstr appendString:@&quot;Stack:\n&quot;];</div><div class="line">    void* callstack[128];</div><div class="line">    int i, frames =backtrace(callstack,128);</div><div class="line">    char** strs =backtrace_symbols(callstack, frames);</div><div class="line">    for(i =0; i&lt;frames;++i）&#123;</div><div class="line">        [mstr appendFormat:@&quot;%s\n&quot;, strs[i]];</div><div class="line">    &#125;</div><div class="line">    [SignalHandler saveCrash:mstr]; //同上，自己实现一个记录下这些信息的方法，作者是实现了一个写文本文件的方法</div><div class="line">&#125;</div><div class="line"></div><div class="line">void InstallSignalHandler(void) //注册抓取函数和抓取的Signal类型，在APPDelegate中didFinishLaunchingWithOptions调用</div><div class="line">&#123;</div><div class="line">    signal(SIGHUP,SignalExceptionHandler);</div><div class="line">    signal(SIGINT,SignalExceptionHandler);</div><div class="line">    signal(SIGQUIT,SignalExceptionHandler);</div><div class="line">    signal(SIGABRT,SignalExceptionHandler);</div><div class="line">    signal(SIGILL,SignalExceptionHandler);</div><div class="line">    signal(SIGSEGV,SignalExceptionHandler);</div><div class="line">    signal(SIGFPE,SignalExceptionHandler);</div><div class="line">    signal(SIGBUS,SignalExceptionHandler);</div><div class="line">    signal(SIGPIPE,SignalExceptionHandler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="3-写完上面两个类，在APPDelegate中didFinishLaunchingWithOptions调用"><a href="#3-写完上面两个类，在APPDelegate中didFinishLaunchingWithOptions调用" class="headerlink" title="3.写完上面两个类，在APPDelegate中didFinishLaunchingWithOptions调用"></a>3.写完上面两个类，在APPDelegate中didFinishLaunchingWithOptions调用</h5><p><img src="http://upload-images.jianshu.io/upload_images/5890308-aa96a17c73420879.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication*)application didFinishLaunchingWithOptions:(NSDictionary*)launchOptions &#123;</div><div class="line">    InstallSignalHandler();</div><div class="line">    InstallUncaughtExceptionHandler();</div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-可以写一个demo，按钮函数包含一些崩溃的代码，然后就会发现抓取的崩溃的函数，被执行了，崩溃信息成功输出到了指定的文本文件中。"><a href="#4-可以写一个demo，按钮函数包含一些崩溃的代码，然后就会发现抓取的崩溃的函数，被执行了，崩溃信息成功输出到了指定的文本文件中。" class="headerlink" title="4.可以写一个demo，按钮函数包含一些崩溃的代码，然后就会发现抓取的崩溃的函数，被执行了，崩溃信息成功输出到了指定的文本文件中。"></a>4.可以写一个demo，按钮函数包含一些崩溃的代码，然后就会发现抓取的崩溃的函数，被执行了，崩溃信息成功输出到了指定的文本文件中。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (IBAction)buttonClick:(UIButton*)sender &#123;    //1.信号量</div><div class="line">    int list[2]=&#123;1,2&#125;;</div><div class="line">    int*p = list;</div><div class="line">    free(p);</div><div class="line">    p[1] =5;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (IBAction)buttonOCException:(UIButton*)sender&#123;        //2.ios崩溃</div><div class="line">    NSArray*array=@[@&quot;tom&quot;,@&quot;xxx&quot;,@&quot;ooo&quot;];</div><div class="line">    [array objectAtIndex:5];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>5.得到了关键的堆栈信息，和崩溃原因</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5890308-7eb48995c17fbccd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>到这里，已经知道了，怎么获得到这些信息。下面继续讲一下，怎么根据这些信息，定位到是哪里崩溃的，以及其中可能遇到的一些问题。</p>
<h1 id="如何读懂、解析日志"><a href="#如何读懂、解析日志" class="headerlink" title="如何读懂、解析日志"></a>如何读懂、解析日志</h1><h3 id="1-崩溃日志提供的信息"><a href="#1-崩溃日志提供的信息" class="headerlink" title="1.崩溃日志提供的信息"></a>1.崩溃日志提供的信息</h3><p><img src="http://upload-images.jianshu.io/upload_images/5890308-544f172d550c7707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>从手机直接捞出来的日志，很有可能长这样，一推十六进制的，看不出有效信息。那么问题来了，怎么样转换为看得懂的信息呢？</p>
<h3 id="2-认识符号文件"><a href="#2-认识符号文件" class="headerlink" title="2.认识符号文件"></a>2.认识符号文件</h3><p>符号文件是保存 16 进制函数地址映射信息的中转文件，符号集中存储着文件名、方法名、行号的信息.</p>
<p>符号文件和崩溃日志，具有一一对应的关系。</p>
<p>如何确定符合文件A和崩溃日志B是一一对应的？</p>
<p>在崩溃日志中会记录一个UUID；用一些工具（比如dwarfdump），可以查询符号文件的UUID；如果是一致的，那就说明这两个文件的一对对应的符号文件和崩溃日志，可以用这个符号文件解析这个崩溃日志。</p>
<p>然后，用dwarfdump、atos等工具，可以将崩溃日志，通过对应的符号文件，将十六进制数通过查符号表，转化为工程中的方法名，代码行号。</p>
<p>比如：</p>
<p>崩溃日志中有一段：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5890308-7d682792af84ab12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>然后，用dwarfdump命令<br>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dwarfdump --uuid Your.app.dSYM</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/5890308-a83069318d68017c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>对比两个uuid一致，就对上了。</p>
<p>最后，用symbolicatecrash工具，解析崩溃日志</p>
<p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /Users/yourMac/Desktop/崩溃文件夹</div><div class="line">symbolicatecrash ./*.crash ./*.app.dSYM &gt; symbol.crash</div></pre></td></tr></table></figure></p>
<p>就得到了崩溃日志。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5890308-9504a8ef3c498051.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<h3 id="3-解析的原理"><a href="#3-解析的原理" class="headerlink" title="3.解析的原理"></a>3.解析的原理</h3><h5 id="（1）-原始的崩溃文件："><a href="#（1）-原始的崩溃文件：" class="headerlink" title="（1）-原始的崩溃文件："></a>（1）-原始的崩溃文件：</h5><p>原始的崩溃文件其中一行，拿出来讲解</p>
<p>3 UncaughtExceptionDemo0x00dabe0 0x00d300e + 31698</p>
<p>序号  进程名                  崩溃时的堆栈地址    运行时起始地址 + 偏移量</p>
<p>应用崩溃发生时的堆栈地址为0x00dabe0，该进程的运行时起始地址是0x00d300e，崩溃处距离进程起始地址的偏移量为十进制的31698(对应十六进制为0x0007bd2)。</p>
<p>三者对应关系： 0x00dabe0 =0x00d300e+ 0x0007bd2</p>
<p>(崩溃时的堆栈地址= 运行时起始地址 + 偏移量)</p>
<p>接着，去符号表中查询</p>
<h5 id="（2）-获取符号表起始地址"><a href="#（2）-获取符号表起始地址" class="headerlink" title="（2）-获取符号表起始地址"></a>（2）-获取符号表起始地址</h5><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$otool -l Your.app.dSYM/Contents/Resources/DWARF/Your</div></pre></td></tr></table></figure></p>
<p>结果</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5890308-d4bd4a2edfb7b114.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>其中vmaddr = 0x00004000 就是符号表中的起始地址。</p>
<p>符号表崩溃地址 = 符号表起始地址 + 偏移量</p>
<p>= 0x4000 + 0x7bd2</p>
<p>= 0xbbd2</p>
<p>得到符号表中的崩溃地址</p>
<h5 id="（3）-提取-debug-info"><a href="#（3）-提取-debug-info" class="headerlink" title="（3）-提取.debug_info"></a>（3）-提取.debug_info</h5><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dwarfdump -e --debug-info YourPath/YourApp.dSYM/Contents/Resources/DWARF &gt; info-e.txt</div></pre></td></tr></table></figure></p>
<p>会生成一个txt，里面包含很多个如下的内容，文件内容举例：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5890308-e1ee4243f5bbc009.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>可以知道ViewController::buttonOCException方法的地址范围：0x0000bb76-0x0000bc00。</p>
<h5 id="（4）提取-debug-line"><a href="#（4）提取-debug-line" class="headerlink" title="（4）提取.debug_line"></a>（4）提取.debug_line</h5><p>命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dwarfdump -e --debug-line YourPath/YourApp.dSYM/Contents/Resources/DWARF &gt; line-e.txt</div></pre></td></tr></table></figure></p>
<p>会生成一个txt，里面包含很多个如下的内容，文件内容举例：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/5890308-6e311a17a9477136.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>这里代表的意思是，每一行代码，对应的地址、偏移量。</p>
<h5 id="（5）-结论，得到关键信息："><a href="#（5）-结论，得到关键信息：" class="headerlink" title="（5）-结论，得到关键信息："></a>（5）-结论，得到关键信息：</h5><p>解析后的崩溃日志为</p>
<p>3UncaughtExceptionDemo-[ViewController buttonOCException:] (ViewController.m:36)</p>
<p>崩溃所在源码文件：/Users/huangchong/iOSCrashUncaught-master/UncaughtExceptionDemo/ViewController.m</p>
<p>发生崩溃的方法：-[ViewController :buttonOCException]</p>
<p>发生崩溃的方法在源文件中的行号：32</p>
<p>崩溃发生的代码行，在源文件中得行号：36</p>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Crash </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[删除文件夹下所有的.git文件]]></title>
      <url>/2017/11/5/%E5%88%A0%E9%99%A4%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E6%89%80%E6%9C%89%E7%9A%84.git%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>find . -name “.git” | xargs rm -Rf</p>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[如何设计一个安全的账号系统？]]></title>
      <url>/2017/11/4/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%AE%89%E5%85%A8%E7%9A%84%E8%B4%A6%E5%8F%B7%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<blockquote>
<p>用正确的姿势保存密码。<br>用正确的姿势传输数据。<br>用正确的姿势加密敏感信息。<br>用正确的姿势对数据进行备份和监控。</p>
</blockquote>
<a id="more"></a>
<h1 id="1-用正确的姿势保存密码"><a href="#1-用正确的姿势保存密码" class="headerlink" title="1.用正确的姿势保存密码"></a>1.用正确的姿势保存密码</h1><h3 id="低级错误：明文保存密码"><a href="#低级错误：明文保存密码" class="headerlink" title="低级错误：明文保存密码"></a>低级错误：明文保存密码</h3><p>安全性最低的是在服务端明文保存用户的密码，一旦服务器被入侵，数据被拖走（拖库），所有用户的密码都直接的暴露在外面。</p>
<h3 id="低级错误：可逆加密密码"><a href="#低级错误：可逆加密密码" class="headerlink" title="低级错误：可逆加密密码"></a>低级错误：可逆加密密码</h3><p>既然不能明文保存密码，那当然是加密保存了。耍个小聪明，比如把密码的字母倒着存，或者每个字母存后一个字母，或者进行异或混淆处理，表面上密码看上去已经看不出来原始的密码是什么了，但实际上这个和明文保存密码并没有本质区别，因为黑客既然可以入侵你的服务器，自然可以拿到你的加密代码，只要按你的算法进行简单的解密就可以得到原始密码。</p>
<h3 id="错误方法：md5-加密密码"><a href="#错误方法：md5-加密密码" class="headerlink" title="错误方法：md5 加密密码"></a>错误方法：md5 加密密码</h3><p>这是早期比较主流的做法，然而，这依然是非常不安全的。因为只要枚举所有短密码进行 md5 加密，做成一个索引表，就能轻易的逆推出原始密码。</p>
<h3 id="正确方法：加盐-hash-保存密码"><a href="#正确方法：加盐-hash-保存密码" class="headerlink" title="正确方法：加盐 hash 保存密码"></a>正确方法：加盐 hash 保存密码</h3><p>加盐hash是指在加密密码时，不只是对密码进行hash，而是对密码多加内容，放点盐（salt）再加密，一方面，由于你放的这点盐，让密码本身更长强度更高，彩虹表逆推的难度更大，也因你放的这点盐，让黑客进行撞库时运算量更大，破解的难度更高。</p>
<blockquote>
<p>一个健壮的、牢不可破的系统应该是：即使被拿走了数据和所有的代码，也没办法破解里面的数据</p>
</blockquote>
<p>如果需要达到更高的安全等级，可以考虑：</p>
<ol>
<li>使用更安全的 hash 函数用来抵抗碰撞攻击，比如：SHA256, SHA512, RipeMD, WHIRLPOOL。</li>
<li>可以使用一种大量消耗 cpu 的 hash 算法对抗暴力破解，比如PBKDF2 或者 bcrypt。</li>
<li>比较加盐 md5 结果时，使用时间恒定的比较函数。</li>
<li>salt 的值不要和最终 hash 的结果存在同一个数据库。</li>
<li>最终存储的结果使用基于 key 的 hash 函数，比如 HMAC。 key 从外部安全性极高的专属服务中获得。</li>
</ol>
<h3 id="一些防范的方法"><a href="#一些防范的方法" class="headerlink" title="一些防范的方法"></a>一些防范的方法</h3><ul>
<li>要求密码强度，做弱密码检测</li>
<li>安全系数较高的验证码</li>
<li>防止机器人。使用有一定干扰的检验码，有失效时间。</li>
<li>异常登录检测或提示上一次登录时间地点。密码错误锁定。</li>
<li>错误回显不要太多。</li>
<li>token超时重新登录机制。</li>
<li>找回密码的安全性不能低于密码认证。慎用邮箱找回，重置密码链有必要的话要做到确认用户信息后才可以设置密码、重置密码。</li>
<li>可以考虑让用户预留与密码无关的个性提示信息，用于防钓鱼网站</li>
</ul>
<h1 id="2-用正确的姿势传输数据"><a href="#2-用正确的姿势传输数据" class="headerlink" title="2.用正确的姿势传输数据"></a>2.用正确的姿势传输数据</h1><p>使用 HTTP 协议传输数据时，数据都是明文传输的，数据从发出到服务器接收，中间可能被劫持，篡改。比如常见的 DNS 劫持，HTTP 劫持，中间人攻击。</p>
<ul>
<li>需要确保进行通讯的服务端是官方的、正确的服务端，而不是跟一个假的服务端在通信。</li>
<li>确保信息在网络上传输时是加密的，只有客户端和服务端有能力对数据进行解密。</li>
<li>确保信息在传输时不被篡改，或者数据被篡改时能立即发现。</li>
</ul>
<h3 id="验证服务端的合法性"><a href="#验证服务端的合法性" class="headerlink" title="验证服务端的合法性"></a>验证服务端的合法性</h3><p>加密技术：对称加密 和 非对称加密。 对称加密：加密和解密时使用的是同一个密钥。非对称加密：需要两个密钥来进行加密和解密：公开密钥（public key，简称公钥）和私有密钥（private key，简称私钥） ，公钥加密的信息只有私钥才能解开，私钥加密的信息只有公钥才能解开。<br>非对称加密是实现验证服务端合法性的基础，常见的加密算法有 RSA 、 ECC 等 。服务端生成一对公钥和私钥，公钥是公开的所有人都知道，客户端需要和服务端通信时，使用该公钥进行数据加密，由于只有真实合法的服务端才拥有对应的私钥，所有只有真实的服务端才能解密该信息，然后返回数据给客户端时，使用客户端自己生成的公钥进行加密，这样数据只有对应的客户端才能理解。<br>使用 <code>HTTPS</code> 时，数字证书里包含了名称和公钥信息，只要认证该证书是合法的，并且对方能理解用该公钥加密的信息，就能确定是合法的服务端。</p>
<h3 id="确保通信的安全"><a href="#确保通信的安全" class="headerlink" title="确保通信的安全"></a>确保通信的安全</h3><p>既然使用非对称加密的方式，可以保证双方安全的通信，那是不是就一直使用非对称加密传输数据就行了？理论上是可以的，但是非对称加密的效率要比对称加密的效率低很多。通常的做法是，通过非对称加密的方法，协商出一个只有双方知道的对称加密密钥。<br>即使在不安全的通信环境下，也可以协商出一个只有双方才知道的对称加密密钥。密钥协商好后，双方就可以使用该密钥进行加密传输了，比如使用 AES 、 DES</p>
<h3 id="防御重放攻击"><a href="#防御重放攻击" class="headerlink" title="防御重放攻击"></a>防御重放攻击</h3><p>即使攻击者不能解密传输的内容，但仍可以使用重放攻击尝试身份验证或用于欺骗系统。重放攻击是指攻击者将数据包截取后，向目标主机重新发送一遍数据包。<br>防御重放攻击的方法主要有：</p>
<ul>
<li>使用时间戳。</li>
<li>数据包在一定时间范围内才是有效的。</li>
<li>使用递增的序号。收到重复的数据包时可以轻易的发现。</li>
<li>使用提问应答方式。</li>
<li>收到数据包时可以判断出来是否应答过。<br>HTTPS 正是使用了上述的原理，保证了通信的安全。所以，任何对安全有需求的系统都应该使用 HTTPS。如果是使用自有协议开发，比如 APP 或游戏，应该使用上述的方法保障通信的安全。</li>
</ul>
<h1 id="3-用正确的姿势加密敏感信息"><a href="#3-用正确的姿势加密敏感信息" class="headerlink" title="3.用正确的姿势加密敏感信息"></a>3.用正确的姿势加密敏感信息</h1><p>那用户其他的敏感信息呢？比如身份证、银行卡、信用卡等信息，该如何加密保存而不被泄露呢？</p>
<p>敏感信息加密。把敏感信息加盐hash处理。传输需要把认证过程放在SSL里用对称密钥通信加密。cookies也不能用持久型cookies，总之敏感信息不落地，要加密传输。敏感信息做no-cache。会话加令牌避免重用。</p>
<ul>
<li>对于身份证信息，可以像密码一样只保存 hash 的结果，可以用于用户输入身份证号后进行验证。假如需要给用户显示身份证信息，只需要保存抹掉了几位数字的身份证号。</li>
<li>假如你的系统涉及到支付，需要用户的银行卡，信用卡（卡号，CVV码）等信息时，必须遵循 PCI DSS （第三方支付行业数据安全标准）标准。PCI DSS 是由 PCI 安全标准委员会的创始成员(visa、mastercard、American Express、Discover Financial Services、JCB等)制定，力在使国际上采用一致的数据安全措施，包括安全管理、策略、过程、网络体系结构、软件设计的要求的列表等，全面保障交易安全。</li>
<li>如果只是银行卡，还需要遵循 ADSS （银联卡收单机构账户信息安全管理标准） 标准。</li>
</ul>
<h1 id="4-用正确的姿势对数据进行备份和监控"><a href="#4-用正确的姿势对数据进行备份和监控" class="headerlink" title="4.用正确的姿势对数据进行备份和监控"></a>4.用正确的姿势对数据进行备份和监控</h1><h3 id="人员和技术"><a href="#人员和技术" class="headerlink" title="人员和技术"></a>人员和技术</h3><ul>
<li>使用现有cms时，有能力就进行代码审计，否则要隐藏cms指纹，时刻关注安全动态，打补丁。</li>
<li>业务逻辑漏洞需要进行经常性的测试，比如密码找回，支付问题，平行垂直权限等。某些业务操作，最好设置验证码验证，或者token等。尤其是新上线的项目。</li>
<li>关注组件漏洞，如框架、中间件、OpenSSL等，及时更新</li>
<li>不能在生产做调试、测试，以免泄漏调试信息</li>
<li>在新试用某一项技术前，一定要评估好该技术可能带来的风险，比如服务器代为远程请求数据时是否会造成ssrf问题，通过xml请求数据时，是否会造成xxe，flash的权限问题，callback的问题，OAuth认证，sso认证等等。</li>
<li>员工培训，弱口令问题，上传代码到github等第三方，svn，备份，员工的安全意识，不随便在办公网打开未知文件，客服后台访问时禁止JavaScript执行等等。</li>
</ul>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><ul>
<li>安装waf防火墙</li>
<li>参数化查询或白名单防注入。</li>
<li>同时做好权限控制，并对访问记录做好监控，及时发现问题，保留现场证据。</li>
<li>网站做好日志记录，不定时进行审计。</li>
<li>网站最好挂个cdn，来缓解直接的攻击。</li>
<li>服务器打补丁，装防护软件，如安全狗。</li>
<li>服务器各端口运行服务时，一定要保证鉴权，如mongodb等等。</li>
<li>服务器各服务最小权限原则。</li>
<li>后台等敏感路径要隐藏起来，或者验证IP。</li>
</ul>
<h3 id="数据和备份"><a href="#数据和备份" class="headerlink" title="数据和备份"></a>数据和备份</h3><ul>
<li>防SQL Injection。</li>
<li>使用pdo来进行数据库查询，数据库权限不要太高，站库分离。</li>
<li>备份的安全性不能低于生产。</li>
<li>数据备份是为了防止由于硬盘损坏或人为破坏导致的数据丢失。磁盘 raid，物理备份（磁带库），异地的逻辑备份。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> K12 </tag>
            
            <tag> 安全 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[教育科技公司创业该避开哪些坑]]></title>
      <url>/2017/10/26/%E6%95%99%E8%82%B2%E7%A7%91%E6%8A%80%E5%85%AC%E5%8F%B8%E5%88%9B%E4%B8%9A%E8%AF%A5%E9%81%BF%E5%BC%80%E5%93%AA%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p><a href="http://www.jingmeiti.com/archives/22060" target="_blank" rel="external">前车之鉴：教育科技公司创业该避开哪些坑</a></p>
<p>过度关注商业变现，缺乏对教师的同理心，难以定位客户是教育科技创业公司失败的常见原因。</p>
<p>教育科技对企业家来说是一个机遇风险并存的行业，呼声大，回报高。据EdSurge介绍，美国教育科技公司在2016年共发生138笔风投交易，投融资金额累计10.3亿美元。2016年8月，TechCrunch发布了一篇文章“教育科技是金融科技之后的大热门”，声称全球教育科技的投资将达到2550亿美元。截至今天，著名股权众筹平台AngelList已列出了1.3万多家教育初创企业、公司和孵化器。</p>
<p>企业家、创业公司和投资者在教育领域都有机会进场分得一羹。然而，市场竞争日趋激烈，这使进入一个本身就有难度的行业难上加难。</p>
<p>以下是教育科技企业家常犯的五个错误，以及如何避免这些错误的方案。希望能抛砖引玉，给教育科技领域的初创企业家一些启发。</p>
<a id="more"></a>
<h1 id="问题一：对教育生态系统缺乏了解"><a href="#问题一：对教育生态系统缺乏了解" class="headerlink" title="问题一：对教育生态系统缺乏了解"></a>问题一：对教育生态系统缺乏了解</h1><p>许多上过公立学校的人坚信自己已经知道教育系统如何运作。然而事实是，除非在公共教育系统中工作过，否则认识不到学校运行的难处，也无法理解教师和学生的痛点。</p>
<h3 id="方案：做好功课，做好准备"><a href="#方案：做好功课，做好准备" class="headerlink" title="方案：做好功课，做好准备"></a>方案：做好功课，做好准备</h3><p>不要自己预设适合教师、学生的最佳解决方案。花时间研究系统，了解产品如何为客户增值。每个学校、社区、文化都不同，也因此相应需要不同解决方案。进入这个独特生态系统的企业家必须知道他们的目标客户，以及如何帮助解决具体的问题。</p>
<p>关于准备工作，要明白一个事实前提：教师和行政人员在一学年的时间内无法逐个尝试、评测数千种教学产品再做出购买决定。因此，要确保做好调研工作，确保产品推出一击即中。</p>
<p>借助社交媒体进行调研并建立关系。企业家可以在社交媒体网站（如Pinterest，Facebook和Twitter）上找到教育工作者。</p>
<p>重点关注Pinterest。根据南加州大学Rossier教育学院线上平台（USC Rossier Online）的数据，每天关于教育的标签从最初的50万增加到2015年的130万。Pinterest还向教师提供了文件中转站，可以在网站上找到并分享按年级和主题分类的资源。</p>
<p>通过Twitter聊天了解需求，关注眼下困难，并在适当的时候参与。不要使用这些对话来做产品硬广和安利，而是通过这些聊天和教师学习、打交道和建立关系。</p>
<p>几乎每天都可以在Twitter上找到关于教育的聊天议题。而这些擅用Twitter壮大学习社区的老师也比哪些不使用线上协作工具的同事更有可能成为教育科技产品的潜在用户。</p>
<h1 id="问题二：缺乏关键的教师投入和透明度"><a href="#问题二：缺乏关键的教师投入和透明度" class="headerlink" title="问题二：缺乏关键的教师投入和透明度"></a>问题二：缺乏关键的教师投入和透明度</h1><p>教育科技创业公司很少吸纳教师。没有理解教学法、学生学习方式，以及课堂技术如何影响学生成绩，几乎不可能创建出有用的产品。许多教育科技产品缺乏产品需求调研导致舍本逐末，并未解决痛点。因此在团队成员中保证至少有一名教育工作者至关重要。</p>
<h3 id="方案：聘请老师"><a href="#方案：聘请老师" class="headerlink" title="方案：聘请老师"></a>方案：聘请老师</h3><p>引入能为团队提供指导、反馈和信赖的老师。对外推广时，强调内部团队研发是在资深教师的指导下完成的，并广而告之公司已对产品功能作出的独立研究。发布研究论文和案例研究，证明产品能给用户带来增值，让潜在客户能轻松理解产品对教育理念的证明。毕竟在鱼龙混杂的教育科技产品市场，教育系统的业内人士不会自发地花时间去摸索各个公司的产品。</p>
<p>初创公司还可以找一些能够评测产品的老师作为种子用户，并邀请他们在TinkerEd（教育科技产品评测网）上提供有价值的反馈。</p>
<h1 id="问题三：无法与教育工作者和管理者平等对话"><a href="#问题三：无法与教育工作者和管理者平等对话" class="headerlink" title="问题三：无法与教育工作者和管理者平等对话"></a>问题三：无法与教育工作者和管理者平等对话</h1><p>教师和企业家各有所长，有些企业家却觉得自己高人一等。我很尊重的一位同事Richard Byrne，运营着一家名为Free Technology for Teachers的网站。每年都会与数千名教师和教育技术公司合作，为教师提供免费技术，并持续关注创始人和教育工作者之间的平衡和大胆尝试。</p>
<p>Byrne在参加2015年美国国际教育科技展ISTE大会之后，撰写了一篇题为《教育科技初创企业：请和老师平等对话》的文章。Byrne在文中表示：“过去一年，我收到过无数多个来自教育科技公司的推销和产品发布，而对有些公司我可能看都不看，因为他们犯了一个共同的致命错误——在和教师打交道的过程中居高临下，而不自知。”</p>
<p>只通过第一次的谈话，Byrne就能判定他对该公司毫无兴趣。Byrne指出，“贵司小看了教育这个行业，以为初涉藩篱就掌握了教育精髓。毫无课堂经验却妄想已经能解决教师的工作痛点。打个比方，我一直对牙科感兴趣，但我不会指导牙医说我有个关于根管治疗的更好方案”。</p>
<h3 id="方案：融入教育文化"><a href="#方案：融入教育文化" class="headerlink" title="方案：融入教育文化"></a>方案：融入教育文化</h3><p>教师和企业家各有各的行话。对教师夸夸其谈，说技术可以“颠覆”或“破解”他们深耕多年的教育好比当面打脸。构建产品的方式与呈现产品的方式同样重要。企业家的世界可能是跑马圈地高速运转的，但教育是个慢行业。企业家应该邀请老师提出有关他们产品的反馈问题和要求，而不是自负武断地说“我为你解决了这个问题”。</p>
<h1 id="问题四：频繁打扰老师和管理员"><a href="#问题四：频繁打扰老师和管理员" class="headerlink" title="问题四：频繁打扰老师和管理员"></a>问题四：频繁打扰老师和管理员</h1><p>未经预约，给老师频繁打电话发邮件是不礼貌也不明智的。许多教育科技企业家由于工作文化的差异，最后事倍功半。教育界相对封闭，企业家想要建立双向沟通也比较困难。教育科技创业公司频繁的电话和邮件推销反而会毁了口碑。教师日理万机，无视来自教育科技初创公司的邮件或电话也是自然。</p>
<h3 id="方案：参与教育体系，建立并增进关系"><a href="#方案：参与教育体系，建立并增进关系" class="headerlink" title="方案：参与教育体系，建立并增进关系"></a>方案：参与教育体系，建立并增进关系</h3><p>通过博客上的教育内容推广公司产品，参与Twitter上的相关议题，并加入Facebook上的教师群体以寻求产品增值机会。和教师建立良性互动，而不要期待立刻变现。如果有老师对产品感兴趣，愿意花时间尝试，可以提供免费试用，听取他们的反馈意见，并适时给予感谢。此外，参加教育技术会议并与教师主动交流。</p>
<h1 id="问题五：缺乏对职业底线的了解"><a href="#问题五：缺乏对职业底线的了解" class="headerlink" title="问题五：缺乏对职业底线的了解"></a>问题五：缺乏对职业底线的了解</h1><p>有许多教育技术公司被学校扫地出门，就是因为企业家触犯了学校的底线。学校有理由担心教育技术不仅功能鸡肋、价格昂贵、难以操作，还可能会泄露学生的私人信息，甚至信息还会落入一些别有用心的人手里。教师、家长和学校对教育科技公司的容忍底线：产品必须有利于学生，促进成长，并且安全。</p>
<h3 id="方案：平衡校企双方底线标准"><a href="#方案：平衡校企双方底线标准" class="headerlink" title="方案：平衡校企双方底线标准"></a>方案：平衡校企双方底线标准</h3><p>进入教育科技领域必须要有情怀。如果只是为了赚钱，产品注定会失败。记住要把学生放在第一位，努力促进教育制度创新，并通过提供有价值的产品或服务增加营收。牢记了这些理念，才能确保初心正确，事业腾飞。</p>
<p>在教育领域创业注定无法一劳永逸，一刀切。尽管很多教育科技创业公司注定失败，然而，有着强大商业模型，充分验证产品概念，并懂得融入教育生态系统的企业家最终一定能够成功。</p>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> K12 </tag>
            
            <tag> 转发 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实施计划提纲]]></title>
      <url>/2017/10/25/%E5%AE%9E%E6%96%BD%E8%AE%A1%E5%88%92%E6%8F%90%E7%BA%B2/</url>
      <content type="html"><![CDATA[<h1 id="人员的招聘，技术的选型"><a href="#人员的招聘，技术的选型" class="headerlink" title="人员的招聘，技术的选型"></a>人员的招聘，技术的选型</h1><h3 id="只有找对人才能做对事，在招聘上多花时间，三步法："><a href="#只有找对人才能做对事，在招聘上多花时间，三步法：" class="headerlink" title="只有找对人才能做对事，在招聘上多花时间，三步法："></a>只有找对人才能做对事，在招聘上多花时间，三步法：</h3><ul>
<li>对员工的表现有何期望，其相关经历中取得过什么成就，讨论期望的个性特点。仔细查看和研究简历。</li>
<li>面试，用“八二原则”倾听和提问，提出正确的问题，恰到好处得到有用的信息，深入挖掘被面试人背景、成绩、对未来的设想。</li>
<li>评价，分析信息是否具备期望的成功模式和个性特征。服从直觉，如果有疑虑就必须调查清楚消除疑虑。<a id="more"></a>
<h3 id="可用平台"><a href="#可用平台" class="headerlink" title="可用平台"></a>可用平台</h3>网易云、云信、视频云、人工智能</li>
</ul>
<blockquote>
<p>了解人工智能研究院中是否有可以有智能硬件运用到产品中。<br>分析还缺少的技术，技术选型，实施落地。</p>
</blockquote>
<h3 id="iOS（2人）"><a href="#iOS（2人）" class="headerlink" title="iOS（2人）"></a>iOS（2人）</h3><ul>
<li>Objective C/SWIFT</li>
<li>iPhone X适配</li>
</ul>
<h3 id="android（2人）"><a href="#android（2人）" class="headerlink" title="android（2人）"></a>android（2人）</h3><ul>
<li>Java</li>
<li>各种机型适配</li>
</ul>
<blockquote>
<p>iOS要求用swift实际开发，对第三库搞清楚协议，有协议问题的自己实现。<br>iOS和Android用原生方式和webview显示详情内容，也可根据公司的技术情况来决定是否选择一个hybrid框架实施</p>
</blockquote>
<h3 id="前端-管理端（2人）"><a href="#前端-管理端（2人）" class="headerlink" title="前端 | 管理端（2人）"></a>前端 | 管理端（2人）</h3><ul>
<li>CSS3/JavaScript/HTML5</li>
<li>Angular2 | Vue | React 框架</li>
<li>Sitemesh，Freemarkder，JQuery，EasyUI</li>
</ul>
<blockquote>
<p>后台管理系统可以选用：<a href="https://juejin.im/post/59e6a995518825619a01c433" target="_blank" rel="external">iview-admin介绍</a><br>iView Admin 是基于 Vue.js，搭配使用 iView UI 组件库形成的一套后台集成解决方案<br><a href="https://github.com/iview/iview-admin" target="_blank" rel="external">GitHub地址</a><br><a href="https://iview.github.io/iview-admin" target="_blank" rel="external">在线预览地址</a><br>MIT协议</p>
</blockquote>
<h3 id="后端（3人）"><a href="#后端（3人）" class="headerlink" title="后端（3人）"></a>后端（3人）</h3><ul>
<li>Linux系统，CentOS等</li>
<li>NodeJS、JSP、Java、Python、PHP等server端</li>
<li>Oracle、MySQL、PostgreSQL、SQLite关系数据库</li>
<li>Redis、MongoDB、zookeeper分布式数据库</li>
<li>Spring、springMVC、springAOP、MyBatis</li>
<li>logback, Redis(Jedis), GraphicsMagick</li>
<li>Spring Cloud、Docker、PM2</li>
</ul>
<blockquote>
<p>项目是基于地理位置的应用，数据库建议使用或部分使用<code>MongoDB</code>，在地理位置查询上MongoDB有着比传统关系型数据库有优势<br>根据公司的技术储备和实际后台人员能力决定使用哪种语言的server端</p>
</blockquote>
<h3 id="研发Leader-架构师（1人）"><a href="#研发Leader-架构师（1人）" class="headerlink" title="研发Leader | 架构师（1人）"></a>研发Leader | 架构师（1人）</h3><ul>
<li>团队专业力提升：招聘面试、新人指导</li>
<li>团队任务管理：开发工作量评估、开发任务分配</li>
<li>团队生产质量提升：代码审核、开发风险识别/报告/协调解决</li>
<li>团队生产力提升：代码模板研发与推广、最佳实践规范总结与推广、自动化研发生产工具研发与推广</li>
<li>架构分析：技术选型、技术架构风险识别、技术实现工作量评估</li>
<li>架构设计与实现：非功能性模块的架构设计、接口设计、代码实现</li>
<li>业务架构设计与实现：需要对跨系统的接口进行识别、实现、维护，需要对能写成公共代码类库的进行分析、识别、接口设计、实现、变更维护。</li>
<li>重构：经常做Bug分析、非模板性和公共类库代码检查，以发现代码腐烂程度，以发现还有哪些代码没有做很好的架构与精心的代码设计。</li>
</ul>
<blockquote>
<p>对团队中用到的技术，研发Leader必须学习知晓，明白原理。<br>人员必须有接班人制度。应该除了精通一项技能，还要多学习，向全栈方向发展。<br>20%法则：开发团队应预留一定的自主时间，利用这些时间重写代码，完善架构，重构代码，或者更换数据库管理系统提高性能，避免“需要停下来重写代码”的情况发生</p>
</blockquote>
<h1 id="开发工作"><a href="#开发工作" class="headerlink" title="开发工作"></a>开发工作</h1><h3 id="想要在成熟的市场上抢占一席之地的2件法宝："><a href="#想要在成熟的市场上抢占一席之地的2件法宝：" class="headerlink" title="想要在成熟的市场上抢占一席之地的2件法宝："></a>想要在成熟的市场上抢占一席之地的2件法宝：</h3><ul>
<li>对目标市场了如指掌，对其他现有产品的缺陷洞若观火。</li>
<li>跟踪最新的技术趋势，应对<code>反摩尔定律</code>的压力。</li>
</ul>
<blockquote>
<p>需要十分清楚我们平台的优势和缺点，不断改进，真正解决用户的痛点。<br>把大数据，人工智能，智能硬件等最新技术运用到产品中。</p>
</blockquote>
<h3 id="理解用户"><a href="#理解用户" class="headerlink" title="理解用户"></a>理解用户</h3><ul>
<li>用户研究</li>
<li>交互设计</li>
<li>视觉设计</li>
<li>原型设计</li>
</ul>
<blockquote>
<p>可用性和美感缺一不可<br>创建体现用户体验的高保真原型<br>邀请真实的目标用户验证产品原型<br>用鲜活的<code>产品原型</code>代替死板的产品说明文档作为开发产品的基础，开发人员可以直观、高效地领会产品设计和开发要求，大大缩短开发时间。</p>
</blockquote>
<h3 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h3><ul>
<li>干系人管理，建立人脉网络，在需要寻求帮助的时候可以找对人。</li>
<li>定义正确的产品，解决用户的痛点，证明产品的价值、可用性、可行性。</li>
<li>制定更及时、更可靠的产品决策，谁说了算这很关键，最糟糕的是谁都决定不了，老板说了算。</li>
<li>说明文档用产品经理，研发Leader，设计师三方参与制作的高保真原型代替，辅助数据关系，流程图等文档。</li>
<li>削减功能还是延长工期？设计产品一定要考虑哪些功能是最重要的，争取设计出只满足基本要求的、不可删减的产品。</li>
<li>先定义用户体验再动手开发，让真实目标用户体验验证可行性。</li>
<li>根据需求进行Feature的分解，确定优先级。</li>
<li>将待开发任务放入待开发池，分配任务和自主选择。</li>
<li>敏捷的开发模式：<ol>
<li>每日站会（5～10分钟），讲三点：做了什么？打算做什么？需要什么帮助？</li>
<li>每周列会（1～2小时），大周的是递交周会议，小周主要进度分析，头脑风暴。</li>
<li>每2周递交周期，燃尽图，进度数据分析，应对风险，制定新一轮递交的进度计划。</li>
</ol>
</li>
<li>质量控制<ol>
<li>用客户的角度分析，加强用户体验</li>
<li>预防胜于检查</li>
<li>CodeReview机制</li>
<li>问题及时修改，持续改进</li>
<li>严重bug分析</li>
</ol>
</li>
<li>变更应对<ol>
<li>优先级调整</li>
<li>快速跟进，同时开发</li>
<li>赶工加班</li>
<li>寻求帮助</li>
</ol>
</li>
<li>尽早出版本，自己使用，给QA测试，发现交互问题，不好用的问题。</li>
<li>风险登记册及时更新和执行应对，降低消极事件的概率。</li>
</ul>
<h1 id="管理产品的要点："><a href="#管理产品的要点：" class="headerlink" title="管理产品的要点："></a>管理产品的要点：</h1><ul>
<li>可用性，很好的用户体验。</li>
<li>人物角色，请典型用户参与测试，根据反馈信息加于完善。</li>
<li>扩展性，永远留有余地，不要满负荷。</li>
<li>在系统设计上保证持续可用性。</li>
<li>客户服务，保持良好的用户体验。</li>
<li>保护用户隐私，信息安全非常重要。</li>
<li>口碑营销，用户间的推销是最好的广告。</li>
<li>要以全球化为目标</li>
<li>平滑部署，更新幅度不可太大，留足够的时间让用户适应。</li>
<li>用户社区管理，真正把用户当做上帝。</li>
</ul>
<h1 id="团队精神"><a href="#团队精神" class="headerlink" title="团队精神"></a>团队精神</h1><ul>
<li>做事三状态：我做了；我为了糊口；我在做一个艺术品。只有真正喜欢才能爆发强大的动力。</li>
<li>管人三板斧：情、理、法。用对方法管对人、用情感激励人、用制度管人。</li>
<li>信任激发能量，效率来源于信任。但 “用人要疑，疑人要用。不是不信你，而是不认你”–马云。</li>
<li>尊重员工，让他感觉你是战友和教练。</li>
<li>给员工不走的理由：<ol>
<li>设立高期望值</li>
<li>经常交流</li>
<li>授权、授权、再授权</li>
<li>适配的薪资待遇</li>
<li>培训能力和责任心</li>
</ol>
</li>
<li>授权，培养员工最有力有效的方法之一。但是做好：1. 目标 2. 时限 3. 权力 4. 责任 5. 验收</li>
<li>培训接班人，不吝啬教导，当他可以替代你的时候，就可以转岗做其他想做的事，成就他人也是成就自己。</li>
<li>积极的态度更具竞争力，让激情化为行动成就梦想，榜样是激情持久的动力。树立自己的榜样形象。</li>
<li>竞争激励，让强者更强，提升团队士气。</li>
<li>细节决定成败，注重细节，持之以恒。</li>
<li>强大的执行力是团队的核心灵魂，讲究兵贵神速。</li>
<li>制度高于一切，铁的纪律打造铁的团队。忠于企业，忠于团队，忠于自己。</li>
<li>时刻保持危机感，时刻努力学习，与时俱进，建立创新型团队。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> K12 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git使用备忘]]></title>
      <url>/2017/9/25/Git%E4%BD%BF%E7%94%A8%E5%A4%87%E5%BF%98/</url>
      <content type="html"><![CDATA[<h1 id="设置用户名邮箱"><a href="#设置用户名邮箱" class="headerlink" title="设置用户名邮箱"></a>设置用户名邮箱</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git config --global user.name davidlin7876</div><div class="line">git config --global user.email davidlin7876@163.com</div></pre></td></tr></table></figure>
<h1 id="生成密钥对"><a href="#生成密钥对" class="headerlink" title="生成密钥对"></a>生成密钥对</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd ~/.ssh</div><div class="line">$ ls</div><div class="line">authorized_keys2  id_dsa       known_hosts config            id_dsa.pub</div></pre></td></tr></table></figure>
<p>看一下有没有id_rsa和id_rsa.pub(或者是id_dsa和id_dsa.pub之类成对的文件)，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。</p>
<p>假如没有这些文件，甚至连 .ssh 目录都没有，可以用 ssh-keygen 来创建。该程序在 Linux/Mac 系统上由 SSH 包提供，而在 Windows 上则包含在 MSysGit 包里：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</div></pre></td></tr></table></figure>
<p>1、查看你生成的公钥：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ cat ~/.ssh/id_rsa.pub</div></pre></td></tr></table></figure>
<p>2、登陆你的github帐户。点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key</p>
<p>3、然后你复制上面的公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字。</p>
<p>4、点击 Add key。</p>
<p>完成以后，验证下这个key是不是正常工作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ssh -T git@github.com</div><div class="line"></div><div class="line">Attempts to ssh to github</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>使用命令 git remote -v 查看你当前的 remote url</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git remote -v</div><div class="line">origin https://github.com/someaccount/someproject.git (fetch)</div><div class="line">origin https://github.com/someaccount/someproject.git (push)</div></pre></td></tr></table></figure>
<p>如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议）</p>
<p>复制此ssh链接，然后使用命令 git remote set-url 来调整你的url。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin git@github.com:someaccount/someproject.git</div></pre></td></tr></table></figure>
<p>然后你可以再用命令 git remote -v 查看一下，url是否已经变成了ssh地址。</p>
<p>然后你就可以愉快的使用git fetch, git pull , git push，再也不用输入烦人的密码了</p>
<h1 id="修改git配置"><a href="#修改git配置" class="headerlink" title="修改git配置"></a>修改git配置</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim ~/.gitconfig</div></pre></td></tr></table></figure>
<p>加入以下的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">[alias]</div><div class="line">  co = checkout</div><div class="line">  br = branch</div><div class="line">  ci = commit</div><div class="line">  st = status</div><div class="line">  unstage = reset HEAD --</div><div class="line">  last = log -1 HEAD</div><div class="line">  hist = log --graph --pretty=format:&apos;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset&apos; --abbrev-commit --date=relative</div><div class="line">  type = cat-file -t</div><div class="line">  dump = cat-file -p</div><div class="line">[core]</div><div class="line">  editor = vim</div><div class="line">  autocrlf = input</div><div class="line">        excludesfile = /home/wwx/.gitignore_global</div><div class="line">[merge]</div><div class="line">  tool = vimdiff</div><div class="line">[push]</div><div class="line">  default = simple</div><div class="line">[color]</div><div class="line">  diff = auto</div><div class="line">  status = auto</div><div class="line">  branch = auto</div><div class="line">  interactive = true</div><div class="line">  ui = true</div><div class="line">[filter &quot;media&quot;]</div><div class="line">  required = true</div><div class="line">  clean = git media clean %f</div><div class="line">  smudge = git media smudge %f</div><div class="line">[filter &quot;hawser&quot;]</div><div class="line">  clean = git hawser clean %f</div><div class="line">  smudge = git hawser smudge %f</div><div class="line">  required = true</div></pre></td></tr></table></figure></p>
<h1 id="最常用的指令："><a href="#最常用的指令：" class="headerlink" title="最常用的指令："></a>最常用的指令：</h1><h3 id="拉取代码"><a href="#拉取代码" class="headerlink" title="拉取代码"></a>拉取代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone url</div><div class="line">git pull</div></pre></td></tr></table></figure>
<h3 id="建立分支push，去平台发合并请求"><a href="#建立分支push，去平台发合并请求" class="headerlink" title="建立分支push，去平台发合并请求"></a>建立分支push，去平台发合并请求</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git gst</div><div class="line">git co -b feature/make-fix</div><div class="line">git add .</div><div class="line">git commit -m &apos;make-fix&apos;</div><div class="line">git push</div></pre></td></tr></table></figure>
<h3 id="如果有push到主分支的权限，然后可以直接合并"><a href="#如果有push到主分支的权限，然后可以直接合并" class="headerlink" title="如果有push到主分支的权限，然后可以直接合并"></a>如果有push到主分支的权限，然后可以直接合并</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git co develop</div><div class="line">git merge feature/make-fix</div><div class="line">git push</div></pre></td></tr></table></figure>
<h1 id="Git常用命令总结"><a href="#Git常用命令总结" class="headerlink" title="Git常用命令总结"></a>Git常用命令总结</h1><p><strong>git init</strong><br>     在本地新建一个repo,进入一个项目目录,执行git init,会初始化一个repo,并在当前文件夹下创建一个.git文件夹.</p>
<p><strong>git clone</strong><br>     获取一个url对应的远程Git repo, 创建一个local copy.<br>     一般的格式是git clone [url].<br>     clone下来的repo会以url最后一个斜线后面的名称命名,创建一个文件夹,如果想要指定特定的名称,可以git clone [url] newname指定.</p>
<p><strong>git status</strong><br>     查询repo的状态.<br>     git status -s: -s表示short, -s的输出标记会有两列,第一列是对staging区域而言,第二列是对working目录而言.</p>
<p><strong>git log</strong><br>     show commit history of a branch.<br>     git log –oneline –number: 每条log只显示一行,显示number条.<br>     git log –oneline –graph:可以图形化地表示出分支合并历史.<br>     git log branchname可以显示特定分支的log.<br>     git log –oneline branch1 ^branch2,可以查看在分支1,却不在分支2中的提交.^表示排除这个分支(Window下可能要给^branch2加上引号).<br>     git log –decorate会显示出tag信息.<br>     git log –author=[author name] 可以指定作者的提交历史.<br>     git log –since –before –until –after 根据提交时间筛选log.<br>     –no-merges可以将merge的commits排除在外.<br>     git log –grep 根据commit信息过滤log: git log –grep=keywords<br>     默认情况下, git log –grep –author是OR的关系,即满足一条即被返回,如果你想让它们是AND的关系,可以加上–all-match的option.<br>     git log -S: filter by introduced diff.<br>     比如: git log -SmethodName (注意S和后面的词之间没有等号分隔).<br>     git log -p: show patch introduced at each commit.<br>     每一个提交都是一个快照(snapshot),Git会把每次提交的diff计算出来,作为一个patch显示给你看.<br>     另一种方法是git show [SHA].<br>     git log –stat: show diffstat of changes introduced at each commit.<br>     同样是用来看改动的相对信息的,–stat比-p的输出更简单一些.</p>
<p><strong>git add</strong><br>     在提交之前,Git有一个暂存区(staging area),可以放入新添加的文件或者加入新的改动. commit时提交的改动是上一次加入到staging area中的改动,而不是我们disk上的改动.<br>     git add .<br>     会递归地添加当前工作目录中的所有文件.</p>
<p><strong>git diff</strong><br>     不加参数的git diff:<br>     show diff of unstaged changes.<br>     此命令比较的是工作目录中当前文件和暂存区域快照之间的差异,也就是修改之后还没有暂存起来的变化内容.<br>     若要看已经暂存起来的文件和上次提交时的快照之间的差异,可以用:<br>     git diff –cached 命令.<br>     show diff of staged changes.<br>     (Git 1.6.1 及更高版本还允许使用 git diff –staged，效果是相同的).<br>     git diff HEAD<br>     show diff of all staged or unstated changes.<br>     也即比较woking directory和上次提交之间所有的改动.<br>     如果想看自从某个版本之后都改动了什么,可以用:<br>     git diff [version tag]<br>     跟log命令一样,diff也可以加上–stat参数来简化输出.<br>     git diff [branchA] [branchB]可以用来比较两个分支.<br>     它实际上会返回一个由A到B的patch,不是我们想要的结果.<br>     一般我们想要的结果是两个分支分开以后各自的改动都是什么,是由命令:<br>     git diff [branchA]…[branchB]给出的.<br>     实际上它是:git diff $(git merge-base [branchA] [branchB]) [branchB]的结果.</p>
<p><strong>git commit</strong><br>     提交已经被add进来的改动.<br>     git commit -m “the commit message”<br>     git commit -a 会先把所有已经track的文件的改动add进来,然后提交(有点像svn的一次提交,不用先暂存). 对于没有track的文件,还是需要git add一下.<br>     git commit –amend 增补提交. 会使用与当前提交节点相同的父节点进行一次新的提交,旧的提交将会被取消.</p>
<p><strong>git reset</strong><br>     undo changes and commits.<br>     这里的HEAD关键字指的是当前分支最末梢最新的一个提交.也就是版本库中该分支上的最新版本.<br>     git reset HEAD: unstage files from index and reset pointer to HEAD<br>     这个命令用来把不小心add进去的文件从staged状态取出来,可以单独针对某一个文件操作: git reset HEAD - - filename, 这个- - 也可以不加.<br>     git reset –soft<br>     move HEAD to specific commit reference, index and staging are untouched.<br>     git reset –hard<br>     unstage files AND undo any changes in the working directory since last commit.<br>     使用git reset —hard HEAD进行reset,即上次提交之后,所有staged的改动和工作目录的改动都会消失,还原到上次提交的状态.<br>     这里的HEAD可以被写成任何一次提交的SHA-1.<br>     不带soft和hard参数的git reset,实际上带的是默认参数mixed.<br>总结:<br>     git reset –mixed id,是将git的HEAD变了(也就是提交记录变了),但文件并没有改变，(也就是working tree并没有改变). 取消了commit和add的内容.<br>     git reset –soft id. 实际上，是git reset –mixed id 后,又做了一次git add.即取消了commit的内容.<br>     git reset –hard id.是将git的HEAD变了,文件也变了.<br>     按改动范围排序如下:<br>     soft (commit) &lt; mixed (commit + add) &lt; hard (commit + add + local working)</p>
<p><strong>git revert</strong><br>     反转撤销提交.只要把出错的提交(commit)的名字(reference)作为参数传给命令就可以了.<br>     git revert HEAD: 撤销最近的一个提交.<br>     git revert会创建一个反向的新提交,可以通过参数-n来告诉Git先不要提交.</p>
<p><strong>git rm</strong><br>     git rm file: 从staging区移除文件,同时也移除出工作目录.<br>     git rm –cached: 从staging区移除文件,但留在工作目录中.<br>     git rm –cached从功能上等同于git reset HEAD,清除了缓存区,但不动工作目录树.</p>
<p><strong>git clean</strong><br>     git clean是从工作目录中移除没有track的文件.<br>     通常的参数是git clean -df:<br>     -d表示同时移除目录,-f表示force,因为在git的配置文件中, clean.requireForce=true,如果不加-f,clean将会拒绝执行.</p>
<p><strong>git mv</strong><br>     git rm - - cached orig; mv orig new; git add new</p>
<p><strong>git stash</strong><br>     把当前的改动压入一个栈.<br>     git stash将会把当前目录和index中的所有改动(但不包括未track的文件)压入一个栈,然后留给你一个clean的工作状态,即处于上一次最新提交处.<br>     git stash list会显示这个栈的list.<br>     git stash apply:取出stash中的上一个项目(stash@{0}),并且应用于当前的工作目录.<br>     也可以指定别的项目,比如git stash apply stash@{1}.<br>     如果你在应用stash中项目的同时想要删除它,可以用git stash pop<br>     删除stash中的项目:<br>     git stash drop: 删除上一个,也可指定参数删除指定的一个项目.<br>     git stash clear: 删除所有项目.</p>
<p><strong>git branch</strong><br>     git branch可以用来列出分支,创建分支和删除分支.<br>     git branch -v可以看见每一个分支的最后一次提交.<br>     git branch: 列出本地所有分支,当前分支会被星号标示出.<br>     git branch (branchname): 创建一个新的分支(当你用这种方式创建分支的时候,分支是基于你的上一次提交建立的).<br>     git branch -d (branchname): 删除一个分支.<br>     删除remote的分支:<br>     git push (remote-name) :(branch-name): delete a remote branch.<br>     这个是因为完整的命令形式是:<br>     git push remote-name local-branch:remote-branch<br>     而这里local-branch的部分为空,就意味着删除了remote-branch</p>
<p><strong>git checkout</strong><br>　　git checkout (branchname)   切换到一个分支.<br>     git checkout -b (branchname): 创建并切换到新的分支.<br>     这个命令是将git branch newbranch和git checkout newbranch合在一起的结果.<br>     checkout还有另一个作用:替换本地改动:<br>     git checkout –<filename><br>     此命令会使用HEAD中的最新内容替换掉你的工作目录中的文件.已添加到暂存区的改动以及新文件都不会受到影响.<br>     注意:git checkout filename会删除该文件中所有没有暂存和提交的改动,这个操作是不可逆的.</filename></p>
<p><strong>git merge</strong><br>     把一个分支merge进当前的分支.<br>     git merge [alias]/[branch]<br>     把远程分支merge到当前分支.<br>     如果出现冲突,需要手动修改,可以用git mergetool.<br>     解决冲突的时候可以用到git diff,解决完之后用git add添加,即表示冲突已经被resolved.</p>
<p><strong>git tag</strong><br>     tag a point in history as import.<br>     会在一个提交上建立永久性的书签,通常是发布一个release版本或者ship了什么东西之后加tag.<br>     比如: git tag v1.0<br>     git tag -a v1.0, -a参数会允许你添加一些信息,即make an annotated tag.<br>     当你运行git tag -a命令的时候,Git会打开一个编辑器让你输入tag信息.<br>     我们可以利用commit SHA来给一个过去的提交打tag:<br>     git tag -a v0.9 XXXX<br>     push的时候是不包含tag的,如果想包含,可以在push时加上–tags参数.<br>     fetch的时候,branch HEAD可以reach的tags是自动被fetch下来的, tags that aren’t reachable from branch heads will be skipped.如果想确保所有的tags都被包含进来,需要加上–tags选项.</p>
<p><strong>git remote</strong><br>     list, add and delete remote repository aliases.<br>     因为不需要每次都用完整的url,所以Git为每一个remote repo的url都建立一个别名,然后用git remote来管理这个list.<br>     git remote: 列出remote aliases.<br>     如果你clone一个project,Git会自动将原来的url添加进来,别名就叫做:origin.<br>     git remote -v:可以看见每一个别名对应的实际url.<br>     git remote add [alias] [url]: 添加一个新的remote repo.<br>     git remote rm [alias]: 删除一个存在的remote alias.<br>     git remote rename [old-alias] [new-alias]: 重命名.<br>     git remote set-url [alias] [url]:更新url. 可以加上—push和fetch参数,为同一个别名set不同的存取地址.</p>
<p><strong>git fetch</strong><br>     download new branches and data from a remote repository.<br>     可以git fetch [alias]取某一个远程repo,也可以git fetch –all取到全部repo<br>     fetch将会取到所有你本地没有的数据,所有取下来的分支可以被叫做remote branches,它们和本地分支一样(可以看diff,log等,也可以merge到其他分支),但是Git不允许你checkout到它们. </p>
<p><strong>git pull</strong><br>     fetch from a remote repo and try to merge into the current branch.<br>     pull == fetch + merge FETCH_HEAD<br>     git pull会首先执行git fetch,然后执行git merge,把取来的分支的head merge到当前分支.这个merge操作会产生一个新的commit.<br>     如果使用–rebase参数,它会执行git rebase来取代原来的git merge.</p>
<p><strong>git rebase</strong><br>     –rebase不会产生合并的提交,它会将本地的所有提交临时保存为补丁(patch),放在”.git/rebase”目录中,然后将当前分支更新到最新的分支尖端,最后把保存的补丁应用到分支上.<br>     rebase的过程中,也许会出现冲突,Git会停止rebase并让你解决冲突,在解决完冲突之后,用git add去更新这些内容,然后无需执行commit,只需要:<br>     git rebase –continue就会继续打余下的补丁.<br>     git rebase –abort将会终止rebase,当前分支将会回到rebase之前的状态.</p>
<p><strong>git push</strong><br>     push your new branches and data to a remote repository.<br>     git push [alias] [branch]<br>     将会把当前分支merge到alias上的[branch]分支.如果分支已经存在,将会更新,如果不存在,将会添加这个分支.<br>     如果有多个人向同一个remote repo push代码, Git会首先在你试图push的分支上运行git log,检查它的历史中是否能看到server上的branch现在的tip,如果本地历史中不能看到server的tip,说明本地的代码不是最新的,Git会拒绝你的push,让你先fetch,merge,之后再push,这样就保证了所有人的改动都会被考虑进来.</p>
<p><strong>git reflog</strong><br>     git reflog是对reflog进行管理的命令,reflog是git用来记录引用变化的一种机制,比如记录分支的变化或者是HEAD引用的变化.<br>     当git reflog不指定引用的时候,默认列出HEAD的reflog.<br>     HEAD@{0}代表HEAD当前的值,HEAD@{3}代表HEAD在3次变化之前的值.<br>     git会将变化记录到HEAD对应的reflog文件中,其路径为.git/logs/HEAD, 分支的reflog文件都放在.git/logs/refs目录下的子目录中.</p>
<p><strong>特殊符号:</strong><br>     ^ 代表父提交,当一个提交有多个父提交时,可以通过在^后面跟上一个数字,表示第几个父提交: ^ 相当于 ^1.<br>     ~<n>相当于连续的<n>个^.</n></n></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[XCode可清理空间的路径]]></title>
      <url>/2017/9/24/XCode%E5%8F%AF%E6%B8%85%E7%90%86%E7%A9%BA%E9%97%B4%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
      <content type="html"><![CDATA[<h5 id="长时间使用XCode开发后，系统磁盘中占用空间会越来越大，有些空间都是可以清理的，不会对开发产生影响"><a href="#长时间使用XCode开发后，系统磁盘中占用空间会越来越大，有些空间都是可以清理的，不会对开发产生影响" class="headerlink" title="长时间使用XCode开发后，系统磁盘中占用空间会越来越大，有些空间都是可以清理的，不会对开发产生影响"></a>长时间使用XCode开发后，系统磁盘中占用空间会越来越大，有些空间都是可以清理的，不会对开发产生影响</h5><p><img src="http://upload-images.jianshu.io/upload_images/454522-8369ce372dcaad0a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Developer"></p>
<h1 id="Archive包"><a href="#Archive包" class="headerlink" title="Archive包"></a>Archive包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/Library/Developer/Xcode/Archives</div></pre></td></tr></table></figure>
<p>使用Xcode进行Archive操作的结果会存储在这个文件夹中，可以删除你不需要再和crash log关联的包，<strong>建议备份</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/454522-e80fc9c6f73a0be8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Archives"><br><a id="more"></a></p>
<h1 id="编译文件"><a href="#编译文件" class="headerlink" title="编译文件"></a>编译文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/Library/Developer/Xcode/DerivedData</div></pre></td></tr></table></figure>
<p>此文件夹存储了你项目编译过程中产生的文件。可以全部删除，仅会使工程下一次重新编译稍慢。<br><img src="http://upload-images.jianshu.io/upload_images/454522-f9b11b79a26c47b1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="DerivedData"></p>
<h1 id="真机log"><a href="#真机log" class="headerlink" title="真机log"></a>真机log</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/Library/Developer/Xcode/iOS Device Logs</div></pre></td></tr></table></figure>
<p>此文件夹存储了devices链接真机后下载的真机log，包含crashlog。可以全部删除，<strong>建议备份</strong>。<br><img src="http://upload-images.jianshu.io/upload_images/454522-2ad1799b358b8ddd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS Device Logs"></p>
<h1 id="真机支持"><a href="#真机支持" class="headerlink" title="真机支持"></a>真机支持</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/Library/Developer/Xcode/iOS DeviceSupport</div></pre></td></tr></table></figure>
<p> 连接过的设备都会在此文件夹生成相应的iOS版本号的文件夹。仅需要保留你仍然在使用的设备的版本号对应的文件夹即可<br><img src="http://upload-images.jianshu.io/upload_images/454522-de7b0fd0146f535c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="iOS DeviceSupport"></p>
<h1 id="模拟器沙盒"><a href="#模拟器沙盒" class="headerlink" title="模拟器沙盒"></a>模拟器沙盒</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/Library/Developer/CoreSimulator</div></pre></td></tr></table></figure>
<p>这个文件夹是模拟器产生的应用沙盒文件，<strong>不能直接清空</strong><br><img src="http://upload-images.jianshu.io/upload_images/454522-058572d4ea37c8e9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CoreSimulator"></p>
<h1 id="手机备份"><a href="#手机备份" class="headerlink" title="手机备份"></a>手机备份</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">~/Library/Application\ Support/MobileSync/Backup</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tools </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Mac配置Docker+NodeJS服务]]></title>
      <url>/2017/9/20/Mac%E9%85%8D%E7%BD%AEDocker+NodeJS%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>服务器端环境配置请点击：<a href="http://www.jianshu.com/p/12cee6725b58" target="_blank" rel="external">CentOS配置Docker+NodeJS服务</a></p>
<h1 id="Mac的一些安装"><a href="#Mac的一些安装" class="headerlink" title="Mac的一些安装"></a>Mac的一些安装</h1><h3 id="安装-NodeJS"><a href="#安装-NodeJS" class="headerlink" title="安装 NodeJS"></a>安装 NodeJS</h3><p><a href="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a></p>
<h3 id="安装loopback-cli"><a href="#安装loopback-cli" class="headerlink" title="安装loopback-cli"></a>安装loopback-cli</h3><p><a href="http://loopback.io" title="http://loopback.io" target="_blank" rel="external">http://loopback.io</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g loopback-cli</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>安装zsh作为默认SHELL<br><a href="http://blog.csdn.net/w670328683/article/details/49782601" title="http://blog.csdn.net/w670328683/article/details/49782601" target="_blank" rel="external">http://blog.csdn.net/w670328683/article/details/49782601</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew install zsh</div><div class="line">zsh --version</div><div class="line">chsh -s /bin/zsh</div><div class="line">echo $SHELL</div></pre></td></tr></table></figure></p>
<p>安装oh-my-zsh美化zsh<br><a href="https://github.com/robbyrussell/oh-my-zsh" title="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure></p>
<h3 id="安装tmux分屏幕"><a href="#安装tmux分屏幕" class="headerlink" title="安装tmux分屏幕"></a>安装tmux分屏幕</h3><p><a href="https://github.com/gpakosz/.tmux" title="https://github.com/gpakosz/.tmux" target="_blank" rel="external">https://github.com/gpakosz/.tmux</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install tmux</div></pre></td></tr></table></figure></p>
<h3 id="安装mosh"><a href="#安装mosh" class="headerlink" title="安装mosh"></a>安装mosh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install mosh</div></pre></td></tr></table></figure>
<h3 id="安装mongodb数据库-只在docker使用的话不用装"><a href="#安装mongodb数据库-只在docker使用的话不用装" class="headerlink" title="安装mongodb数据库(只在docker使用的话不用装)"></a>安装mongodb数据库(只在docker使用的话不用装)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew update</div><div class="line">brew install mongodb</div></pre></td></tr></table></figure>
<h5 id="遇到一个问题"><a href="#遇到一个问题" class="headerlink" title="遇到一个问题"></a>遇到一个问题</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Error: Running Homebrew as root is extremely dangerous and no longer supported.</div><div class="line">As Homebrew does not drop privileges on installation you would be giving all</div><div class="line">build scripts full access to your system.</div></pre></td></tr></table></figure>
<h5 id="这样解决"><a href="#这样解决" class="headerlink" title="这样解决"></a>这样解决</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chown -R $(whoami) /usr/local</div><div class="line">brew install mongodb</div></pre></td></tr></table></figure>
<h3 id="安装redis数据-只在docker使用的话不用装"><a href="#安装redis数据-只在docker使用的话不用装" class="headerlink" title="安装redis数据(只在docker使用的话不用装)"></a>安装redis数据(只在docker使用的话不用装)</h3><p><a href="https://redis.io" target="_blank" rel="external">https://redis.io</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tar xzf redis-4.0.1.tar</div><div class="line">cd redis-4.0.1</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure>
<h3 id="安装mongo-express-只在docker使用的话不用装"><a href="#安装mongo-express-只在docker使用的话不用装" class="headerlink" title="安装mongo-express(只在docker使用的话不用装)"></a>安装mongo-express(只在docker使用的话不用装)</h3><p><a href="https://github.com/mongo-express/mongo-express" target="_blank" rel="external">https://github.com/mongo-express/mongo-express</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g mongo-express</div></pre></td></tr></table></figure>
<h3 id="安装Vim的插件janus"><a href="#安装Vim的插件janus" class="headerlink" title="安装Vim的插件janus"></a>安装Vim的插件janus</h3><p>The distribution also requires ack, ctags, git, ruby and rake.<br><a href="https://github.com/carlhuda/janus" title="https://github.com/carlhuda/janus" target="_blank" rel="external">https://github.com/carlhuda/janus</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://bit.ly/janus-bootstrap | bash</div></pre></td></tr></table></figure></p>
<h3 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h3><p><a href="http://pm2.keymetrics.io" target="_blank" rel="external">http://pm2.keymetrics.io</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install pm2 -g</div><div class="line">npm install pm2@latest -g</div></pre></td></tr></table></figure></p>
<h3 id="安装docker，docker-compose"><a href="#安装docker，docker-compose" class="headerlink" title="安装docker，docker-compose"></a>安装docker，docker-compose</h3><p><a href="https://www.docker.com/" target="_blank" rel="external">https://www.docker.com/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">brew search docker</div><div class="line">brew update</div><div class="line">brew install docker</div><div class="line">brew install docker-compose</div></pre></td></tr></table></figure></p>
<h3 id="安装httpie"><a href="#安装httpie" class="headerlink" title="安装httpie"></a>安装httpie</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install httpie</div></pre></td></tr></table></figure>
<h1 id="Mac的代码管理："><a href="#Mac的代码管理：" class="headerlink" title="Mac的代码管理："></a>Mac的代码管理：</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git clone https://git.coding.net/zbsas/webstore-backend.git</div><div class="line">git checkout next</div><div class="line">git submodule init</div><div class="line">git submodule update</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>发现子模块代码下不来，这样解决：<br>查看公钥私钥<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd ~/.ssh</div></pre></td></tr></table></figure></p>
<p>.pub 文件是你的公钥，另一个则是私钥。如果找不到这样的文件，你可以通过运行 程序来创建它们：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen</div></pre></td></tr></table></figure>
<p>然后在coding上设上公钥，子目录代码可以下来了</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git submodule update</div></pre></td></tr></table></figure>
<h3 id="上传服务器代码"><a href="#上传服务器代码" class="headerlink" title="上传服务器代码"></a>上传服务器代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -avuzb xiaoyx root@dlin.top:~/</div></pre></td></tr></table></figure>
<h5 id="过滤没有必要的文件和目录"><a href="#过滤没有必要的文件和目录" class="headerlink" title="过滤没有必要的文件和目录"></a>过滤没有必要的文件和目录</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rsync -avuzb --exclude=.git --exclude=node_modules webstore-backend/* root@dlin.top:~/</div></pre></td></tr></table></figure>
<h3 id="下载服务器代码"><a href="#下载服务器代码" class="headerlink" title="下载服务器代码"></a>下载服务器代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rsync -avuzb root@dlin.top:/root/xiaoyx/ .</div><div class="line">scp root@dlin.top:/root/xiaoyx/docker-compose.yml .</div></pre></td></tr></table></figure>
<h1 id="代码调试："><a href="#代码调试：" class="headerlink" title="代码调试："></a>代码调试：</h1><h3 id="开启redis"><a href="#开启redis" class="headerlink" title="开启redis"></a>开启redis</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">src/redis-server</div></pre></td></tr></table></figure>
<p>也可以用pm2开启redis<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start src/redis-server</div></pre></td></tr></table></figure></p>
<h3 id="开启mongodb"><a href="#开启mongodb" class="headerlink" title="开启mongodb"></a>开启mongodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /Code-Backend/mongodb</div><div class="line">mkdir data</div><div class="line">mkdir log</div><div class="line">mongod --dbpath data --logpath log/mongod.log --logappend --fork</div></pre></td></tr></table></figure>
<h3 id="关闭mongodb"><a href="#关闭mongodb" class="headerlink" title="关闭mongodb"></a>关闭mongodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mongo</div><div class="line">use admin</div><div class="line">db.shutdownServer();</div></pre></td></tr></table></figure>
<h3 id="pm2-看log"><a href="#pm2-看log" class="headerlink" title="pm2 看log"></a>pm2 看log</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /Code-Backend/webstore-backend</div><div class="line">pm2 start development.json</div><div class="line">pm2 logs 1</div><div class="line">pm2 stop all</div></pre></td></tr></table></figure>
<hr>
<h1 id="docker调试"><a href="#docker调试" class="headerlink" title="docker调试"></a>docker调试</h1><p><a href="http://www.cnblogs.com/52fhy/p/5991344.html" target="_blank" rel="external">Docker之Compose服务编排</a></p>
<h5 id="开启和关闭"><a href="#开启和关闭" class="headerlink" title="开启和关闭"></a>开启和关闭</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">docker ps</div><div class="line">docker-compose up -d</div><div class="line">docker-compose stop</div><div class="line">docker-compose restart</div><div class="line">docker-compose down</div></pre></td></tr></table></figure>
<h5 id="重置一个docker"><a href="#重置一个docker" class="headerlink" title="重置一个docker"></a>重置一个docker</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker-compose down</div><div class="line">docker ps -a</div><div class="line">docker rm codebackend_ws_1</div><div class="line">docker ps -a</div><div class="line">docker image ls</div><div class="line">docker image rm codebackend_ws</div><div class="line">docker-compose up -d</div></pre></td></tr></table></figure>
<h5 id="启动并看log"><a href="#启动并看log" class="headerlink" title="启动并看log"></a>启动并看log</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker-compose up</div></pre></td></tr></table></figure>
<h5 id="看其中某一个log"><a href="#看其中某一个log" class="headerlink" title="看其中某一个log"></a>看其中某一个log</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker ps</div><div class="line">docker exec -it codebackend_ws_1 sh</div><div class="line">pm2 list</div><div class="line">pm2 logs 1</div></pre></td></tr></table></figure>
<h5 id="批处理脚本"><a href="#批处理脚本" class="headerlink" title="批处理脚本"></a>批处理脚本</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 关闭所有正在运行容器</div><div class="line">docker ps | awk  &apos;&#123;print $1&#125;&apos; | xargs docker stop</div><div class="line"># 删除所有容器应用</div><div class="line">docker ps -a | awk  &apos;&#123;print $1&#125;&apos; | xargs docker rm</div><div class="line"># 或者</div><div class="line">docker rm $(docker ps -a -q)</div></pre></td></tr></table></figure>
<h3 id="mongo-express"><a href="#mongo-express" class="headerlink" title="mongo-express"></a>mongo-express</h3><p><a href="https://github.com/mongo-express/mongo-express" target="_blank" rel="external">https://github.com/mongo-express/mongo-express</a></p>
<h4 id="先建立用户"><a href="#先建立用户" class="headerlink" title="先建立用户"></a>先建立用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">docker exec -it codebackend_mongodb_1 mongo</div><div class="line">show dbs;</div><div class="line">use admin</div></pre></td></tr></table></figure>
<h5 id="管理员用户"><a href="#管理员用户" class="headerlink" title="管理员用户"></a>管理员用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.createUser(&#123;</div><div class="line">   user : &quot;用户名&quot;,</div><div class="line">   pwd  : &quot;密码&quot;,</div><div class="line">   roles : [</div><div class="line">       &#123;</div><div class="line">           role : &quot;userAdminAnyDatabase&quot;,</div><div class="line">           db : &quot;admin&quot;</div><div class="line">       &#125;</div><div class="line">   ]</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h5 id="特定数据库管理权限的用户"><a href="#特定数据库管理权限的用户" class="headerlink" title="特定数据库管理权限的用户"></a>特定数据库管理权限的用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">use &quot;数据库名&quot;</div><div class="line"> db.createUser(&#123;</div><div class="line">    user : &quot;用户名&quot;,</div><div class="line">    pwd  : &quot;密码&quot;,</div><div class="line">    roles : [</div><div class="line">        &#123;</div><div class="line">            role : &quot;userAdmin&quot;,</div><div class="line">            db : &quot;数据库名&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
<h5 id="一般用户"><a href="#一般用户" class="headerlink" title="一般用户"></a>一般用户</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">db &quot;数据库名&quot;</div><div class="line"> db.createUser(&#123;</div><div class="line">    user : &quot;用户名&quot;,</div><div class="line">    pwd  : &quot;密码&quot;,</div><div class="line">    roles: [</div><div class="line">        &#123;</div><div class="line">            role : &quot;read&quot;,  # or &quot;readWrite&quot;</div><div class="line">            db : &quot;数据库名&quot;,</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line"> &#125;)</div></pre></td></tr></table></figure>
<blockquote>
<p>例：创建一个数据库用户，对该数据具有读写权限</p>
<p>创建一个对数据库具有读写权限的数据库用户<br>use dbname ;<br>db.createUser({user: “dbuser”, pwd: “dbuseradmin”, roles:[{role: “readWrite”, db: “dbname”}] })</p>
<p>数据库用户登录<br>mongo dbname -u dbuser -p dbduseradmin</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd YOUR_PATH/node_modules/mongo-express/ &amp;&amp; node app.js</div><div class="line">mongo-express -u user -p password -d database</div><div class="line">mongo-express -u dlin -p dlin -d webstore-prod</div></pre></td></tr></table></figure>
<h5 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongo-express -u user -p password -d database -H mongoDBHost -P mongoDBPort</div></pre></td></tr></table></figure>
<h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mongo-express -a -u superuser -p password</div><div class="line">mongo-express -h</div></pre></td></tr></table></figure>
<h5 id="Usage-Docker"><a href="#Usage-Docker" class="headerlink" title="Usage (Docker)"></a>Usage (Docker)</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">docker build -t mongo-express .</div><div class="line">docker run -it --rm -p 8081:8081 --link YOUR_MONGODB_CONTAINER:mongo mongo-express</div></pre></td></tr></table></figure>
<p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -it --rm -p 8081:8081 --link codebackend_mongodb_1:mongo mongo-express</div></pre></td></tr></table></figure></p>
<p>You can use the following environment variables to modify the container’s configuration:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Default</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>ME_CONFIG_MONGODB_SERVER</code></td>
<td><code>mongo</code> or <code>localhost</code></td>
<td>MongoDB host name or IP address. The default is <code>localhost</code> in the config file and <code>mongo</code> in the docker image. If it is a replica set, use a comma delimited list of the host names.</td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_PORT</code></td>
<td><code>27017</code></td>
<td>MongoDB port.</td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_URL</code></td>
<td><code>mongodb://admin:pass@localhost:27017/db?ssl=false</code></td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_ENABLE_ADMIN</code></td>
<td><code>false</code></td>
<td>Enable administrator access. Send strings: <code>&quot;true&quot;</code> or <code>&quot;false&quot;</code>.</td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_ADMINUSERNAME</code></td>
<td><code> </code></td>
<td>Administrator username.</td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_ADMINPASSWORD</code></td>
<td><code> </code></td>
<td>Administrator password.</td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_AUTH_DATABASE</code></td>
<td><code>db</code></td>
<td>Database name (only needed if <code>ENABLE_ADMIN</code> is <code>&quot;false&quot;</code>).</td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_AUTH_USERNAME</code></td>
<td><code>admin</code></td>
<td>Database username (only needed if <code>ENABLE_ADMIN</code> is <code>&quot;false&quot;</code>).</td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_AUTH_PASSWORD</code></td>
<td><code>pass</code></td>
<td>Database password (only needed if <code>ENABLE_ADMIN</code> is <code>&quot;false&quot;</code>).</td>
</tr>
<tr>
<td><code>ME_CONFIG_SITE_BASEURL</code></td>
<td><code>/</code></td>
<td>Set the express baseUrl to ease mounting at a subdirectory. Remember to include a leading and trailing slash.</td>
</tr>
<tr>
<td><code>ME_CONFIG_SITE_COOKIESECRET</code></td>
<td><code>cookiesecret</code></td>
<td>String used by <a href="https://www.npmjs.com/package/cookie-parser" target="_blank" rel="external">cookie-parser middleware</a> to sign cookies.</td>
</tr>
<tr>
<td><code>ME_CONFIG_SITE_SESSIONSECRET</code></td>
<td><code>sessionsecret</code></td>
<td>String used to sign the session ID cookie by <a href="https://www.npmjs.com/package/express-session" target="_blank" rel="external">express-session middleware</a>.</td>
</tr>
<tr>
<td><code>ME_CONFIG_BASICAUTH_USERNAME</code></td>
<td><code>admin</code></td>
<td>mongo-express web login name. Sending an empty string will disable basic authentication.</td>
</tr>
<tr>
<td><code>ME_CONFIG_BASICAUTH_PASSWORD</code></td>
<td><code>pass</code></td>
<td>mongo-express web login password.</td>
</tr>
<tr>
<td><code>ME_CONFIG_REQUEST_SIZE</code></td>
<td><code>100kb</code></td>
<td>Used to configure maximum mongo update payload size. CRUD operations above this size will fail due to restrictions in <a href="https://www.npmjs.com/package/body-parser" target="_blank" rel="external">body-parser</a>.</td>
</tr>
<tr>
<td><code>ME_CONFIG_OPTIONS_EDITORTHEME</code></td>
<td><code>rubyblue</code></td>
<td>Web editor color theme, <a href="http://codemirror.net/demo/theme.html" target="_blank" rel="external">more here</a>.</td>
</tr>
<tr>
<td><code>ME_CONFIG_SITE_SSL_ENABLED</code></td>
<td><code>false</code></td>
<td>Enable SSL.</td>
</tr>
<tr>
<td><code>ME_CONFIG_MONGODB_SSLVALIDATE</code></td>
<td><code>true</code></td>
<td>Validate mongod server certificate against CA</td>
</tr>
<tr>
<td><code>ME_CONFIG_SITE_SSL_CRT_PATH</code></td>
<td><code> </code></td>
<td>SSL certificate file.</td>
</tr>
<tr>
<td><code>ME_CONFIG_SITE_SSL_KEY_PATH</code></td>
<td><code> </code></td>
<td>SSL key file.</td>
</tr>
<tr>
<td><code>ME_CONFIG_SITE_GRIDFS_ENABLED</code></td>
<td><code>false</code></td>
<td>Enable gridFS to manage uploaded files.</td>
</tr>
</tbody>
</table>
<p>Example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">docker run -it --rm \</div><div class="line">    --name mongo-express \</div><div class="line">    --link web_db_1:mongo \</div><div class="line">    -p 8081:8081 \</div><div class="line">    -e ME_CONFIG_OPTIONS_EDITORTHEME=&quot;ambiance&quot; \</div><div class="line">    -e ME_CONFIG_BASICAUTH_USERNAME=&quot;&quot; \</div><div class="line">    mongo-express</div></pre></td></tr></table></figure>
<h5 id="设置dockor运行的配置文件"><a href="#设置dockor运行的配置文件" class="headerlink" title="设置dockor运行的配置文件"></a>设置dockor运行的配置文件</h5><p><strong>docker-compose.yml</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mongo-express:</div><div class="line">    image: mongo-express</div><div class="line">    depends_on:</div><div class="line">      - mongodb</div><div class="line">    restart: always</div><div class="line">    links:</div><div class="line">      - mongodb:mongo</div><div class="line">    ports:</div><div class="line">      - &quot;8081:8081&quot;</div><div class="line">    environment:</div><div class="line">      - ME_CONFIG_MONGODB_ADMINUSERNAME = admin</div><div class="line">      - ME_CONFIG_MONGODB_ADMINPASSWORD = pass</div></pre></td></tr></table></figure>
<h5 id="设置登录页账号密码"><a href="#设置登录页账号密码" class="headerlink" title="设置登录页账号密码"></a>设置登录页账号密码</h5><p><a href="https://caddyserver.com/docs/basicauth" target="_blank" rel="external">https://caddyserver.com/docs/basicauth</a></p>
<h5 id="Caddyfile"><a href="#Caddyfile" class="headerlink" title="Caddyfile"></a>Caddyfile</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">http://db.local.dlin.top &#123;</div><div class="line">  basicauth / admin pass</div><div class="line">  proxy / mongo-express:8081 &#123;</div><div class="line">    transparent</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LoopBack学习之创建应用程序]]></title>
      <url>/2017/9/18/LoopBack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F/</url>
      <content type="html"><![CDATA[<p>英文地址：<br><a href="http://loopback.io/doc/en/lb3/Creating-an-application.html" target="_blank" rel="external">http://loopback.io/doc/en/lb3/Creating-an-application.html</a></p>
<h1 id="创建应用程序"><a href="#创建应用程序" class="headerlink" title="创建应用程序"></a>创建应用程序</h1><h3 id="使用应用程序生成器"><a href="#使用应用程序生成器" class="headerlink" title="使用应用程序生成器"></a>使用应用程序生成器</h3><p>创建应用程序的最简单方法是使用应用程序生成器。</p>
<p>可以通过从头开始编写一个LoopBack应用程序，但应用程序生成器可以做所有的“繁重的”来创建标准项目布局的基本脚手架。然后，您可以使用CLI工具自定义应用程序以满足您的需求。</p>
<p>一般来说，文档假设您已经使用应用程序生成器创建了应用程序。</p>
<p>创建应用程序后，您可能需要配置它，例如：关闭堆栈跟踪，禁用API资源管理器，并检索环境变量的值。有关详细信息，请参阅  环境特定配置。</p>
<h3 id="标准工程布局"><a href="#标准工程布局" class="headerlink" title="标准工程布局"></a>标准工程布局</h3><p>应用程序生成器创建具有标准项目布局的应用程序。<br><a id="more"></a><br>总结：</p>
<ul>
<li><p>server 目录</p>
<ul>
<li>server.js - 主要应用脚本; 见下文。</li>
<li>config.json - 全局应用程序设置，如REST API根，要使用的主机名和端口等。请参阅config.json。</li>
<li>model-config.json - 将模型绑定到数据源，并指定模型是否暴露于REST之外。请参阅model-config.json。</li>
<li>datasources.json - 数据源配置文件。请参阅datasources.json。</li>
</ul>
</li>
<li><p>client 目录（除README存根之外为空）</p>
</li>
<li>common/models目录 - 在使用模型生成器创建模型时创建。<br>每个模型的JSON文件和JavaScript文件（例如my-model.json和my-model.js）。</li>
</ul>
<p><strong>主应用脚本（server.js）</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">var loopback = require(&apos;loopback&apos;);</div><div class="line">var boot = require(&apos;loopback-boot&apos;);</div><div class="line">var app = module.exports = loopback();</div><div class="line">app.start = function() &#123;</div><div class="line">  // start the web server</div><div class="line">  return app.listen(function() &#123;</div><div class="line">    app.emit(&apos;started&apos;);</div><div class="line">    var baseUrl = app.get(&apos;url&apos;).replace(/\/$/, &apos;&apos;);</div><div class="line">    console.log(&apos;Web server listening at: %s&apos;, baseUrl);</div><div class="line">    if (app.get(&apos;loopback-component-explorer&apos;)) &#123;</div><div class="line">      var explorerPath = app.get(&apos;loopback-component-explorer&apos;).mountPath;</div><div class="line">      console.log(&apos;Browse your REST API at %s%s&apos;, baseUrl, explorerPath);</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;;</div><div class="line">// Bootstrap the application, configure models, datasources and middleware.</div><div class="line">// Sub-apps like REST API are mounted via boot scripts.</div><div class="line">boot(app, __dirname, function(err) &#123;</div><div class="line">  if (err) throw err;</div><div class="line">  // start the server if `$ node server.js`</div><div class="line">  if (require.main === module)</div><div class="line">    app.start();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h1 id="环境特定配置"><a href="#环境特定配置" class="headerlink" title="环境特定配置"></a>环境特定配置</h1><h3 id="概观"><a href="#概观" class="headerlink" title="概观"></a>概观</h3><p>LoopBack应用程序具有以下类型的配置文件：</p>
<ul>
<li>默认情况下，  应用范围配置文件server/config.json。您也可以使用  server/config.local.js 设置不能使用简单JSON的值。</li>
<li>默认情况下，  数据源配置文件server/datasources.json。您也可以使用  server/datasources.local.js 设置不能使用简单JSON的值。</li>
<li>默认情况下  ，模型的应用程序级配置server/model-config.json。</li>
<li>中间件配置文件，默认情况下  server/middleware.json。</li>
<li>缺省情况下  ，LoopBack组件的配置文件server/component-config.json。<blockquote>
<p> 注意： 使用*.js文件配置LoopBack应用程序将仅在原始.json文件保留到位时才起作用。而不是用.json文件替换文件.js ，您应该覆盖.json文件中的.js文件的值。也就是说，通过将默认.json文件保留为空，所有配置都可以在.js文件中完成。</p>
</blockquote>
</li>
</ul>
<p>LoopBack将始终加载以下配置文件（如果存在）</p>
<ul>
<li>server/config.json。</li>
<li>server/config.local.json 或 server/config.local.js。 </li>
<li>server/datasources.json</li>
<li>server/datasources.local.json 要么 server/datasources.local.js</li>
<li>server/model-config.json</li>
<li>server/model-config.local.json 要么 server/model-config.local.js</li>
<li>server/middleware.json</li>
<li>server/middleware.local.json 要么 server/middleware.local.js</li>
<li>server/component-config.json</li>
<li>server/component-config.local.json 要么 server/component-config.local.js</li>
</ul>
<p>另外，当设置NODE_ENV环境变量时，LoopBack将从以下位置加载配置：</p>
<ul>
<li>server/config.env.json/js</li>
<li>server/datasources.env.json/js</li>
<li>server/model-config.env.json/js</li>
<li>server/middleware.env.json/js</li>
<li>server/component-config.env.json/js</li>
</ul>
<p>env NODE_ENV的值（通常是“开发”，“分期”或“生产”）在哪里  。 这使您能够为开发，分期和生产环境设置配置。</p>
<blockquote>
<p> 注意：<br>LoopBack应用程序可以加载多个可能会相互冲突的配置文件。由优先级最高的文件设置的值将始终生效。优先事项是：</p>
<ol>
<li>环境特定的配置，基于NODE_ENV的值; 例如，server/config.staging.json。</li>
<li>本地配置文件 ; 例如，server/config.local.json。</li>
<li>默认配置文件 ; 例如，server/config.json。</li>
</ol>
</blockquote>
<p>应用程序配置文件示例：</p>
<p>config.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;host&quot;: &quot;localhost&quot;,</div><div class="line">  &quot;restApiRoot&quot;: &quot;/api&quot;,</div><div class="line">  &quot;host&quot;: &quot;0.0.0.0&quot;,</div><div class="line">  &quot;port&quot;: 3000,</div><div class="line">  &quot;remoting&quot;: &#123;</div><div class="line">    &quot;context&quot;: false,</div><div class="line">    &quot;rest&quot;: &#123;</div><div class="line">      &quot;normalizeHttpPath&quot;: false,</div><div class="line">      &quot;xml&quot;: false</div><div class="line">    &#125;,</div><div class="line">    &quot;json&quot;: &#123;</div><div class="line">      &quot;strict&quot;: false,</div><div class="line">      &quot;limit&quot;: &quot;100kb&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;urlencoded&quot;: &#123;</div><div class="line">      &quot;extended&quot;: true,</div><div class="line">      &quot;limit&quot;: &quot;100kb&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;cors&quot;: false,</div><div class="line">    &quot;handleErrors&quot;: false</div><div class="line">  &#125;,</div><div class="line">  &quot;legacyExplorer&quot;: false</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>config.local.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&apos;use strict&apos;;</div><div class="line"></div><div class="line">var GLOBAL_CONFIG = require(&apos;../global-config&apos;);</div><div class="line"></div><div class="line">var env = (process.env.NODE_ENV || &apos;development&apos;);</div><div class="line">var isDevEnv = env === &apos;development&apos; || env === &apos;test&apos;;</div><div class="line"></div><div class="line">module.exports = &#123;</div><div class="line">  hostname: GLOBAL_CONFIG.hostname,</div><div class="line">  restApiRoot: GLOBAL_CONFIG.restApiRoot,</div><div class="line">  livereload: process.env.LIVE_RELOAD,</div><div class="line">  isDevEnv: isDevEnv,</div><div class="line">  indexFile: require.resolve(isDevEnv ?</div><div class="line">    &apos;../client/ngapp/index.html&apos; : &apos;../client/dist/index.html&apos;),</div><div class="line">  port: GLOBAL_CONFIG.port,</div><div class="line">  legacyExplorer: GLOBAL_CONFIG.legacyExplorer</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>数据源配置文件示例：</p>
<p>datasources.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;db&quot;: &#123;</div><div class="line">    &quot;name&quot;: &quot;db&quot;,</div><div class="line">    &quot;connector&quot;: &quot;memory&quot;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>datasources.production.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// Use the same environment-based configuration as in staging</div><div class="line">module.exports = require(&apos;./datasources.staging.js&apos;);</div></pre></td></tr></table></figure>
<p>datasources.staging.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  db: &#123;</div><div class="line">    connector: &apos;mongodb&apos;,</div><div class="line">    hostname: process.env.DB_HOST || &apos;localhost&apos;,</div><div class="line">    port: process.env.DB_PORT || 27017,</div><div class="line">    user: process.env.DB_USER,</div><div class="line">    password: process.env.DB_PASSWORD,</div><div class="line">    database: &apos;todo-example&apos;,</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>中间件配置文件的示例：<br>middleware.json<br><a href="http://loopback.io/doc/en/lb3/middleware.json.html" target="_blank" rel="external">http://loopback.io/doc/en/lb3/middleware.json.</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;initial:before&quot;: &#123;</div><div class="line">    &quot;loopback#favicon&quot;: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;initial&quot;: &#123;</div><div class="line">    &quot;compression&quot;: &#123;&#125;,</div><div class="line">    &quot;cors&quot;: &#123;</div><div class="line">      &quot;params&quot;: &#123;</div><div class="line">        &quot;origin&quot;: true,</div><div class="line">        &quot;credentials&quot;: true,</div><div class="line">        &quot;maxAge&quot;: 86400</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;helmet#xssFilter&quot;: &#123;&#125;,</div><div class="line">    &quot;helmet#frameguard&quot;: &#123;</div><div class="line">      &quot;params&quot;: [</div><div class="line">        &quot;deny&quot;</div><div class="line">      ]</div><div class="line">    &#125;,</div><div class="line">    &quot;helmet#hsts&quot;: &#123;</div><div class="line">      &quot;params&quot;: &#123;</div><div class="line">        &quot;maxAge&quot;: 0,</div><div class="line">        &quot;includeSubdomains&quot;: true</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    &quot;helmet#hidePoweredBy&quot;: &#123;&#125;,</div><div class="line">    &quot;helmet#ieNoOpen&quot;: &#123;&#125;,</div><div class="line">    &quot;helmet#noSniff&quot;: &#123;&#125;,</div><div class="line">    &quot;helmet#noCache&quot;: &#123;</div><div class="line">      &quot;enabled&quot;: false</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;session&quot;: &#123;&#125;,</div><div class="line">  &quot;auth&quot;: &#123;&#125;,</div><div class="line">  &quot;parse&quot;: &#123;&#125;,</div><div class="line">  &quot;routes&quot;: &#123;</div><div class="line">    &quot;loopback#rest&quot;: &#123;</div><div class="line">      &quot;paths&quot;: [</div><div class="line">        &quot;$&#123;restApiRoot&#125;&quot;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;files&quot;: &#123;&#125;,</div><div class="line">  &quot;final&quot;: &#123;</div><div class="line">    &quot;loopback#urlNotFound&quot;: &#123;&#125;</div><div class="line">  &#125;,</div><div class="line">  &quot;final:after&quot;: &#123;</div><div class="line">    &quot;strong-error-handler&quot;: &#123;&#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>middleware.development.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;final:after&quot;: &#123;</div><div class="line">    &quot;strong-error-handler&quot;: &#123;</div><div class="line">      &quot;params&quot;: &#123;</div><div class="line">        &quot;debug&quot;: true,</div><div class="line">        &quot;log&quot;: true</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有关示例应用程序，请参见  <a href="https://github.com/strongloop/loopback-example-full-stack/tree/master/server。" target="_blank" rel="external">https://github.com/strongloop/loopback-example-full-stack/tree/master/server。</a></p>
<blockquote>
<p> 重要：<br>即使使用环境特定的配置文件，LoopBack仍然需要默认的基本文件。JSON文件中的空对象就足够了。</p>
</blockquote>
<h3 id="应用范围配置"><a href="#应用范围配置" class="headerlink" title="应用范围配置"></a>应用范围配置</h3><p>在其中定义应用程序服务器端设置  server/config.json。</p>
<p>您可以覆盖在其中设置的值  config.json ：</p>
<ul>
<li>config.local.js 要么 config.local.json</li>
<li>config.env.js 或者  ， （通常   或  ） 的值  在哪里  。例如。config.env.jsonenvNODE_ENVdevelopmentproductionconfig.production.json<blockquote>
<p> 重要提示： 附加文件可以仅使用值类型（字符串，数字）覆盖顶级键。不支持嵌套对象和数组。</p>
</blockquote>
</li>
</ul>
<p>例如：</p>
<p>config.production.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  host: process.env.CUSTOM_HOST,</div><div class="line">  port: process.env.CUSTOM_PORT</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="确保不返回堆栈跟踪"><a href="#确保不返回堆栈跟踪" class="headerlink" title="确保不返回堆栈跟踪"></a>确保不返回堆栈跟踪</h3><p>默认情况下，JSON回应中不会返回堆栈跟踪，但如果它们已被启用进行开发和调试，请确保它们已关闭生产。</p>
<ul>
<li>将NODE_ENV环境变量设置为“production”</li>
<li>包括以下内容  server/middleware.production.json：</li>
</ul>
<p>server/middleware.production.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&quot;final:after&quot;: &#123;</div><div class="line">    &quot;strong-error-handler&quot;: &#123;&#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<blockquote>
<p> 注： 该应用程序生成器创建一个middleware.developmnet.json与你的上述配置文件，因此，所有你需要做的就是确保NODE_ENV环境变量不是development。</p>
</blockquote>
<h3 id="禁用API资源管理器"><a href="#禁用API资源管理器" class="headerlink" title="禁用API资源管理器"></a>禁用API资源管理器</h3><p> 当您开发应用程序时，LoopBack  API Explorer非常棒，但出于安全考虑，您可能不希望在生产环境中公开它。</p>
<p>对于使用loopback-component-explorer的应用程序，在生产中禁用资源管理器：</p>
<ul>
<li>将NODE_ENV环境变量设置为“production”。</li>
<li>然后在server/component-config.production.json：</li>
</ul>
<p>server/middleware.production.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;loopback-component-explorer&quot;: null</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="在HTTP响应中包含堆栈跟踪"><a href="#在HTTP响应中包含堆栈跟踪" class="headerlink" title="在HTTP响应中包含堆栈跟踪"></a>在HTTP响应中包含堆栈跟踪</h3><p>默认情况下，LoopBack 3.0应用程序可以从HTTP响应（典型的生产）中排除错误堆栈跟踪。对于开发和调试，您可能希望包含它们; 要这样做，设置NODE_ENV环境变量，development以便应用程序使用middleware.development.json。</p>
<p>该文件包括以下内容，其中包括HTTP响应中的堆栈跟踪：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;final:after&quot;: &#123;</div><div class="line">    &quot;strong-error-handler&quot;: &#123;</div><div class="line">      &quot;params&quot;: &#123;</div><div class="line">        &quot;debug&quot;: true,</div><div class="line">        &quot;log&quot;: true</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据源配置<br>您可以覆盖datasources.json 以下文件中设置的值  ：</p>
<ul>
<li>datasources.local.js 要么 datasources.local.json</li>
<li>datasources.env.js 或者  ， 环境变量（通常为   或  ） 的值  在哪里  。例如，。datasources.env.jsonenvNODE_ENVdevelopmentproductiondatasources.production.json</li>
</ul>
<p>示例数据源：</p>
<p>datasources.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  db: &#123;</div><div class="line">    connector: &apos;memory&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>datasources.production.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  db: &#123;</div><div class="line">    connector: &apos;mongodb&apos;,</div><div class="line">    database: &apos;myapp&apos;,</div><div class="line">    user: &apos;myapp&apos;,</div><div class="line">    password: &apos;secret&apos;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>您还可以将文件配置为使用环境变量：datasource.env.js</p>
<p>datasources.production.js</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  db: &#123;</div><div class="line">    connector: &apos;mongodb&apos;,</div><div class="line">    hostname: process.env.DB_HOST,</div><div class="line">    port: process.env.DB_PORT || 27017,</div><div class="line">    user: process.env.DB_USER,</div><div class="line">    password: process.env.DB_PASSWORD,</div><div class="line">    database: &apos;myapp&apos;,</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>在上面的例子中，运行export PRODUCTION=true（或set PRODUCTION=trueWindows）将加载数据源。</p>
<h3 id="从环境变量获取值"><a href="#从环境变量获取值" class="headerlink" title="从环境变量获取值"></a>从环境变量获取值</h3><p>使用此命令设置环境变量并在一个命令中运行应用程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ MY_CUSTOM_VAR=&quot;some value&quot; node .</div></pre></td></tr></table></figure>
<p>或单独命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ export MY_CUSTOM_VAR=&quot;some value&quot;</div><div class="line">$ node .</div></pre></td></tr></table></figure>
<p>那么这个变量可以作为您的应用程序使用  process.env.MY_CUSTOM_VAR。</p>
<h1 id="版本化您的API-编辑这个页面"><a href="#版本化您的API-编辑这个页面" class="headerlink" title="版本化您的API  编辑这个页面"></a>版本化您的API  编辑这个页面</h1><p>您可以根据应用程序“主要”版本轻松地将版本控制添加到REST API路由中package.json。</p>
<p>config.local.js 在应用程序/server目录中添加一个名称  为以下代码的文件：</p>
<p><strong>/server/config.local.js</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var p = require(&apos;../package.json&apos;);</div><div class="line">var version = p.version.split(&apos;.&apos;).shift();</div><div class="line">module.exports = &#123;</div><div class="line">  restApiRoot: &apos;/api&apos; + (version &gt; 0 ? &apos;/v&apos; + version : &apos;&apos;),</div><div class="line">  host: process.env.HOST || &apos;localhost&apos;,</div><div class="line">  port: process.env.PORT || 3000</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>这需要从version属性中的主要版本号package.json并将其附加到REST API根目录。如果您的应用程序的主版本为0，那么REST API根目录仍然是默认的  /api。</p>
<p>所以，例如，如果versionin package.json是2.0.1，那么默认情况下暴露的内置模型路由为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET http://localhost:3000/api/Users</div></pre></td></tr></table></figure>
<p>现在暴露在：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET http://localhost:3000/api/v2/Users</div></pre></td></tr></table></figure>
<h1 id="标准项目结构-编辑这个页面"><a href="#标准项目结构-编辑这个页面" class="headerlink" title="标准项目结构  编辑这个页面"></a>标准项目结构  编辑这个页面</h1><p>使用LoopBack的标准项目结构，以便更容易地开发和维护您的项目。<br>LoopBack项目文件和目录位于应用程序根目录下。在该目录中，标准的LoopBack项目结构具有以下子目录：</p>
<ul>
<li>server - 节点应用程序脚本和配置文件。</li>
<li>client - 客户端JavaScript，HTML和CSS文件（仅限于LoopBack工具）。</li>
<li>common - 客户端和服务器通用的文件。 该/models子目录包含模型JSON和JavaScript文件。</li>
<li>definitions- API和产品定义YAML文件（仅限IBM API连接）。<blockquote>
<p> 注意： 客户端和服务器之间共享的模型JSON和JavaScript文件进入/common/models目录。仅服务器文件进入/server/models，客户端进入/client/models</p>
</blockquote>
</li>
</ul>
<p>顶级应用程序目录</p>
<table>
<thead>
<tr>
<th>文件或目录</th>
<th>描述</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>/node-modules 目录</td>
<td>包含指定为依赖关系的节点包package.json。更新npm install。</td>
<td>N / A</td>
</tr>
<tr>
<td>package.json</td>
<td>标准npm包装规格。请参阅package.json。</td>
<td>N / A</td>
</tr>
<tr>
<td>README.md</td>
<td>Stub文件用于内部文档。</td>
<td>N / A</td>
</tr>
</tbody>
</table>
<p>/ server目录 - 节点应用程序文件</p>
<table>
<thead>
<tr>
<th>文件或目录</th>
<th>描述</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>/boot 目录</td>
<td>添加脚本以执行初始化和设置。请参阅引导脚本。</td>
<td>脚本会按字母顺序自动执行。</td>
</tr>
<tr>
<td>/models 目录</td>
<td>仅限服务器的模型定义。</td>
<td>节点：myModel = app.models.myModelName</td>
</tr>
<tr>
<td>component-config.json</td>
<td>指定要加载的LoopBack组件。 仅由Strongloop工具创建。不用于API连接。</td>
</tr>
<tr>
<td>config.json</td>
<td>应用设置。请参阅config.json。</td>
<td>app.get(‘setting-name’)</td>
</tr>
<tr>
<td>datasources.json</td>
<td>数据源配置文件。请参阅datasources.json。有关示例，请参阅创建新的数据源。</td>
<td>app.datasources[‘datasource-name’]</td>
</tr>
<tr>
<td>middleware.json</td>
<td>中间件定义文件。有关详细信息，请参阅定义中间件。</td>
<td>N / A</td>
</tr>
<tr>
<td>middleware.development.json</td>
<td>具有开发配置的中间件定义文件。有关详细信息，请参阅定义中间件。请参阅准备部署。</td>
<td></td>
</tr>
<tr>
<td>model-config.json</td>
<td>型号配置文件。请参阅model-config.json。有关详细信息，请参阅将模型连接到数据源。</td>
<td>N / A</td>
</tr>
<tr>
<td>server.js</td>
<td>主应用程序文件。</td>
<td>N / A</td>
</tr>
</tbody>
</table>
<p>/ client目录 - 客户端应用程序文件</p>
<table>
<thead>
<tr>
<th>文件或目录</th>
<th>描述</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>README.md</td>
<td>LoopBack生成器创建空README.md文件。</td>
<td>N / A</td>
</tr>
<tr>
<td>其他</td>
<td>添加您的HTML，CSS，客户端JavaScript文件。</td>
</tr>
</tbody>
</table>
<p>/ common目录 - 共享应用程序文件</p>
<table>
<thead>
<tr>
<th>文件或目录</th>
<th>描述</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>/models 目录</td>
<td>自定义模型文件：1. 模型定义JSON文件，按照约定命名model-name.json; 例如customer.json。2. 按惯例命名的自定义模型脚本model-name.js; 例如，customer.js。有关更多信息，请参阅模型定义JSON文件和自定义模型。 见下面的注释。</td>
<td>节点：myModel = app.models.myModelName</td>
</tr>
</tbody>
</table>
<blockquote>
<p> 重要：<br>LoopBack 模型生成器 将骆驼壳模型名称（例如MyModel）自动转换为小写虚线名称（my-model）。例如，如果您使用模型生成器创建名为“FooBar”的模型，则会创建文件foo-bar.json并foo-bar.js输入common/models。然而，模型名称（“FooBar”）将通过模型的name属性来保留。</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LoopBack学习之核心概念]]></title>
      <url>/2017/9/17/LoopBack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p>英文地址：<br><a href="http://loopback.io/doc/en/lb3/Glossary.html" target="_blank" rel="external">http://loopback.io/doc/en/lb3/Glossary.html</a></p>
<h1 id="A"><a href="#A" class="headerlink" title="A"></a>A</h1><h4 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h4><p>访问控制列表，与标识所有可访问对象的主题及其访问权限的对象关联的列表。请参阅身份验证，授权和权限。</p>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>应用程序接口。允许以高级语言编写的应用程序使用操作系统或其他程序的特定数据或功能的接口。</p>
<h4 id="APIC"><a href="#APIC" class="headerlink" title="APIC"></a>APIC</h4><p>IBM API Connect命令行工具。它为脚本LoopBack应用程序提供命令。有关更多信息，请参阅命令行工具。</p>
<h4 id="adapter-适配器"><a href="#adapter-适配器" class="headerlink" title="adapter 适配器"></a>adapter 适配器</h4><p>提供传输特定机制，使远程对象（及其集合）在其传输中可用。看强力远程。<br><a id="more"></a></p>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>由Google创建的移动操作系统，其中大部分是根据Apache 2.0和GPLv2开源许可证发布的。</p>
<h4 id="AngularJS"><a href="#AngularJS" class="headerlink" title="AngularJS"></a>AngularJS</h4><p>开源客户端JavaScript框架。</p>
<h4 id="API-Connect-API连接"><a href="#API-Connect-API连接" class="headerlink" title="API Connect API连接"></a>API Connect API连接</h4><p>IBM产品集成了StrongLoop和LoopBack技术，用于创建，运行，管理和保护API。请参阅DeveloperWorks&gt; API连接。</p>
<h4 id="Arc-弧"><a href="#Arc-弧" class="headerlink" title="Arc 弧"></a>Arc 弧</h4><p>StrongLoop API生命周期图形工具套件，包括用于构建，分析和监视节点应用程序的工具。StrongLoop Arc不再处于积极的开发阶段，不久将被淘汰。</p>
<h1 id="B"><a href="#B" class="headerlink" title="B"></a>B</h1><h4 id="boot-script-启动脚本"><a href="#boot-script-启动脚本" class="headerlink" title="boot script 启动脚本"></a>boot script 启动脚本</h4><p>默认情况下，/server/boot目录中启动应用程序时自动运行的JavaScript函数。请参阅定义启动脚本。</p>
<h4 id="built-in-model-内置型号"><a href="#built-in-model-内置型号" class="headerlink" title="built-in model 内置型号"></a>built-in model 内置型号</h4><p>默认情况下，每个LoopBack应用程序都有一个预定义的模型。请参阅使用内置型号。</p>
<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h4 id="cluster-簇"><a href="#cluster-簇" class="headerlink" title="cluster 簇"></a>cluster 簇</h4><p>一组相同的Node worker进程在同一端口上接收请求。参见： 工人。</p>
<h4 id="component-零件"><a href="#component-零件" class="headerlink" title="component 零件"></a>component 零件</h4><p>扩展基本LoopBack应用程序的预定义包。从根本上说，组件是将相关代码捆绑在一起作为一个单元，以使LoopBack应用程序能够轻松重用。请参阅LoopBack组件。</p>
<h4 id="component-连接器"><a href="#component-连接器" class="headerlink" title="component 连接器"></a>component 连接器</h4><p>请参阅LoopBack连接器。</p>
<h1 id="D"><a href="#D" class="headerlink" title="D"></a>D</h1><h4 id="data-source-数据源"><a href="#data-source-数据源" class="headerlink" title="data source 数据源"></a>data source 数据源</h4><p>数据源使用连接器与特定数据库或其他后端系统连接。请参阅将模型连接到数据源。</p>
<h1 id="E"><a href="#E" class="headerlink" title="E"></a>E</h1><h4 id="endpoint-端点"><a href="#endpoint-端点" class="headerlink" title="endpoint 端点"></a>endpoint 端点</h4><p>看路线。</p>
<h4 id="enterprise-connector-企业连接器"><a href="#enterprise-connector-企业连接器" class="headerlink" title="enterprise connector 企业连接器"></a>enterprise connector 企业连接器</h4><p>连接到后端数据源（如Oracle，MySQL或MongoDB）的模块。</p>
<h4 id="environment-variable-环境变量"><a href="#environment-variable-环境变量" class="headerlink" title="environment variable 环境变量"></a>environment variable 环境变量</h4><p>定义进程操作环境方面的变量。例如，环境变量可以定义主目录，命令搜索路径，正在使用的终端或当前时区。</p>
<h4 id="event-loop-事件循环"><a href="#event-loop-事件循环" class="headerlink" title="event loop 事件循环"></a>event loop 事件循环</h4><p>运行Node.js应用程序的单线程执行过程，通常进行一系列异步函数调用。</p>
<h1 id="G"><a href="#G" class="headerlink" title="G"></a>G</h1><h4 id="generator-发电机"><a href="#generator-发电机" class="headerlink" title="generator 发电机"></a>generator 发电机</h4><p>支持全部或部分LoopBack应用程序的交互式命令行工具。请参阅命令行工具。</p>
<h1 id="I"><a href="#I" class="headerlink" title="I"></a>I</h1><h4 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h4><p>苹果设备的封闭源码专有移动操作系统。</p>
<h1 id="J"><a href="#J" class="headerlink" title="J"></a>J</h1><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h4><p>JavaScript对象符号; 一种基于JavaScript对象字面符号的轻量级数据交换格式。JSON是编程语言中性，但使用各种语言的约定。</p>
<h1 id="L"><a href="#L" class="headerlink" title="L"></a>L</h1><h4 id="lb"><a href="#lb" class="headerlink" title="lb"></a>lb</h4><p>用于脚手架和开发LoopBack应用程序的LoopBack命令行界面（CLI）工具。取代传统slc工具。</p>
<h4 id="LDL"><a href="#LDL" class="headerlink" title="LDL"></a>LDL</h4><p>LoopBack定义语言，一种用于定义LoopBack模型和其他配置的JSON形式。</p>
<h4 id="load-balancer-负载均衡器"><a href="#load-balancer-负载均衡器" class="headerlink" title="load balancer 负载均衡器"></a>load balancer 负载均衡器</h4><p>在一组服务器上分发工作负载的软件或硬件，以确保服务器不会过载。如果初始服务器发生故障，负载平衡器也会将用户引导到另一台服务器。</p>
<h4 id="LoopBack-connector-LoopBack连接器"><a href="#LoopBack-connector-LoopBack连接器" class="headerlink" title="LoopBack connector LoopBack连接器"></a>LoopBack connector LoopBack连接器</h4><p>提供对后端系统（如数据库，REST API或其他服务）的访问的连接器。</p>
<h4 id="LoopBack-DataSource-Juggler"><a href="#LoopBack-DataSource-Juggler" class="headerlink" title="LoopBack DataSource Juggler"></a>LoopBack DataSource Juggler</h4><p>对象关系映射，提供了一组通用的接口，用于与数据库，REST API和其他数据源进行交互。</p>
<h4 id="LoopBack-model-LoopBack模型"><a href="#LoopBack-model-LoopBack模型" class="headerlink" title="LoopBack model LoopBack模型"></a>LoopBack model LoopBack模型</h4><p>由应用程序数据，验证规则，数据访问功能以及默认提供REST API的业务逻辑组成的模型。</p>
<h1 id="M"><a href="#M" class="headerlink" title="M"></a>M</h1><h4 id="MBaaS"><a href="#MBaaS" class="headerlink" title="MBaaS"></a>MBaaS</h4><p>移动后端即服务。将移动应用程序连接到云计算服务的计算模型，通过统一的API和SDK，提供用户管理，推送通知和社交网络集成等功能。</p>
<h4 id="middleware-function-中间件功能"><a href="#middleware-function-中间件功能" class="headerlink" title="middleware function 中间件功能"></a>middleware function 中间件功能</h4><p>当向指定的REST端点发出HTTP请求时执行的功能。由于LoopBack基于Express，LoopBack中间件与Express中间件相同。请参阅定义中间件。</p>
<h4 id="middleware-phase-中间件阶段"><a href="#middleware-phase-中间件阶段" class="headerlink" title="middleware phase 中间件阶段"></a>middleware phase 中间件阶段</h4><p>当您调用中间件功能时，应用程序执行阶段。请参阅定义中间件。</p>
<h4 id="model-模型"><a href="#model-模型" class="headerlink" title="model 模型"></a>model 模型</h4><p>请参阅LoopBack模型。</p>
<h4 id="model-property-模型属性"><a href="#model-property-模型属性" class="headerlink" title="model property 模型属性"></a>model property 模型属性</h4><p>附加到模型的值; 对于持久化模型，对应于数据库列或字段。</p>
<h1 id="N"><a href="#N" class="headerlink" title="N"></a>N</h1><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><p>节点包管理器，用于使用npm注册表安装应用程序和管理依赖关系的命令行工具。</p>
<h1 id="O"><a href="#O" class="headerlink" title="O"></a>O</h1><h4 id="on-premises-本地"><a href="#on-premises-本地" class="headerlink" title="on-premises 本地"></a>on-premises 本地</h4><p>涉及在用户或组织的本地计算机上安装和运行的软件。</p>
<h4 id="operation-hook-操作钩"><a href="#operation-hook-操作钩" class="headerlink" title="operation hook 操作钩"></a>operation hook 操作钩</h4><p>由模型的高级创建，检索，更新或删除（CRUD）操作触发的代码。请参阅操作钩。</p>
<h1 id="P"><a href="#P" class="headerlink" title="P"></a>P</h1><h4 id="Persisted-model-持久模型"><a href="#Persisted-model-持久模型" class="headerlink" title="Persisted model 持久模型"></a>Persisted model 持久模型</h4><p>一个LoopBack模型，连接到持久性数据源，自动获取基本的创建，读取，更新和删除方法。</p>
<h4 id="production-生产"><a href="#production-生产" class="headerlink" title="production 生产"></a>production 生产</h4><p>当应用程序或API通常可用于最终用户或消费者时，软件生命周期中的阶段。与“发展”和“测试”对比。也称为“部署”。</p>
<h4 id="production-host-生产主机"><a href="#production-host-生产主机" class="headerlink" title="production host 生产主机"></a>production host 生产主机</h4><p>运行生产应用程序的服务器。</p>
<h4 id="property-属性"><a href="#property-属性" class="headerlink" title="property 属性"></a>property 属性</h4><p>请参阅模型属性。</p>
<h4 id="push-notification-推送通知"><a href="#push-notification-推送通知" class="headerlink" title="push notification 推送通知"></a>push notification 推送通知</h4><p>向移动应用发送警报或消息。请参阅推送通知。</p>
<h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><h4 id="remote-object-远程对象"><a href="#remote-object-远程对象" class="headerlink" title="remote object 远程对象"></a>remote object 远程对象</h4><p>通过StrongLoop应用程序通过网络导出的JavaScript对象与从模块导出功能的方式相同。您可以使用JavaScript在本地调用远程对象上的方法。</p>
<h4 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h4><p>用于分布式超媒体系统（如万维网）的软件架构风格。该术语还经常用于描述任何使用XML（或YAML，JSON，纯文本）的简单界面，而不需要附加的消息层，例如SOAP。</p>
<h4 id="route-路由"><a href="#route-路由" class="headerlink" title="route 路由"></a>route 路由</h4><p>识别资源的URL的一部分。例如，在http: //foo.com/products/id, the route is /products/id.</p>
<h4 id="runtime-运行"><a href="#runtime-运行" class="headerlink" title="runtime 运行"></a>runtime 运行</h4><p>与计算机程序运行的时间段有关。</p>
<h1 id="S"><a href="#S" class="headerlink" title="S"></a>S</h1><h4 id="SDK"><a href="#SDK" class="headerlink" title="SDK"></a>SDK</h4><p>软件开发套件 一组工具，API和文档，以协助以特定的计算机语言或特定的操作环境开发软件。</p>
<h4 id="SLC"><a href="#SLC" class="headerlink" title="SLC"></a>SLC</h4><p>用于开发和操作的传统StrongLoop命令行工具。它被LoopBack CLI工具所取代lb。</p>
<h4 id="synchronization-同步"><a href="#synchronization-同步" class="headerlink" title="synchronization 同步"></a>synchronization 同步</h4><p>在两个端点（如提供商应用程序和移动应用程序）之间实现数据一致性的过程。在此过程中，在任一端点，可以更新，创建或删除数据。请参阅同步。</p>
<h1 id="W"><a href="#W" class="headerlink" title="W"></a>W</h1><h4 id="worker"><a href="#worker" class="headerlink" title="worker"></a>worker</h4><p>Node.js子进程。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LoopBack学习之词汇表]]></title>
      <url>/2017/9/17/LoopBack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%AF%8D%E6%B1%87%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>准备工作：<br>安装LTS版本的Node.js.<br>安装LoopBack CLI工具<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g loopback-cli</div></pre></td></tr></table></figure></p>
<p>英文原地址：<a href="http://loopback.io/doc/en/lb3/LoopBack-core-concepts.html" target="_blank" rel="external">http://loopback.io/doc/en/lb3/LoopBack-core-concepts.html</a></p>
<h1 id="LoopBack核心概念"><a href="#LoopBack核心概念" class="headerlink" title="LoopBack核心概念"></a>LoopBack核心概念</h1><p>模型是LoopBack的核心，代表后端数据源，如数据库或其他后端服务（REST，SOAP等）。LoopBack模型是具有Node和REST API的JavaScript对象。<br>LoopBack的一个关键功能是当您定义模型时，它将自动附带预定义的REST API，并具有完整的创建，读取，更新和删除操作。</p>
<p><img src="http://upload-images.jianshu.io/upload_images/454522-ebe8bcfc2640ff85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="模型继承"></p>
<p>在  基本模型对象对添加方法  挂钩  和验证数据。其他模型对象都“继承”它。模型具有继承层次结构，如图所示：将模型附加到持久性数据源时，它将成为 具有创建，检索，更新和删除操作的连接模型。LoopBack的内置模型从它继承。<br><a id="more"></a></p>
<h4 id="内置型号"><a href="#内置型号" class="headerlink" title="内置型号"></a>内置型号</h4><p>每个LoopBack应用程序都有一组预定义的  内置模型，如用户，角色和应用程序，因此您不必从头开始创建这些常见模型</p>
<h4 id="定制机型"><a href="#定制机型" class="headerlink" title="定制机型"></a>定制机型</h4><p>您可以  定义自己的  特定于您的应用程序的自定义模型。您可以使您的自定义模型  扩展内置模型，  以建立在用户，  应用程序和其他内置模型的预定义功能的基础上 。</p>
<p>您可以以各种方式创建LoopBack模型，具体取决于模型基于什么样的数据源。您可以创建模型：</p>
<ul>
<li>使用LoopBack模型生成器。</li>
<li>从  使用模型发现的现有关系数据库中。然后，您可以使用LoopBack的模式/模型同步  API 将模型与数据库保持  同步。</li>
<li>例如  NoSQL数据库或REST API中的自由格式数据的内省。</li>
</ul>
<p>所有这三种方法都创建了一个  模型定义JSON文件，它通过LoopBack项目的common/models目录中的约定在LoopBack中定义您的模型; 例如，common/models/account.json。</p>
<p>您也可以使用LoopBack API以编程方式创建和自定义模型  ，也可以手动编辑  模型定义JSON文件。在大多数情况下，您不需要使用这些技术来创建模型，但您通常将使用它们来修改和定制模型。</p>
<blockquote>
<p> 注意：<br>该模型定义JSON文件包括idInjection指示环回是否会自动添加一个独特的财产  id 属性的模型。对于连接到数据库的模型，id属性对应于主键。有关详细信息，请参阅ID属性。</p>
</blockquote>
<h4 id="模型关系"><a href="#模型关系" class="headerlink" title="模型关系"></a>模型关系</h4><p>你可以表达  模型之间的关系，如  BelongsTo,  HasMany 和  HasAndBelongsToMany。 </p>
<p>模型创建，检索，更新和删除操作</p>
<p>当将模型连接到持久数据源（如数据库）时，它将成为一个  连接的模型，   其中包含来自PersistedModel  类的一整套创建，读取，更新和删除操作  ：</p>
<table>
<thead>
<tr>
<th>操作</th>
<th>REST</th>
<th>LoopBack模型方法</th>
<th>相应的SQL操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建</td>
<td>PUT / modelName 和 POST / modelName</td>
<td>create()</td>
<td>INSERT</td>
</tr>
<tr>
<td>阅读（检索）</td>
<td>GET / modelName？filter = …</td>
<td>find()</td>
<td>SELECT</td>
</tr>
<tr>
<td>更新（修改）</td>
<td>PUT / modelName</td>
<td>updateAll()</td>
<td>UPDATE</td>
</tr>
<tr>
<td>删除（毁灭）</td>
<td>DELETE / modelName / modelID</td>
<td>destroyById()</td>
<td>DELETE</td>
</tr>
</tbody>
</table>
<p>（*）列举的方法只是突出例子; 其他方法可以提供类似的功能; 例如：  findById()，  findOne()，和  findOrCreate()。 </p>
<p>有关更多信息，请参阅PersistedModel API文档。</p>
<h4 id="应用逻辑"><a href="#应用逻辑" class="headerlink" title="应用逻辑"></a>应用逻辑</h4><p>您可以以多种方式添加自定义应用程序逻辑; 您可以：</p>
<ul>
<li>通过远程方法（自定义REST端点）， 远程  方法触发的远程  钩子  以及由模型创建，检索，更新和删除方法触发的操作钩子将应用程序逻辑添加到模型中。</li>
<li>添加应用程序启动时运行的引导脚本。</li>
<li>定义自定义  中间件，类似于Express中间件。</li>
</ul>
<p>您可以在将数据保存到模型和后端数据存储之前添加验证数据的代码。</p>
<h4 id="中间件阶段"><a href="#中间件阶段" class="headerlink" title="中间件阶段"></a>中间件阶段</h4><p>中间件  是指当HTTP请求到REST端点做出执行的功能。由于LoopBack基于  Express，LoopBack中间件与Express中间件相同  。然而，LoopBack增加了阶段的概念，以清楚地定义调用中间件的顺序。使用阶段有助于避免订购标准Express中间件可能发生的问题。</p>
<h4 id="数据源和连接器"><a href="#数据源和连接器" class="headerlink" title="数据源和连接器"></a>数据源和连接器</h4><p><img src="http://upload-images.jianshu.io/upload_images/454522-03f84365a30b7b68.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数据源和连接器模型"></p>
<p>LoopBack将后端服务（如数据库，REST API，SOAP Web服务和存储服务）概括为  数据源。</p>
<p>数据源由连接器支持，然后连接器直接与数据库或其他后端服务进行通信。应用程序不直接使用连接器，而是使用DataSource  和  PersistedModel  API 访问数据源  。</p>
<h4 id="LoopBack组件"><a href="#LoopBack组件" class="headerlink" title="LoopBack组件"></a>LoopBack组件</h4><p>LoopBack组件提供额外的“插件”功能：</p>
<ul>
<li><strong>推送通知</strong>  - 可以将信息发送到移动应用，以立即在移动设备上的“徽章”，警报或弹出式消息中显示。</li>
<li><strong>存储组件</strong>  - 可以向云存储提供商（Amazon，Rackspace，Openstack和Azure）以及服务器文件系统上传和下载文件。</li>
<li><strong>第三方登录</strong>  - 集成  Passport  ，并使用来自Facebook，Google，Twitter，Github或支持OAuth，OAuth 2或OpenID的任何系统的第三方凭据启用用户登录（和帐户链接）。</li>
<li><strong>同步</strong>  - 使移动应用程序能够脱机运行，然后在重新连接时将数据与服务器应用程序同步。</li>
<li><strong>OAuth 2.0</strong>  - 使LoopBack应用程序能够作为oAuth 2.0提供程序来验证和授权客户端应用程序和用户访问受保护的API端点。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CentOS配置Docker+NodeJS服务]]></title>
      <url>/2017/9/17/CentOS%E9%85%8D%E7%BD%AEDocker+NodeJS%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>Mac端的本地环境请点击：<a href="http://www.jianshu.com/p/e33815e71e35" target="_blank" rel="external">Mac配置Docker+NodeJS服务</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>安装 NodeJS<br><a href="https://nodejs.org/en/download/" title="https://nodejs.org/en/download/" target="_blank" rel="external">https://nodejs.org/en/download/</a><br>准备命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install gcc make gcc-c++ openssl-devel wget</div></pre></td></tr></table></figure></p>
<p>下载源码及解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/v6.11.3/node-v6.11.3.tar.gz</div><div class="line">tar -zvxf node-v6.11.3.tar.gz</div></pre></td></tr></table></figure></p>
<p>检查所需要配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure</div></pre></td></tr></table></figure></p>
<p>编译及安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure></p>
<p>验证是否安装配置成功：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node -v</div></pre></td></tr></table></figure></p>
<hr>
<a id="more"></a>
<p>安装loopback-cli<br><a href="http://loopback.io" title="http://loopback.io" target="_blank" rel="external">http://loopback.io</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g loopback-cli</div></pre></td></tr></table></figure></p>
<p>安装git<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install git</div></pre></td></tr></table></figure></p>
<p>安装cnpm<br><a href="https://npm.taobao.org/" title="https://npm.taobao.org/" target="_blank" rel="external">https://npm.taobao.org/</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure></p>
<p>安装zsh作为默认SHELL<br><a href="http://blog.csdn.net/w670328683/article/details/49782601" title="http://blog.csdn.net/w670328683/article/details/49782601" target="_blank" rel="external">http://blog.csdn.net/w670328683/article/details/49782601</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">yum -y install zsh</div><div class="line">chsh -s /bin/zsh</div><div class="line">echo $SHELL</div></pre></td></tr></table></figure></p>
<p>安装oh-my-zsh美化zsh<br><a href="https://github.com/robbyrussell/oh-my-zsh" title="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">https://github.com/robbyrussell/oh-my-zsh</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</div></pre></td></tr></table></figure></p>
<p>安装docker和docker-compose<br><a href="http://www.linuxidc.com/Linux/2014-12/110034.htm" title="http://www.linuxidc.com/Linux/2014-12/110034.htm" target="_blank" rel="external">http://www.linuxidc.com/Linux/2014-12/110034.htm</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum install docker</div><div class="line">yum install docker-compose</div></pre></td></tr></table></figure></p>
<p>安装gem<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y gem</div></pre></td></tr></table></figure></p>
<p>安装mosh<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mosh</div></pre></td></tr></table></figure></p>
<p>安装Vim的插件janus<br>The distribution also requires ack, ctags, git, ruby and rake.<br><a href="https://github.com/carlhuda/janus" title="https://github.com/carlhuda/janus" target="_blank" rel="external">https://github.com/carlhuda/janus</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L https://bit.ly/janus-bootstrap | bash</div></pre></td></tr></table></figure></p>
<p>安装httpie<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install httpie</div></pre></td></tr></table></figure></p>
<hr>
<h1 id="centOS的一些命令："><a href="#centOS的一些命令：" class="headerlink" title="centOS的一些命令："></a>centOS的一些命令：</h1><p>docker的一些命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker-compose down</div><div class="line">docker-compose up -d</div><div class="line">service docker start</div><div class="line">chkconfig docker on</div></pre></td></tr></table></figure></p>
<p>安装caddy-docker例子,测试docker功能<br><a href="https://github.com/abiosoft/caddy-docker" title="https://github.com/abiosoft/caddy-docker" target="_blank" rel="external">https://github.com/abiosoft/caddy-docker</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">docker run -d -p 2015:2015 abiosoft/caddy</div></pre></td></tr></table></figure></p>
<p>查看log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">docker ps</div><div class="line">docker exec -it xiaoyx_ws_1 sh</div><div class="line">pm2 list</div><div class="line">pm2 logs 1</div></pre></td></tr></table></figure></p>
<p>硬盘<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">df -h</div></pre></td></tr></table></figure></p>
<p>内存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">free -h</div></pre></td></tr></table></figure></p>
<p>目录详情<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -lh</div></pre></td></tr></table></figure></p>
<p>安装路径。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">which node</div></pre></td></tr></table></figure></p>
<p>连接服务器（免密码）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ls .ssh</div><div class="line">ssh-keygen</div><div class="line">ssh-copy-id root@dlin.top</div><div class="line">ssh root@dlin.top</div></pre></td></tr></table></figure></p>
<p>mosh连接服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mosh root@dlin.top</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl http://0.0.0.0:2015</div><div class="line">curl http://google.com</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ip addr</div></pre></td></tr></table></figure>]]></content>
      
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LoopBack学习之命令行]]></title>
      <url>/2017/9/17/LoopBack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h3 id="创建新应用程序"><a href="#创建新应用程序" class="headerlink" title="创建新应用程序:"></a>创建新应用程序:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lb</div></pre></td></tr></table></figure>
<p>然后，生成器将显示消息，因为它支架应用程序包括：</p>
<ol>
<li>初始化  项目文件夹结构。</li>
<li>创建默认的JSON文件。</li>
<li>创建默认的JavaScript文件。</li>
<li>下载并安装依赖节点模块（就好像已经手动完成  npm install）。</li>
</ol>
<h3 id="创建模型"><a href="#创建模型" class="headerlink" title="创建模型:"></a>创建模型:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lb model</div></pre></td></tr></table></figure>
<ul>
<li>型号名称：review</li>
<li>资料来源：mongoDs（mongodb）</li>
<li>基类：使用向下箭头键选择  PersistedModel。</li>
<li>通过REST API公开审查？按RETURN接受默认值。</li>
<li>自定义复数形式（用于构建REST URL）：按RETURN接受默认值，是。</li>
<li>通用型号或服务器：按RETURN接受默认的常用型号。</li>
</ul>
<p>模型生成器将在应用程序的common/models目录中创建两个定义模型的文件<br><a id="more"></a></p>
<h3 id="定义关系"><a href="#定义关系" class="headerlink" title="定义关系"></a>定义关系</h3><p>现在，您将要定义模型之间的这些关系。总共有五个关系。再次，您将使用该lb命令，但这次您将使用relation子命令（关系生成器）。对于每个关系，请输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lb relation</div></pre></td></tr></table></figure>
<h4 id="查看模型JSON文件"><a href="#查看模型JSON文件" class="headerlink" title="查看模型JSON文件"></a>查看模型JSON文件</h4><p>现在，看看common/models/review.json</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">&quot;relations&quot;: &#123;</div><div class="line">  &quot;coffeeShop&quot;: &#123;</div><div class="line">    &quot;type&quot;: &quot;belongsTo&quot;,</div><div class="line">    &quot;model&quot;: &quot;CoffeeShop&quot;,</div><div class="line">    &quot;foreignKey&quot;: &quot;&quot;</div><div class="line">  &#125;,</div><div class="line">  &quot;reviewer&quot;: &#123;</div><div class="line">    &quot;type&quot;: &quot;belongsTo&quot;,</div><div class="line">    &quot;model&quot;: &quot;Reviewer&quot;,</div><div class="line">    &quot;foreignKey&quot;: &quot;publisherId&quot;</div><div class="line">  &#125;</div><div class="line">&#125;,</div><div class="line">...</div></pre></td></tr></table></figure>
<h4 id="定义访问控制"><a href="#定义访问控制" class="headerlink" title="定义访问控制"></a>定义访问控制</h4><p>再次，您将使用该lb工具，但这次您将使用acl子命令; 对于每个ACL，输入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lb acl</div></pre></td></tr></table></figure>
<h4 id="查看review-json文件"><a href="#查看review-json文件" class="headerlink" title="查看review.json文件"></a>查看review.json文件</h4><p>完成后，ACL部分  common/models/review.json 应如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">... </div><div class="line">&quot;acls&quot;: [&#123;</div><div class="line">  &quot;accessType&quot;: &quot;*&quot;,</div><div class="line">  &quot;principalType&quot;: &quot;ROLE&quot;,</div><div class="line">  &quot;principalId&quot;: &quot;$everyone&quot;,</div><div class="line">  &quot;permission&quot;: &quot;DENY&quot;</div><div class="line">&#125;, &#123;</div><div class="line">  &quot;accessType&quot;: &quot;READ&quot;,</div><div class="line">  &quot;principalType&quot;: &quot;ROLE&quot;,</div><div class="line">  &quot;principalId&quot;: &quot;$everyone&quot;,</div><div class="line">  &quot;permission&quot;: &quot;ALLOW&quot;</div><div class="line">&#125;, &#123;</div><div class="line">  &quot;accessType&quot;: &quot;EXECUTE&quot;,</div><div class="line">  &quot;principalType&quot;: &quot;ROLE&quot;,</div><div class="line">  &quot;principalId&quot;: &quot;$authenticated&quot;,</div><div class="line">  &quot;permission&quot;: &quot;ALLOW&quot;,</div><div class="line">  &quot;property&quot;: &quot;create&quot;</div><div class="line">&#125;, &#123;</div><div class="line">  &quot;accessType&quot;: &quot;WRITE&quot;,</div><div class="line">  &quot;principalType&quot;: &quot;ROLE&quot;,</div><div class="line">  &quot;principalId&quot;: &quot;$owner&quot;,</div><div class="line">  &quot;permission&quot;: &quot;ALLOW&quot;</div><div class="line">&#125;],</div><div class="line">...</div></pre></td></tr></table></figure>
<h3 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源:"></a>添加数据源:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ lb datasource</div></pre></td></tr></table></figure>
<h3 id="安装SQLDB连接器"><a href="#安装SQLDB连接器" class="headerlink" title="安装SQLDB连接器"></a>安装SQLDB连接器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install loopback-connector-mysql --save。</div></pre></td></tr></table></figure>
<h3 id="安装MongoDB连接器"><a href="#安装MongoDB连接器" class="headerlink" title="安装MongoDB连接器"></a>安装MongoDB连接器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save loopback-connector-mongodb</div></pre></td></tr></table></figure>
<p>该工具还将数据源定义添加到  server/datasources.json 文件中，如下所示。请注意刚刚添加的“mysqlDs”数据源，以及名为“db”的内存数据源，默认情况下是这样。</p>
<p><strong>/server/datasources.json</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;db&quot;: &#123;</div><div class="line">        &quot;name&quot;: &quot;db&quot;,</div><div class="line">        &quot;connector&quot;: &quot;memory&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;mysqlDs&quot;: &#123;</div><div class="line">      &quot;host&quot;: &quot;demo.strongloop.com&quot;,</div><div class="line">      &quot;port&quot;: 3306,</div><div class="line">      &quot;url&quot;: &quot;&quot;,</div><div class="line">      &quot;database&quot;: &quot;getting_started&quot;,</div><div class="line">      &quot;password&quot;: &quot;L00pBack&quot;,</div><div class="line">      &quot;name&quot;: &quot;mysqlDs&quot;,</div><div class="line">      &quot;user&quot;: &quot;demo&quot;,</div><div class="line">      &quot;connector&quot;: &quot;mysql&quot;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    &quot;mongoDs&quot;: &#123;</div><div class="line">        &quot;name&quot;: &quot;mongoDs&quot;,</div><div class="line">        &quot;connector&quot;: &quot;mongodb&quot;,</div><div class="line">        &quot;host&quot;: &quot;demo.strongloop.com&quot;,</div><div class="line">        &quot;port&quot;: 27017,</div><div class="line">        &quot;database&quot;: &quot;getting_started_intermediate&quot;,</div><div class="line">        &quot;username&quot;: &quot;demo&quot;,</div><div class="line">        &quot;password&quot;: &quot;L00pBack&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="将模型连接到数据源"><a href="#将模型连接到数据源" class="headerlink" title="将模型连接到数据源"></a>将模型连接到数据源</h3><p>LoopBack应用程序使用  model-config.json  文件将模型链接到数据源。编辑  /server/model-config.json 并查找CoffeeShop条目：</p>
<p><strong>/server/model-config.json</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  &quot;CoffeeShop&quot;: &#123;</div><div class="line">    &quot;dataSource&quot;: &quot;db&quot;,</div><div class="line">    &quot;public&quot;: true</div><div class="line">  &#125;</div><div class="line">  ...</div></pre></td></tr></table></figure>
<p>将dataSource 属性  更改  db 为  mysqlDs。这将CoffeeShop模型附加到刚刚创建和配置的MySQL数据源：</p>
<p><strong>/server/model-config.json</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">  &quot;CoffeeShop&quot;: &#123;</div><div class="line">    &quot;dataSource&quot;: &quot;mysqlDs&quot;,</div><div class="line">    &quot;public&quot;: true</div><div class="line">  &#125;</div><div class="line">  ...</div></pre></td></tr></table></figure>
<h3 id="添加一些测试数据并查看它"><a href="#添加一些测试数据并查看它" class="headerlink" title="添加一些测试数据并查看它"></a>添加一些测试数据并查看它</h3><p>现在您在LoopBack中有一个CoffeeShop模型，如何在MySQL数据库中创建相应的表？</p>
<p>您可以直接尝试执行一些SQL语句，但是LoopBack提供了一个Node API，可以自动使用称为自动迁移的过程  。有关详细信息，请参阅  从模型创建数据库模式。</p>
<p>该  loopback-getting-started 模块包含create-sample-models.js 演示自动迁移的  脚本。如果你从一开始就一直在追踪（而不是克隆这个模块），那么你需要从下面或从GitHub复制它   。将其放在应用程序的  /server/boot 目录中，以便在应用程序启动时执行。</p>
<blockquote>
<p> 注意： 下面的自动迁移脚本是在应用程序初始启动时LoopBack执行的引导脚本的示例。使用引导脚本进行初始化，并执行应用程序启动时执行的任何其他逻辑。有关详细信息，请参阅定义启动脚本。</p>
</blockquote>
<p><strong>/server/boot/create-sample-models.js</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">module.exports = function(app) &#123;</div><div class="line">  app.dataSources.mysqlDs.automigrate(&apos;CoffeeShop&apos;, function(err) &#123;</div><div class="line">    if (err) throw err;</div><div class="line"></div><div class="line">    app.models.CoffeeShop.create([&#123;</div><div class="line">      name: &apos;Bel Cafe&apos;,</div><div class="line">      city: &apos;Vancouver&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">      name: &apos;Three Bees Coffee House&apos;,</div><div class="line">      city: &apos;San Mateo&apos;</div><div class="line">    &#125;, &#123;</div><div class="line">      name: &apos;Caffe Artigiano&apos;,</div><div class="line">      city: &apos;Vancouver&apos;</div><div class="line">    &#125;, ], function(err, coffeeShops) &#123;</div><div class="line">      if (err) throw err;</div><div class="line"></div><div class="line">      console.log(&apos;Models created: \n&apos;, coffeeShops);</div><div class="line">    &#125;);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="更新引导脚本以添加数据"><a href="#更新引导脚本以添加数据" class="headerlink" title="更新引导脚本以添加数据"></a>更新引导脚本以添加数据</h3><p>记得早在第一部分的  入门，你  增加了一个启动脚本  来创建模型（通过自动迁移）数据库表和一些数据添加到数据库中。</p>
<p>现在您有了一些新的模型和新的数据源，您需要更新此脚本，以便在MongoDB中创建数据结构，并通过新模型插入数据。</p>
<p>复制和粘贴下面的代码  到  server/boot/create-sample-models.js，替换现有的代码。</p>
<p>然后跑</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save async</div></pre></td></tr></table></figure>
<p>此启动脚本有几个功能：</p>
<ul>
<li>createCoffeeShops()为CoffeeShop模型创建一个MySQL表，并将数据添加到表中。 这是create-sample-models.js从入门起的脚本 。</li>
<li>createReviewers() 使用自动迁移在MongoDB中创建Reviewer数据结构，并向其添加数据。  </li>
<li>createReviews() 在MongoDB中使用自动迁移创建评论数据结构，并向其添加数据。</li>
</ul>
<h3 id="启动应用程序："><a href="#启动应用程序：" class="headerlink" title="启动应用程序："></a>启动应用程序：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ node .</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[身份证校验算法swift版本]]></title>
      <url>/2017/9/2/%E8%BA%AB%E4%BB%BD%E8%AF%81%E6%A0%A1%E9%AA%8C%E7%AE%97%E6%B3%95swift%E7%89%88%E6%9C%AC/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/454522-e8a20d7db71d6992.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="参考的算法资料"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">func checkIsIdentityCard(_ identityCard: String) -&gt; Bool &#123;</div><div class="line">    //判断是否为空</div><div class="line">    if identityCard.characters.count &lt;= 0 &#123;</div><div class="line">        return false</div><div class="line">    &#125;</div><div class="line">    //判断是否是18位，末尾是否是x</div><div class="line">    let regex2: String = &quot;^(\\d&#123;14&#125;|\\d&#123;17&#125;)(\\d|[xX])$&quot;</div><div class="line">    let identityCardPredicate = NSPredicate(format: &quot;SELF MATCHES %@&quot;, regex2)</div><div class="line">    if !identityCardPredicate.evaluate(with: identityCard) &#123;</div><div class="line">        return false</div><div class="line">    &#125;</div><div class="line">    //判断生日是否合法</div><div class="line">    let range = NSRange(location: 6, length: 8)</div><div class="line">    let datestr: String = (identityCard as NSString).substring(with: range)</div><div class="line">    let formatter = DateFormatter()</div><div class="line">    formatter.dateFormat = &quot;yyyyMMdd&quot;</div><div class="line">    if formatter.date(from: datestr) == nil &#123;</div><div class="line">        return false</div><div class="line">    &#125;</div><div class="line">    //判断校验位</div><div class="line">    if  identityCard.characters.count == 18 &#123;</div><div class="line">        let idCardWi: [String] = [&quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;4&quot;, &quot;2&quot;, &quot;1&quot;, &quot;6&quot;, &quot;3&quot;, &quot;7&quot;, &quot;9&quot;, &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;4&quot;, &quot;2&quot;]</div><div class="line">        //将前17位加权因子保存在数组里</div><div class="line">        let idCardY: [String] = [&quot;1&quot;, &quot;0&quot;, &quot;10&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;6&quot;, &quot;5&quot;, &quot;4&quot;, &quot;3&quot;, &quot;2&quot;]</div><div class="line">        //这是除以11后，可能产生的11位余数、验证码，也保存成数组</div><div class="line">        var idCardWiSum: Int = 0</div><div class="line">        //用来保存前17位各自乖以加权因子后的总和</div><div class="line">        for i in 0..&lt;17 &#123;</div><div class="line">            idCardWiSum += Int((identityCard as NSString).substring(with: NSRange(location: i, length: 1)))! * Int(idCardWi[i])!</div><div class="line">        &#125;</div><div class="line">        let idCardMod: Int = idCardWiSum % 11</div><div class="line">        //计算出校验码所在数组的位置</div><div class="line">        let idCardLast: String = identityCard.substring(from: identityCard.index(identityCard.endIndex, offsetBy: -1))</div><div class="line">        //得到最后一位身份证号码</div><div class="line">        //如果等于2，则说明校验码是10，身份证号码最后一位应该是X</div><div class="line">        if idCardMod == 2 &#123;</div><div class="line">            if idCardLast == &quot;X&quot; || idCardLast == &quot;x&quot; &#123;</div><div class="line">                return true</div><div class="line">            &#125; else &#123;</div><div class="line">                return false</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            //用计算出的验证码与最后一位身份证号码匹配，如果一致，说明通过，否则是无效的身份证号码</div><div class="line">            if (idCardLast as NSString).integerValue == Int(idCardY[idCardMod]) &#123;</div><div class="line">                return true</div><div class="line">            &#125; else &#123;</div><div class="line">                return false</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://upload-images.jianshu.io/upload_images/454522-aee8942d7d8f8bbd.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自勉，自律"></p>
]]></content>
      
        <categories>
            
            <category> 经验心得 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LaunchImage载入界面标准大小]]></title>
      <url>/2016/1/15/LaunchImage%E8%BD%BD%E5%85%A5%E7%95%8C%E9%9D%A2%E6%A0%87%E5%87%86%E5%A4%A7%E5%B0%8F/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/454522-0329a0b0dc2ad0ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="载入界面标准大小"></p>
<p>iPhone Portrait iOS 8,9 Retina HD 5.5 （1242×2208） @3x</p>
<p>iPhone Portrait iOS 8,9 Retina HD 4.7 （750×1334） @2x</p>
<p>iPhone Portrait iOS 7-9 2x （640×960） @2x</p>
<p>iPhone Portrait iOS 7-9 Retina 4 （640×1136） @2x</p>
<p>iPhone Portrait iOS 5,6 1x （320×480） @1x</p>
<p>iPhone Portrait iOS 5,6 2x （640×960） @2x</p>
<p>iPhone Portrait iOS 5,6 Retina4 （640×1136） @2x</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[CocoaPods安装命令行]]></title>
      <url>/2016/1/15/CocoaPods%E5%AE%89%E8%A3%85%E5%91%BD%E4%BB%A4%E8%A1%8C/</url>
      <content type="html"><![CDATA[<ol>
<li><p>安装xcode工具</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcode-select --install</div></pre></td></tr></table></figure>
</li>
<li><p>安装rvm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">curl -L get.rvm.io | bash -s stable</div><div class="line"></div><div class="line">rvm list known （找到最新的rvm版本）</div><div class="line"></div><div class="line">rvm install 2.4</div></pre></td></tr></table></figure>
</li>
</ol>
<p>3.改数据源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">gem sources -a https://gems.ruby-china.org</div><div class="line"></div><div class="line">gem sources --remove https://rubygems.org/</div></pre></td></tr></table></figure></p>
<ol>
<li><p>安装rails</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install rails</div></pre></td></tr></table></figure>
</li>
<li><p>安装cocoapods</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gem install cocoapods</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在cocoapods 执行 sudo gem install cocoapods 的时候出现  While executing gem … (Gem::FilePermissionError)<br>    You don’t have write permissions for the /usr/bin directory.<br>改为 sudo gem install -n /usr/local/bin cocoapods  即可</p>
]]></content>
      
        
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2015/5/20/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
